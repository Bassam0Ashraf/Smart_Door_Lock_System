
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  000023e6  2**0
                  ALLOC
  3 .stab         0000276c  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c9  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000625d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a86b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__vector_4>
      14:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_9>
      28:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_10>
      2c:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 07 	call	0xea8	; 0xea8 <main>
      8a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description :
 * Function initializes the buzzer pin direction and turn off the buzzer.
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure buzzer pin as OUTPUT pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>

	/* Turn OFF buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description :
 * Function activates the buzzer.
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	/* Turn ON buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description :
 * Function deactivates the buzzer.
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	/* Turn OFF buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <Calculate_time>:
 *                            FUNCTIONS DEFINITIONS                            *
 *******************************************************************************/

/* Function to calculate time */
void Calculate_time(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;
     ba0:	80 91 76 00 	lds	r24, 0x0076
     ba4:	90 91 77 00 	lds	r25, 0x0077
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	90 93 77 00 	sts	0x0077, r25
     bae:	80 93 76 00 	sts	0x0076, r24

}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Receive_Password>:

/* Function to Receive password */
void Receive_Password(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	60 97       	sbiw	r28, 0x10	; 16
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	/* wait for ACK from HMI ECU to
	 * start save the password */
	while(UART_recieveByte()!= SAVE);
     bcc:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <Receive_Password+0x14>
	uint8 pass,count_pass;
	for(count_pass=5; count_pass>0; count_pass--)
     bd4:	85 e0       	ldi	r24, 0x05	; 5
     bd6:	8f 87       	std	Y+15, r24	; 0x0f
     bd8:	83 c0       	rjmp	.+262    	; 0xce0 <Receive_Password+0x128>
	{
		/* send ACK to HMI ECU that control ECU
		 * ready to receive password */
		UART_sendByte(M2_CONTROL_READY);
     bda:	80 e2       	ldi	r24, 0x20	; 32
     bdc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		pass = UART_recieveByte();
     be0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     be4:	88 8b       	std	Y+16, r24	; 0x10
		EEPROM_writeByte((0x0311+count_pass), pass);
     be6:	8f 85       	ldd	r24, Y+15	; 0x0f
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	8f 5e       	subi	r24, 0xEF	; 239
     bee:	9c 4f       	sbci	r25, 0xFC	; 252
     bf0:	68 89       	ldd	r22, Y+16	; 0x10
     bf2:	0e 94 3c 08 	call	0x1078	; 0x1078 <EEPROM_writeByte>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	ac e8       	ldi	r26, 0x8C	; 140
     bfc:	b2 e4       	ldi	r27, 0x42	; 66
     bfe:	8b 87       	std	Y+11, r24	; 0x0b
     c00:	9c 87       	std	Y+12, r25	; 0x0c
     c02:	ad 87       	std	Y+13, r26	; 0x0d
     c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c06:	6b 85       	ldd	r22, Y+11	; 0x0b
     c08:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a ef       	ldi	r20, 0xFA	; 250
     c14:	54 e4       	ldi	r21, 0x44	; 68
     c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8f 83       	std	Y+7, r24	; 0x07
     c20:	98 87       	std	Y+8, r25	; 0x08
     c22:	a9 87       	std	Y+9, r26	; 0x09
     c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	2c f4       	brge	.+10     	; 0xc48 <Receive_Password+0x90>
		__ticks = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <Receive_Password+0x10e>
	else if (__tmp > 65535)
     c48:	6f 81       	ldd	r22, Y+7	; 0x07
     c4a:	78 85       	ldd	r23, Y+8	; 0x08
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5c:	18 16       	cp	r1, r24
     c5e:	4c f5       	brge	.+82     	; 0xcb2 <Receive_Password+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c60:	6b 85       	ldd	r22, Y+11	; 0x0b
     c62:	7c 85       	ldd	r23, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <Receive_Password+0xf0>
     c8a:	88 ec       	ldi	r24, 0xC8	; 200
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <Receive_Password+0xde>
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	69 f7       	brne	.-38     	; 0xc8a <Receive_Password+0xd2>
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <Receive_Password+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <Receive_Password+0x11a>
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
{
	/* wait for ACK from HMI ECU to
	 * start save the password */
	while(UART_recieveByte()!= SAVE);
	uint8 pass,count_pass;
	for(count_pass=5; count_pass>0; count_pass--)
     cda:	8f 85       	ldd	r24, Y+15	; 0x0f
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	8f 87       	std	Y+15, r24	; 0x0f
     ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce2:	88 23       	and	r24, r24
     ce4:	09 f0       	breq	.+2      	; 0xce8 <Receive_Password+0x130>
     ce6:	79 cf       	rjmp	.-270    	; 0xbda <Receive_Password+0x22>
		EEPROM_writeByte((0x0311+count_pass), pass);
		_delay_ms(70);
	}
	/* Send ACK to HMI ECU to let him know that password
	 *saved successful */
	UART_sendByte(END_SAVING);
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
}
     cee:	60 96       	adiw	r28, 0x10	; 16
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <Check_Password>:

/* Function to check the password */
void Check_Password(const Timer_ConfigType * Config_Ptr)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <Check_Password+0x6>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <Check_Password+0x8>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <Check_Password+0xa>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
	/* wait ACK from HMI ECU to
	 * start to check the password */
	while(UART_recieveByte()!= CHECK_PASS);
     d12:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	e1 f7       	brne	.-8      	; 0xd12 <Check_Password+0x12>

	/* Check password if it the same password of the system or not */
	uint8 pass=0,pass_saved=0,error,count_pass;
     d1a:	1b 82       	std	Y+3, r1	; 0x03
     d1c:	1c 82       	std	Y+4, r1	; 0x04
	for(count_pass=5; count_pass>0; count_pass--)
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	1c c0       	rjmp	.+56     	; 0xd5c <Check_Password+0x5c>
	{
		pass = UART_recieveByte();		// Receive password.
     d24:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     d28:	8b 83       	std	Y+3, r24	; 0x03

		EEPROM_readByte((0x0311+count_pass), &pass_saved);
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	8f 5e       	subi	r24, 0xEF	; 239
     d32:	9c 4f       	sbci	r25, 0xFC	; 252
     d34:	9e 01       	movw	r18, r28
     d36:	2c 5f       	subi	r18, 0xFC	; 252
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	b9 01       	movw	r22, r18
     d3c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <EEPROM_readByte>
		if(pass != pass_saved)			// Compare password it with system password.
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 17       	cp	r24, r25
     d46:	21 f0       	breq	.+8      	; 0xd50 <Check_Password+0x50>
		{
			/* Send ACK to HMI ECU that the password wrong */
			UART_sendByte(Error_pass);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <Check_Password+0x56>
		}
		else
		{
			/* Send ACK to HMI ECU that the password correct */
			UART_sendByte(CONTINUE_PASS);
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
	 * start to check the password */
	while(UART_recieveByte()!= CHECK_PASS);

	/* Check password if it the same password of the system or not */
	uint8 pass=0,pass_saved=0,error,count_pass;
	for(count_pass=5; count_pass>0; count_pass--)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	81 50       	subi	r24, 0x01	; 1
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 23       	and	r24, r24
     d60:	09 f7       	brne	.-62     	; 0xd24 <Check_Password+0x24>
			/* Send ACK to HMI ECU that the password correct */
			UART_sendByte(CONTINUE_PASS);
		}
	}
	/* Receive number of wrong attempt from HMI ECU */
	error = UART_recieveByte();
     d62:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     d66:	8a 83       	std	Y+2, r24	; 0x02
	if(error < 3)
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	28 f4       	brcc	.+10     	; 0xd78 <Check_Password+0x78>
	{
		/* Check password again if was the password wrong for less 3 times */
		Check_Password(Config_Ptr);
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	0e 94 80 06 	call	0xd00	; 0xd00 <Check_Password>
     d76:	15 c0       	rjmp	.+42     	; 0xda2 <Check_Password+0xa2>
	}
	else if(error == 3)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 f4       	brne	.+36     	; 0xda2 <Check_Password+0xa2>
	{
		Timer_init(Config_Ptr);
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timer_init>
		g_tick =0;					// Reset TIMER 1.
     d86:	10 92 77 00 	sts	0x0077, r1
     d8a:	10 92 76 00 	sts	0x0076, r1
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <Check_Password+0x94>
		while (g_tick != 60)		// wait 60 seconds.
		{
			/* Activate the buzzer */
			Buzzer_on();
     d90:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
	}
	else if(error == 3)
	{
		Timer_init(Config_Ptr);
		g_tick =0;					// Reset TIMER 1.
		while (g_tick != 60)		// wait 60 seconds.
     d94:	80 91 76 00 	lds	r24, 0x0076
     d98:	90 91 77 00 	lds	r25, 0x0077
     d9c:	8c 33       	cpi	r24, 0x3C	; 60
     d9e:	91 05       	cpc	r25, r1
     da0:	b9 f7       	brne	.-18     	; 0xd90 <Check_Password+0x90>
		{
			/* Activate the buzzer */
			Buzzer_on();
		}
	}
}
     da2:	26 96       	adiw	r28, 0x06	; 6
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <Open_door>:

/* Function to open door */
void Open_door(const Timer_ConfigType * Config_Ptr)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <Open_door+0x6>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9b 83       	std	Y+3, r25	; 0x03
     dc2:	8a 83       	std	Y+2, r24	; 0x02
	/* wait ACK from HMI ECU to
	* start to unlock the door */
	while(UART_recieveByte()!= UNLOCK_DOOR);
     dc4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     dc8:	86 30       	cpi	r24, 0x06	; 6
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <Open_door+0x10>
	uint8 PIR_State = FALSE ;	// Variable to know the state of PIR sensor
     dcc:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize Timer 1 */
	Timer_init(Config_Ptr);
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timer_init>


	/* Turn ON motor clockwise (opening door) */
	DcMotor_Rotate( CW , 100 );
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	64 e6       	ldi	r22, 0x64	; 100
     dda:	0e 94 e7 07 	call	0xfce	; 0xfce <DcMotor_Rotate>
	g_tick =0;					// Reset TIMER 1.
     dde:	10 92 77 00 	sts	0x0077, r1
     de2:	10 92 76 00 	sts	0x0076, r1
	while(g_tick != 15);		// wait 15 seconds.
     de6:	80 91 76 00 	lds	r24, 0x0076
     dea:	90 91 77 00 	lds	r25, 0x0077
     dee:	8f 30       	cpi	r24, 0x0F	; 15
     df0:	91 05       	cpc	r25, r1
     df2:	c9 f7       	brne	.-14     	; 0xde6 <Open_door+0x32>


	/* Turn OFF motor for 3 sec before closing */
	DcMotor_Rotate( STOP , 0 );
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	0e 94 e7 07 	call	0xfce	; 0xfce <DcMotor_Rotate>
	g_tick =0;					// Reset TIMER 1.
     dfc:	10 92 77 00 	sts	0x0077, r1
     e00:	10 92 76 00 	sts	0x0076, r1
	while(g_tick != 3);			// wait 3 seconds.
     e04:	80 91 76 00 	lds	r24, 0x0076
     e08:	90 91 77 00 	lds	r25, 0x0077
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	91 05       	cpc	r25, r1
     e10:	c9 f7       	brne	.-14     	; 0xe04 <Open_door+0x50>


	/* Check PIR sensor*/
	PIR_State = PIR_getState();
     e12:	0e 94 27 0c 	call	0x184e	; 0x184e <PIR_getState>
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <Open_door+0x72>
	while(PIR_State)
	{
		/* Send ACK to HMI ECU that there are
		 * people entering through the door */
		UART_sendByte(PEOPLE_IN);
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		PIR_State = PIR_getState();
     e20:	0e 94 27 0c 	call	0x184e	; 0x184e <PIR_getState>
     e24:	89 83       	std	Y+1, r24	; 0x01
	while(g_tick != 3);			// wait 3 seconds.


	/* Check PIR sensor*/
	PIR_State = PIR_getState();
	while(PIR_State)
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 23       	and	r24, r24
     e2a:	b9 f7       	brne	.-18     	; 0xe1a <Open_door+0x66>
		PIR_State = PIR_getState();
		//UART_sendByte(PEOPLE_IN);
	}
	/* Send ACK to HMI ECU that there aren't
	 * people anymore entering through the door */
	UART_sendByte(PEOPLE_OUT);
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>



	/* Turn ON motor Anti-clockwise (closing door) */
	DcMotor_Rotate( A_CW , 100 );
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	64 e6       	ldi	r22, 0x64	; 100
     e36:	0e 94 e7 07 	call	0xfce	; 0xfce <DcMotor_Rotate>
	g_tick =0;					// Reset TIMER 1.
     e3a:	10 92 77 00 	sts	0x0077, r1
     e3e:	10 92 76 00 	sts	0x0076, r1
	while(g_tick != 15);		// wait 15 seconds.
     e42:	80 91 76 00 	lds	r24, 0x0076
     e46:	90 91 77 00 	lds	r25, 0x0077
     e4a:	8f 30       	cpi	r24, 0x0F	; 15
     e4c:	91 05       	cpc	r25, r1
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <Open_door+0x8e>


	/* Turn OFF motor (door closed) */
	DcMotor_Rotate( STOP , 0 );
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	0e 94 e7 07 	call	0xfce	; 0xfce <DcMotor_Rotate>

}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <Main_menu>:

/* Function main menu */
void Main_menu(const Timer_ConfigType * Config_Ptr)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <Main_menu+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
	/* Call function Check_Password */
	Check_Password(Config_Ptr);
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	0e 94 80 06 	call	0xd00	; 0xd00 <Check_Password>

	if(UART_recieveByte() == 0)
     e7a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     e7e:	88 23       	and	r24, r24
     e80:	61 f4       	brne	.+24     	; 0xe9a <Main_menu+0x36>
	{
		if(UART_recieveByte() == '-')
     e82:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     e86:	8d 32       	cpi	r24, 0x2D	; 45
     e88:	19 f4       	brne	.+6      	; 0xe90 <Main_menu+0x2c>
		{
			/* Call function Check_Password */
			Receive_Password();
     e8a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Password>
     e8e:	07 c0       	rjmp	.+14     	; 0xe9e <Main_menu+0x3a>
		}
		else
		{

			Open_door(Config_Ptr);
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Open_door>
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <Main_menu+0x3a>
		}
	}

	else
	{
		Buzzer_off();
     e9a:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
	}
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <main>:
/*******************************************************************************
 *                     		  Main Program                                     *
 *******************************************************************************/

int main(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	69 97       	sbiw	r28, 0x19	; 25
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	/* Initialize DC-motor driver */
	DcMotor_Init();
     ebc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <DcMotor_Init>

	/* Initialize PIR sensor driver */
	PIR_init();
     ec0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <PIR_init>

	/* Initialize buzzer driver */
	Buzzer_init();
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	/* Initialize UART driver */
	UART_ConfigType UART_Config={BIT_8 , DISABLE , BIT_1 , RATE_9600_bps};
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	99 8b       	std	Y+17, r25	; 0x11
     ece:	88 8b       	std	Y+16, r24	; 0x10
     ed0:	e0 e7       	ldi	r30, 0x70	; 112
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	fb 8b       	std	Y+19, r31	; 0x13
     ed6:	ea 8b       	std	Y+18, r30	; 0x12
     ed8:	f5 e0       	ldi	r31, 0x05	; 5
     eda:	fc 8b       	std	Y+20, r31	; 0x14
     edc:	ea 89       	ldd	r30, Y+18	; 0x12
     ede:	fb 89       	ldd	r31, Y+19	; 0x13
     ee0:	00 80       	ld	r0, Z
     ee2:	8a 89       	ldd	r24, Y+18	; 0x12
     ee4:	9b 89       	ldd	r25, Y+19	; 0x13
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	9b 8b       	std	Y+19, r25	; 0x13
     eea:	8a 8b       	std	Y+18, r24	; 0x12
     eec:	e8 89       	ldd	r30, Y+16	; 0x10
     eee:	f9 89       	ldd	r31, Y+17	; 0x11
     ef0:	00 82       	st	Z, r0
     ef2:	88 89       	ldd	r24, Y+16	; 0x10
     ef4:	99 89       	ldd	r25, Y+17	; 0x11
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	99 8b       	std	Y+17, r25	; 0x11
     efa:	88 8b       	std	Y+16, r24	; 0x10
     efc:	9c 89       	ldd	r25, Y+20	; 0x14
     efe:	91 50       	subi	r25, 0x01	; 1
     f00:	9c 8b       	std	Y+20, r25	; 0x14
     f02:	ec 89       	ldd	r30, Y+20	; 0x14
     f04:	ee 23       	and	r30, r30
     f06:	51 f7       	brne	.-44     	; 0xedc <main+0x34>
	UART_init(&UART_Config);
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_init>

	/* Initialize TWI (I2C) driver */
	TWI_ConfigType TWI_Config = {ADDRESS_1 , RATE_400_Kbps};
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	8e 83       	std	Y+6, r24	; 0x06
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	8f 83       	std	Y+7, r24	; 0x07
	EEPROM_init(& TWI_Config);
     f18:	ce 01       	movw	r24, r28
     f1a:	06 96       	adiw	r24, 0x06	; 6
     f1c:	0e 94 2c 08 	call	0x1058	; 0x1058 <EEPROM_init>

	/* Initialize TIMER 1 driver */
	SREG |= (1<<7);						// Enable global interrupt.
     f20:	af e5       	ldi	r26, 0x5F	; 95
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ef e5       	ldi	r30, 0x5F	; 95
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 68       	ori	r24, 0x80	; 128
     f2c:	8c 93       	st	X, r24
	Timer_ConfigType Timer_Config = {0, 3500, TIMER_1, F_CPU_1024, COMPARE, DISCONNECTED };
     f2e:	ce 01       	movw	r24, r28
     f30:	08 96       	adiw	r24, 0x08	; 8
     f32:	9e 8b       	std	Y+22, r25	; 0x16
     f34:	8d 8b       	std	Y+21, r24	; 0x15
     f36:	e8 e6       	ldi	r30, 0x68	; 104
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	f8 8f       	std	Y+24, r31	; 0x18
     f3c:	ef 8b       	std	Y+23, r30	; 0x17
     f3e:	f8 e0       	ldi	r31, 0x08	; 8
     f40:	f9 8f       	std	Y+25, r31	; 0x19
     f42:	ef 89       	ldd	r30, Y+23	; 0x17
     f44:	f8 8d       	ldd	r31, Y+24	; 0x18
     f46:	00 80       	ld	r0, Z
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	98 8d       	ldd	r25, Y+24	; 0x18
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	98 8f       	std	Y+24, r25	; 0x18
     f50:	8f 8b       	std	Y+23, r24	; 0x17
     f52:	ed 89       	ldd	r30, Y+21	; 0x15
     f54:	fe 89       	ldd	r31, Y+22	; 0x16
     f56:	00 82       	st	Z, r0
     f58:	8d 89       	ldd	r24, Y+21	; 0x15
     f5a:	9e 89       	ldd	r25, Y+22	; 0x16
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	9e 8b       	std	Y+22, r25	; 0x16
     f60:	8d 8b       	std	Y+21, r24	; 0x15
     f62:	99 8d       	ldd	r25, Y+25	; 0x19
     f64:	91 50       	subi	r25, 0x01	; 1
     f66:	99 8f       	std	Y+25, r25	; 0x19
     f68:	e9 8d       	ldd	r30, Y+25	; 0x19
     f6a:	ee 23       	and	r30, r30
     f6c:	51 f7       	brne	.-44     	; 0xf42 <main+0x9a>
	Timer_setCallBack(Calculate_time, TIMER_1);
     f6e:	8c ec       	ldi	r24, 0xCC	; 204
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Timer_setCallBack>

	/* wait ACK from HMI ECU that tell he is ready after
	 * finish all Initialization for drivers */
	while(UART_recieveByte()!= M1_HMI_READY);
     f78:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
     f7c:	80 31       	cpi	r24, 0x10	; 16
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <main+0xd0>

	/* Receive first password for the system */
	Receive_Password();
     f80:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Receive_Password>


	while(1)
	{

		Main_menu(& Timer_Config);
     f84:	ce 01       	movw	r24, r28
     f86:	08 96       	adiw	r24, 0x08	; 8
     f88:	0e 94 32 07 	call	0xe64	; 0xe64 <Main_menu>
     f8c:	fb cf       	rjmp	.-10     	; 0xf84 <main+0xdc>

00000f8e <DcMotor_Init>:
 * Description :
 * Function initializes the DC motor by setting the direction for the motor pins and stopping the
 * motor at the beginning.
 */
void DcMotor_Init(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	/* Configure pins of DC motor as OUTPUT */
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID , DC_MOTOR_ENABLE_PIN_ID , PIN_OUTPUT);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID , DC_MOTOR_IN1_PIN_ID , PIN_OUTPUT);
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	66 e0       	ldi	r22, 0x06	; 6
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID , DC_MOTOR_IN2_PIN_ID , PIN_OUTPUT);
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	67 e0       	ldi	r22, 0x07	; 7
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>

	/* Stop the DC motor */
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID , DC_MOTOR_IN1_PIN_ID , LOGIC_LOW);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	66 e0       	ldi	r22, 0x06	; 6
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID , DC_MOTOR_IN2_PIN_ID , LOGIC_LOW);
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	67 e0       	ldi	r22, 0x07	; 7
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>

	//PWM_TIMER0_Initial(0);
}
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DcMotor_Rotate>:
 * Description :
 * Function controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based
 * on the input duty cycle.
 */
void DcMotor_Rotate(DcMotor_State state , uint8 speed)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DcMotor_Rotate+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DcMotor_Rotate+0x8>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02
	PWM_TIMER0_Initial(speed);
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <PWM_TIMER0_Initial>
	switch(state)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3c 83       	std	Y+4, r19	; 0x04
     fec:	2b 83       	std	Y+3, r18	; 0x03
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	91 05       	cpc	r25, r1
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <DcMotor_Rotate+0x52>
     ff8:	2b 81       	ldd	r18, Y+3	; 0x03
     ffa:	3c 81       	ldd	r19, Y+4	; 0x04
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	d1 f0       	breq	.+52     	; 0x1036 <DcMotor_Rotate+0x68>
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	01 f5       	brne	.+64     	; 0x104a <DcMotor_Rotate+0x7c>
	{
	case STOP:
		/* Stop the DC motor */
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID , DC_MOTOR_IN1_PIN_ID , LOGIC_LOW);
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	66 e0       	ldi	r22, 0x06	; 6
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID , DC_MOTOR_IN2_PIN_ID , LOGIC_LOW);
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	67 e0       	ldi	r22, 0x07	; 7
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
    101e:	15 c0       	rjmp	.+42     	; 0x104a <DcMotor_Rotate+0x7c>
		break;
	case CW:
		/* DC motor rotate Clock wise */
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID , DC_MOTOR_IN1_PIN_ID , LOGIC_LOW);
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	66 e0       	ldi	r22, 0x06	; 6
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID , DC_MOTOR_IN2_PIN_ID , LOGIC_HIGH);
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	67 e0       	ldi	r22, 0x07	; 7
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
    1034:	0a c0       	rjmp	.+20     	; 0x104a <DcMotor_Rotate+0x7c>
		break;
	case A_CW:
		/* DC motor rotate anti-clock wise */
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID , DC_MOTOR_IN1_PIN_ID , LOGIC_HIGH);
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	66 e0       	ldi	r22, 0x06	; 6
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID , DC_MOTOR_IN2_PIN_ID , LOGIC_LOW);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	67 e0       	ldi	r22, 0x07	; 7
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 c8 09 	call	0x1390	; 0x1390 <GPIO_writePin>
		break;
	}
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <EEPROM_init>:
 *
 *******************************************************************************/
#include "external_eeprom.h"

void EEPROM_init(const TWI_ConfigType * Config_Ptr)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <EEPROM_init+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01

	TWI_init(Config_Ptr); /*Initialize I2C*/
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <TWI_init>
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <EEPROM_writeByte+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <EEPROM_writeByte+0x8>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    108a:	0e 94 0c 10 	call	0x2018	; 0x2018 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    108e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	11 f0       	breq	.+4      	; 0x109a <EEPROM_writeByte+0x22>
        return ERROR;
    1096:	1c 82       	std	Y+4, r1	; 0x04
    1098:	28 c0       	rjmp	.+80     	; 0x10ea <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	80 70       	andi	r24, 0x00	; 0
    10a0:	97 70       	andi	r25, 0x07	; 7
    10a2:	88 0f       	add	r24, r24
    10a4:	89 2f       	mov	r24, r25
    10a6:	88 1f       	adc	r24, r24
    10a8:	99 0b       	sbc	r25, r25
    10aa:	91 95       	neg	r25
    10ac:	80 6a       	ori	r24, 0xA0	; 160
    10ae:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10b2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    10b6:	88 31       	cpi	r24, 0x18	; 24
    10b8:	11 f0       	breq	.+4      	; 0x10be <EEPROM_writeByte+0x46>
        return ERROR;
    10ba:	1c 82       	std	Y+4, r1	; 0x04
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10c4:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    10c8:	88 32       	cpi	r24, 0x28	; 40
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <EEPROM_writeByte+0x58>
        return ERROR;
    10cc:	1c 82       	std	Y+4, r1	; 0x04
    10ce:	0d c0       	rjmp	.+26     	; 0x10ea <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10d6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    10da:	88 32       	cpi	r24, 0x28	; 40
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <EEPROM_writeByte+0x6a>
        return ERROR;
    10de:	1c 82       	std	Y+4, r1	; 0x04
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    10e2:	0e 94 1c 10 	call	0x2038	; 0x2038 <TWI_stop>

    return SUCCESS;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8c 83       	std	Y+4, r24	; 0x04
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <EEPROM_readByte+0x6>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <EEPROM_readByte+0x8>
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	7c 83       	std	Y+4, r23	; 0x04
    110e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1110:	0e 94 0c 10 	call	0x2018	; 0x2018 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1114:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	11 f0       	breq	.+4      	; 0x1120 <EEPROM_readByte+0x26>
        return ERROR;
    111c:	1d 82       	std	Y+5, r1	; 0x05
    111e:	44 c0       	rjmp	.+136    	; 0x11a8 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	80 70       	andi	r24, 0x00	; 0
    1126:	97 70       	andi	r25, 0x07	; 7
    1128:	88 0f       	add	r24, r24
    112a:	89 2f       	mov	r24, r25
    112c:	88 1f       	adc	r24, r24
    112e:	99 0b       	sbc	r25, r25
    1130:	91 95       	neg	r25
    1132:	80 6a       	ori	r24, 0xA0	; 160
    1134:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1138:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    113c:	88 31       	cpi	r24, 0x18	; 24
    113e:	11 f0       	breq	.+4      	; 0x1144 <EEPROM_readByte+0x4a>
        return ERROR;
    1140:	1d 82       	std	Y+5, r1	; 0x05
    1142:	32 c0       	rjmp	.+100    	; 0x11a8 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    114a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    114e:	88 32       	cpi	r24, 0x28	; 40
    1150:	11 f0       	breq	.+4      	; 0x1156 <EEPROM_readByte+0x5c>
        return ERROR;
    1152:	1d 82       	std	Y+5, r1	; 0x05
    1154:	29 c0       	rjmp	.+82     	; 0x11a8 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1156:	0e 94 0c 10 	call	0x2018	; 0x2018 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    115a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    115e:	80 31       	cpi	r24, 0x10	; 16
    1160:	11 f0       	breq	.+4      	; 0x1166 <EEPROM_readByte+0x6c>
        return ERROR;
    1162:	1d 82       	std	Y+5, r1	; 0x05
    1164:	21 c0       	rjmp	.+66     	; 0x11a8 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	80 70       	andi	r24, 0x00	; 0
    116c:	97 70       	andi	r25, 0x07	; 7
    116e:	88 0f       	add	r24, r24
    1170:	89 2f       	mov	r24, r25
    1172:	88 1f       	adc	r24, r24
    1174:	99 0b       	sbc	r25, r25
    1176:	91 95       	neg	r25
    1178:	81 6a       	ori	r24, 0xA1	; 161
    117a:	0e 94 27 10 	call	0x204e	; 0x204e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    117e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    1182:	80 34       	cpi	r24, 0x40	; 64
    1184:	11 f0       	breq	.+4      	; 0x118a <EEPROM_readByte+0x90>
        return ERROR;
    1186:	1d 82       	std	Y+5, r1	; 0x05
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    118a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_readByteWithNACK>
    118e:	eb 81       	ldd	r30, Y+3	; 0x03
    1190:	fc 81       	ldd	r31, Y+4	; 0x04
    1192:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1194:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TWI_getStatus>
    1198:	88 35       	cpi	r24, 0x58	; 88
    119a:	11 f0       	breq	.+4      	; 0x11a0 <EEPROM_readByte+0xa6>
        return ERROR;
    119c:	1d 82       	std	Y+5, r1	; 0x05
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    11a0:	0e 94 1c 10 	call	0x2038	; 0x2038 <TWI_stop>

    return SUCCESS;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <GPIO_setupPinDirection+0x6>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <GPIO_setupPinDirection+0x8>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	6a 83       	std	Y+2, r22	; 0x02
    11cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 30       	cpi	r24, 0x08	; 8
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <GPIO_setupPinDirection+0x1c>
    11d4:	d5 c0       	rjmp	.+426    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <GPIO_setupPinDirection+0x24>
    11dc:	d1 c0       	rjmp	.+418    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3d 83       	std	Y+5, r19	; 0x05
    11e6:	2c 83       	std	Y+4, r18	; 0x04
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <GPIO_setupPinDirection+0x3a>
    11f2:	43 c0       	rjmp	.+134    	; 0x127a <GPIO_setupPinDirection+0xc0>
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <GPIO_setupPinDirection+0x4e>
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	71 f0       	breq	.+28     	; 0x1222 <GPIO_setupPinDirection+0x68>
    1206:	bc c0       	rjmp	.+376    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <GPIO_setupPinDirection+0x5a>
    1212:	5f c0       	rjmp	.+190    	; 0x12d2 <GPIO_setupPinDirection+0x118>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <GPIO_setupPinDirection+0x66>
    121e:	85 c0       	rjmp	.+266    	; 0x132a <GPIO_setupPinDirection+0x170>
    1220:	af c0       	rjmp	.+350    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	a1 f4       	brne	.+40     	; 0x1250 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <GPIO_setupPinDirection+0x8c>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <GPIO_setupPinDirection+0x88>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	98 c0       	rjmp	.+304    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1250:	aa e3       	ldi	r26, 0x3A	; 58
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ea e3       	ldi	r30, 0x3A	; 58
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_setupPinDirection+0xb4>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_setupPinDirection+0xb0>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	83 c0       	rjmp	.+262    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1280:	a7 e3       	ldi	r26, 0x37	; 55
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e7 e3       	ldi	r30, 0x37	; 55
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_setupPinDirection+0xe4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_setupPinDirection+0xe0>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	6c c0       	rjmp	.+216    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12a8:	a7 e3       	ldi	r26, 0x37	; 55
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e7 e3       	ldi	r30, 0x37	; 55
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_setupPinDirection+0x10c>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_setupPinDirection+0x108>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	57 c0       	rjmp	.+174    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	a1 f4       	brne	.+40     	; 0x1300 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12d8:	a4 e3       	ldi	r26, 0x34	; 52
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_setupPinDirection+0x13c>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_setupPinDirection+0x138>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	40 c0       	rjmp	.+128    	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1300:	a4 e3       	ldi	r26, 0x34	; 52
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e4 e3       	ldi	r30, 0x34	; 52
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_setupPinDirection+0x164>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_setupPinDirection+0x160>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	2b c0       	rjmp	.+86     	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	a1 f4       	brne	.+40     	; 0x1358 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1330:	a1 e3       	ldi	r26, 0x31	; 49
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e1 e3       	ldi	r30, 0x31	; 49
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_setupPinDirection+0x194>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_setupPinDirection+0x190>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1358:	a1 e3       	ldi	r26, 0x31	; 49
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_setupPinDirection+0x1bc>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_setupPinDirection+0x1b8>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <GPIO_writePin+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_writePin+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	6a 83       	std	Y+2, r22	; 0x02
    13a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <GPIO_writePin+0x1c>
    13aa:	d5 c0       	rjmp	.+426    	; 0x1556 <GPIO_writePin+0x1c6>
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <GPIO_writePin+0x24>
    13b2:	d1 c0       	rjmp	.+418    	; 0x1556 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <GPIO_writePin+0x3a>
    13c8:	43 c0       	rjmp	.+134    	; 0x1450 <GPIO_writePin+0xc0>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	2c f4       	brge	.+10     	; 0x13de <GPIO_writePin+0x4e>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	71 f0       	breq	.+28     	; 0x13f8 <GPIO_writePin+0x68>
    13dc:	bc c0       	rjmp	.+376    	; 0x1556 <GPIO_writePin+0x1c6>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <GPIO_writePin+0x5a>
    13e8:	5f c0       	rjmp	.+190    	; 0x14a8 <GPIO_writePin+0x118>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <GPIO_writePin+0x66>
    13f4:	85 c0       	rjmp	.+266    	; 0x1500 <GPIO_writePin+0x170>
    13f6:	af c0       	rjmp	.+350    	; 0x1556 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	a1 f4       	brne	.+40     	; 0x1426 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_writePin+0x8c>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_writePin+0x88>
    1420:	84 2b       	or	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	98 c0       	rjmp	.+304    	; 0x1556 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1426:	ab e3       	ldi	r26, 0x3B	; 59
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_writePin+0xb4>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_writePin+0xb0>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	83 c0       	rjmp	.+262    	; 0x1556 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	a1 f4       	brne	.+40     	; 0x147e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1456:	a8 e3       	ldi	r26, 0x38	; 56
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_writePin+0xe4>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_writePin+0xe0>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	6c c0       	rjmp	.+216    	; 0x1556 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    147e:	a8 e3       	ldi	r26, 0x38	; 56
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e8 e3       	ldi	r30, 0x38	; 56
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_writePin+0x10c>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_writePin+0x108>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	57 c0       	rjmp	.+174    	; 0x1556 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14ae:	a5 e3       	ldi	r26, 0x35	; 53
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_writePin+0x13c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_writePin+0x138>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	40 c0       	rjmp	.+128    	; 0x1556 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14d6:	a5 e3       	ldi	r26, 0x35	; 53
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e3       	ldi	r30, 0x35	; 53
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_writePin+0x164>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_writePin+0x160>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	2b c0       	rjmp	.+86     	; 0x1556 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	a1 f4       	brne	.+40     	; 0x152e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1506:	a2 e3       	ldi	r26, 0x32	; 50
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_writePin+0x194>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_writePin+0x190>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    152e:	a2 e3       	ldi	r26, 0x32	; 50
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_writePin+0x1bc>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_writePin+0x1b8>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <GPIO_readPin+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <GPIO_readPin+0x8>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1578:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 30       	cpi	r24, 0x08	; 8
    157e:	08 f0       	brcs	.+2      	; 0x1582 <GPIO_readPin+0x1c>
    1580:	84 c0       	rjmp	.+264    	; 0x168a <GPIO_readPin+0x124>
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	08 f0       	brcs	.+2      	; 0x158a <GPIO_readPin+0x24>
    1588:	80 c0       	rjmp	.+256    	; 0x168a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3d 83       	std	Y+5, r19	; 0x05
    1592:	2c 83       	std	Y+4, r18	; 0x04
    1594:	4c 81       	ldd	r20, Y+4	; 0x04
    1596:	5d 81       	ldd	r21, Y+5	; 0x05
    1598:	41 30       	cpi	r20, 0x01	; 1
    159a:	51 05       	cpc	r21, r1
    159c:	79 f1       	breq	.+94     	; 0x15fc <GPIO_readPin+0x96>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <GPIO_readPin+0x4e>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	69 f0       	breq	.+26     	; 0x15cc <GPIO_readPin+0x66>
    15b2:	6b c0       	rjmp	.+214    	; 0x168a <GPIO_readPin+0x124>
    15b4:	4c 81       	ldd	r20, Y+4	; 0x04
    15b6:	5d 81       	ldd	r21, Y+5	; 0x05
    15b8:	42 30       	cpi	r20, 0x02	; 2
    15ba:	51 05       	cpc	r21, r1
    15bc:	b9 f1       	breq	.+110    	; 0x162c <GPIO_readPin+0xc6>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <GPIO_readPin+0x64>
    15c8:	49 c0       	rjmp	.+146    	; 0x165c <GPIO_readPin+0xf6>
    15ca:	5f c0       	rjmp	.+190    	; 0x168a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15cc:	e9 e3       	ldi	r30, 0x39	; 57
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_readPin+0x7e>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_readPin+0x7a>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	49 c0       	rjmp	.+146    	; 0x168a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f8:	19 82       	std	Y+1, r1	; 0x01
    15fa:	47 c0       	rjmp	.+142    	; 0x168a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15fc:	e6 e3       	ldi	r30, 0x36	; 54
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_readPin+0xae>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_readPin+0xaa>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	90 70       	andi	r25, 0x00	; 0
    161e:	88 23       	and	r24, r24
    1620:	19 f0       	breq	.+6      	; 0x1628 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	31 c0       	rjmp	.+98     	; 0x168a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	2f c0       	rjmp	.+94     	; 0x168a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    162c:	e3 e3       	ldi	r30, 0x33	; 51
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_readPin+0xde>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_readPin+0xda>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	90 70       	andi	r25, 0x00	; 0
    164e:	88 23       	and	r24, r24
    1650:	19 f0       	breq	.+6      	; 0x1658 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	19 c0       	rjmp	.+50     	; 0x168a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1658:	19 82       	std	Y+1, r1	; 0x01
    165a:	17 c0       	rjmp	.+46     	; 0x168a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    165c:	e0 e3       	ldi	r30, 0x30	; 48
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_readPin+0x10e>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_readPin+0x10a>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	90 70       	andi	r25, 0x00	; 0
    167e:	88 23       	and	r24, r24
    1680:	19 f0       	breq	.+6      	; 0x1688 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	01 c0       	rjmp	.+2      	; 0x168a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1688:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_setupPortDirection+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <GPIO_setupPortDirection+0x8>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	90 f5       	brcc	.+100    	; 0x1716 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3c 83       	std	Y+4, r19	; 0x04
    16ba:	2b 83       	std	Y+3, r18	; 0x03
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	d1 f0       	breq	.+52     	; 0x16fa <GPIO_setupPortDirection+0x5e>
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	2c f4       	brge	.+10     	; 0x16da <GPIO_setupPortDirection+0x3e>
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	61 f0       	breq	.+24     	; 0x16f0 <GPIO_setupPortDirection+0x54>
    16d8:	1e c0       	rjmp	.+60     	; 0x1716 <GPIO_setupPortDirection+0x7a>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	81 f0       	breq	.+32     	; 0x1704 <GPIO_setupPortDirection+0x68>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	83 30       	cpi	r24, 0x03	; 3
    16ea:	91 05       	cpc	r25, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <GPIO_setupPortDirection+0x72>
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16f0:	ea e3       	ldi	r30, 0x3A	; 58
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 83       	st	Z, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16fa:	e7 e3       	ldi	r30, 0x37	; 55
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	80 83       	st	Z, r24
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1704:	e4 e3       	ldi	r30, 0x34	; 52
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	80 83       	st	Z, r24
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    170e:	e1 e3       	ldi	r30, 0x31	; 49
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	80 83       	st	Z, r24
			break;
		}
	}
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <GPIO_writePort+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <GPIO_writePort+0x8>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	90 f5       	brcc	.+100    	; 0x179e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	d1 f0       	breq	.+52     	; 0x1782 <GPIO_writePort+0x5e>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <GPIO_writePort+0x3e>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 f0       	breq	.+24     	; 0x1778 <GPIO_writePort+0x54>
    1760:	1e c0       	rjmp	.+60     	; 0x179e <GPIO_writePort+0x7a>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <GPIO_writePort+0x68>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	81 f0       	breq	.+32     	; 0x1796 <GPIO_writePort+0x72>
    1776:	13 c0       	rjmp	.+38     	; 0x179e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1778:	eb e3       	ldi	r30, 0x3B	; 59
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	0e c0       	rjmp	.+28     	; 0x179e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	09 c0       	rjmp	.+18     	; 0x179e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    178c:	e5 e3       	ldi	r30, 0x35	; 53
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
    1794:	04 c0       	rjmp	.+8      	; 0x179e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1796:	e2 e3       	ldi	r30, 0x32	; 50
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 83       	st	Z, r24
			break;
		}
	}
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_readPort+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <GPIO_readPort+0x8>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17ba:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	90 f5       	brcc	.+100    	; 0x1826 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 83       	std	Y+4, r19	; 0x04
    17ca:	2b 83       	std	Y+3, r18	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	d1 f0       	breq	.+52     	; 0x180a <GPIO_readPort+0x5e>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	2c f4       	brge	.+10     	; 0x17ea <GPIO_readPort+0x3e>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <GPIO_readPort+0x54>
    17e8:	1e c0       	rjmp	.+60     	; 0x1826 <GPIO_readPort+0x7a>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	81 f0       	breq	.+32     	; 0x1814 <GPIO_readPort+0x68>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	81 f0       	breq	.+32     	; 0x181e <GPIO_readPort+0x72>
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1800:	e9 e3       	ldi	r30, 0x39	; 57
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    181e:	e0 e3       	ldi	r30, 0x30	; 48
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <PIR_init>:
/*
 * Description :
 * Function initializes the PIR pin direction and turn off the PIR.
 */
void PIR_init(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	/* Configure PIR pin as INPUT pin */
	GPIO_setupPinDirection(PIR_PORT_ID , PIR_PIN_ID , PIN_INPUT);
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>

	/* Turn OFF PIR */
	//GPIO_writePin(PIR_PORT_ID , PIR_PIN_ID , LOGIC_LOW);
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <PIR_getState>:
/*
 * Description :
 * Function return PIR State.
 */
uint8 PIR_getState(void)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	//uint8 pir_State = LOGIC_LOW;

	/* If PIR sensor detect the motion then pir_State will be LOGIC_HIGH */
	//pir_State = GPIO_readPin(PIR_PORT_ID , PIR_PIN_ID);

	return GPIO_readPin(PIR_PORT_ID , PIR_PIN_ID);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	62 e0       	ldi	r22, 0x02	; 2
    185a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <GPIO_readPin>
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <PWM_Timer0_Init>:
/*
 * Description :
 * Function responsible for initialize the PWM driver.
 */
void PWM_Timer0_Init(uint8 duty_cycle)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure PWM
	 * Set WGM00 & WGM01 by '1' to select fast PWM mode
	 * Set COM01 by '1' to make OC0 non-inverting
	 * Set CS00 & CS01 by '1' to select N(Prescaler)=64 */
	TCCR0 = (1<< WGM00) | (1<< WGM01) | (1<< COM01) | (1<< CS01) | (1<< CS00);
    1870:	e3 e5       	ldi	r30, 0x53	; 83
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8b e6       	ldi	r24, 0x6B	; 107
    1876:	80 83       	st	Z, r24

	/* Configure PB3/OC0 Pin as OUTPUT pin */
	GPIO_setupPinDirection(PORTB , PINB3 , PIN_OUTPUT);
    1878:	e8 e3       	ldi	r30, 0x38	; 56
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>

	/* Set initial value for Timer0 & Compare value */
	TCNT0 = 0;
    1886:	e2 e5       	ldi	r30, 0x52	; 82
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	10 82       	st	Z, r1
	OCR0 = duty_cycle * (TIMER0_MAX_STEPS/100);		// To calculate PWM in percentage.
    188c:	ec e5       	ldi	r30, 0x5C	; 92
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	80 83       	st	Z, r24
}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <PWM_TIMER0_Initial>:

void PWM_TIMER0_Initial(uint8 duty_cycle)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	29 97       	sbiw	r28, 0x09	; 9
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	89 87       	std	Y+9, r24	; 0x09
	GPIO_setupPinDirection(PORTB , PINB3 , PIN_OUTPUT);
    18ba:	e8 e3       	ldi	r30, 0x38	; 56
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	63 e0       	ldi	r22, 0x03	; 3
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_setupPinDirection>
	Timer_ConfigType Timer_Configration = {0, ( duty_cycle * (TIMER0_MAX_STEPS/100) ), TIMER_0, F_CPU_64, FAST_PWM, NON_INVETING_MODE };
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	1a 82       	std	Y+2, r1	; 0x02
    18d4:	19 82       	std	Y+1, r1	; 0x01
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    18da:	1d 82       	std	Y+5, r1	; 0x05
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	8e 83       	std	Y+6, r24	; 0x06
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	8f 83       	std	Y+7, r24	; 0x07
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	88 87       	std	Y+8, r24	; 0x08
	Timer_init(&Timer_Configration);
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timer_init>
}
    18f0:	29 96       	adiw	r28, 0x09	; 9
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <__vector_11>:
 *                        Functions Definitions                                *
 *******************************************************************************/

/* TIMER 0 normal mode ISR */
ISR(TIMER0_OVF_vect)
{
    1902:	1f 92       	push	r1
    1904:	0f 92       	push	r0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	0f 92       	push	r0
    190a:	11 24       	eor	r1, r1
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	4f 93       	push	r20
    1912:	5f 93       	push	r21
    1914:	6f 93       	push	r22
    1916:	7f 93       	push	r23
    1918:	8f 93       	push	r24
    191a:	9f 93       	push	r25
    191c:	af 93       	push	r26
    191e:	bf 93       	push	r27
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    192c:	80 91 78 00 	lds	r24, 0x0078
    1930:	90 91 79 00 	lds	r25, 0x0079
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	29 f0       	breq	.+10     	; 0x1942 <__vector_11+0x40>
	{
		(*g_callBackPtr)();
    1938:	e0 91 78 00 	lds	r30, 0x0078
    193c:	f0 91 79 00 	lds	r31, 0x0079
    1940:	09 95       	icall
	}
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	ff 91       	pop	r31
    1948:	ef 91       	pop	r30
    194a:	bf 91       	pop	r27
    194c:	af 91       	pop	r26
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	7f 91       	pop	r23
    1954:	6f 91       	pop	r22
    1956:	5f 91       	pop	r21
    1958:	4f 91       	pop	r20
    195a:	3f 91       	pop	r19
    195c:	2f 91       	pop	r18
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_10>:

/* TIMER 0 compare mode ISR */
ISR(TIMER0_COMP_vect)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1992:	80 91 78 00 	lds	r24, 0x0078
    1996:	90 91 79 00 	lds	r25, 0x0079
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	29 f0       	breq	.+10     	; 0x19a8 <__vector_10+0x40>
	{
		(*g_callBackPtr)();
    199e:	e0 91 78 00 	lds	r30, 0x0078
    19a2:	f0 91 79 00 	lds	r31, 0x0079
    19a6:	09 95       	icall
	}
}
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <__vector_9>:

/* TIMER 1 normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19f8:	80 91 78 00 	lds	r24, 0x0078
    19fc:	90 91 79 00 	lds	r25, 0x0079
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1a04:	e0 91 78 00 	lds	r30, 0x0078
    1a08:	f0 91 79 00 	lds	r31, 0x0079
    1a0c:	09 95       	icall
	}
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	ff 91       	pop	r31
    1a14:	ef 91       	pop	r30
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_7>:

/* TIMER 1 compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a5e:	80 91 78 00 	lds	r24, 0x0078
    1a62:	90 91 79 00 	lds	r25, 0x0079
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	29 f0       	breq	.+10     	; 0x1a74 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1a6a:	e0 91 78 00 	lds	r30, 0x0078
    1a6e:	f0 91 79 00 	lds	r31, 0x0079
    1a72:	09 95       	icall
	}
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_5>:

/* TIMER 2 normal mode ISR */
ISR(TIMER2_OVF_vect)
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	2f 93       	push	r18
    1aa6:	3f 93       	push	r19
    1aa8:	4f 93       	push	r20
    1aaa:	5f 93       	push	r21
    1aac:	6f 93       	push	r22
    1aae:	7f 93       	push	r23
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	af 93       	push	r26
    1ab6:	bf 93       	push	r27
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ac4:	80 91 78 00 	lds	r24, 0x0078
    1ac8:	90 91 79 00 	lds	r25, 0x0079
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	29 f0       	breq	.+10     	; 0x1ada <__vector_5+0x40>
	{
		(*g_callBackPtr)();
    1ad0:	e0 91 78 00 	lds	r30, 0x0078
    1ad4:	f0 91 79 00 	lds	r31, 0x0079
    1ad8:	09 95       	icall
	}
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	bf 91       	pop	r27
    1ae4:	af 91       	pop	r26
    1ae6:	9f 91       	pop	r25
    1ae8:	8f 91       	pop	r24
    1aea:	7f 91       	pop	r23
    1aec:	6f 91       	pop	r22
    1aee:	5f 91       	pop	r21
    1af0:	4f 91       	pop	r20
    1af2:	3f 91       	pop	r19
    1af4:	2f 91       	pop	r18
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	0f 90       	pop	r0
    1afc:	1f 90       	pop	r1
    1afe:	18 95       	reti

00001b00 <__vector_4>:

/* TIMER 2 compare mode ISR */
ISR(TIMER2_COMP_vect)
{
    1b00:	1f 92       	push	r1
    1b02:	0f 92       	push	r0
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	0f 92       	push	r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b2a:	80 91 78 00 	lds	r24, 0x0078
    1b2e:	90 91 79 00 	lds	r25, 0x0079
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <__vector_4+0x40>
	{
		(*g_callBackPtr)();
    1b36:	e0 91 78 00 	lds	r30, 0x0078
    1b3a:	f0 91 79 00 	lds	r31, 0x0079
    1b3e:	09 95       	icall
	}
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	bf 91       	pop	r27
    1b4a:	af 91       	pop	r26
    1b4c:	9f 91       	pop	r25
    1b4e:	8f 91       	pop	r24
    1b50:	7f 91       	pop	r23
    1b52:	6f 91       	pop	r22
    1b54:	5f 91       	pop	r21
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0
    1b62:	1f 90       	pop	r1
    1b64:	18 95       	reti

00001b66 <Timer_init>:
 * Description :
 *  Function to initialize the Timer driver.
 *  Setup timer ID,clock type and timer mode.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <Timer_init+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <Timer_init+0x8>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
	switch( Config_Ptr -> timer_ID )
    1b76:	e9 81       	ldd	r30, Y+1	; 0x01
    1b78:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7a:	84 81       	ldd	r24, Z+4	; 0x04
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3c 83       	std	Y+4, r19	; 0x04
    1b82:	2b 83       	std	Y+3, r18	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <Timer_init+0x2a>
    1b8e:	84 c0       	rjmp	.+264    	; 0x1c98 <Timer_init+0x132>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <Timer_init+0x36>
    1b9a:	02 c1       	rjmp	.+516    	; 0x1da0 <Timer_init+0x23a>
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <Timer_init+0x40>
    1ba4:	74 c1       	rjmp	.+744    	; 0x1e8e <Timer_init+0x328>
	 *******************************************************************************/

	case TIMER_0 :

		/* Non-PWM mode FOC0 = 1 */
		TCCR0 |= ( 1 << FOC0 );
    1ba6:	a3 e5       	ldi	r26, 0x53	; 83
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e3 e5       	ldi	r30, 0x53	; 83
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	8c 93       	st	X, r24

		/* Prescaler of F_CPU */
		TCCR0 = ( TCCR0 & 0xF8 ) | ( Config_Ptr -> timer_clock );	// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	98 7f       	andi	r25, 0xF8	; 248
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	85 81       	ldd	r24, Z+5	; 0x05
    1bc8:	89 2b       	or	r24, r25
    1bca:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    1bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bce:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd0:	86 81       	ldd	r24, Z+6	; 0x06
    1bd2:	88 23       	and	r24, r24
    1bd4:	79 f4       	brne	.+30     	; 0x1bf4 <Timer_init+0x8e>
		{
			/* To use normal mode (OVF) set these bits WGM01 and WGM00 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 0 */
			TCNT0 = Config_Ptr -> timer_InitialValue;
    1bd6:	a2 e5       	ldi	r26, 0x52	; 82
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8c 93       	st	X, r24

			/* Enable TIMER0 Overflow Interrupt */
			TIMSK |= ( 1 << TOIE0 );
    1be4:	a9 e5       	ldi	r26, 0x59	; 89
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e9 e5       	ldi	r30, 0x59	; 89
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	81 60       	ori	r24, 0x01	; 1
    1bf0:	8c 93       	st	X, r24
    1bf2:	4d c1       	rjmp	.+666    	; 0x1e8e <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	86 81       	ldd	r24, Z+6	; 0x06
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	e9 f4       	brne	.+58     	; 0x1c38 <Timer_init+0xd2>
		{
			/* Select compare mode (CTC) by set this bit WGM01 by one */
			TCCR0 |= ( 1 << WGM01 );
    1bfe:	a3 e5       	ldi	r26, 0x53	; 83
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e3 e5       	ldi	r30, 0x53	; 83
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	88 60       	ori	r24, 0x08	; 8
    1c0a:	8c 93       	st	X, r24

			/* Set initial value for TIMER 0 and compare value */
			TCNT0 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 0.
    1c0c:	a2 e5       	ldi	r26, 0x52	; 82
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 0.
    1c1a:	ac e5       	ldi	r26, 0x5C	; 92
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	8c 93       	st	X, r24

			/* Enable Timer 0 Compare Interrupt */
			TIMSK |= ( 1 << OCIE0 );
    1c28:	a9 e5       	ldi	r26, 0x59	; 89
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e9 e5       	ldi	r30, 0x59	; 89
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	82 60       	ori	r24, 0x02	; 2
    1c34:	8c 93       	st	X, r24
    1c36:	2b c1       	rjmp	.+598    	; 0x1e8e <Timer_init+0x328>
		}


		/* Fast PWM */
		else if( Config_Ptr -> timer_mode == FAST_PWM )
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	86 81       	ldd	r24, Z+6	; 0x06
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <Timer_init+0xde>
    1c42:	25 c1       	rjmp	.+586    	; 0x1e8e <Timer_init+0x328>
		{
			/* Select fast PWM mode by set these bits WGM00,WGM01 by one */
			TCCR0 |= ( 1 << WGM00 ) | ( 1 << WGM01 );
    1c44:	a3 e5       	ldi	r26, 0x53	; 83
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e3 e5       	ldi	r30, 0x53	; 83
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 64       	ori	r24, 0x48	; 72
    1c50:	8c 93       	st	X, r24

			/* Select mode of OC0 */
			TCCR0 = ( TCCR0 & 0xCF ) | ( (Config_Ptr -> output_compare) << 4 );	// (OC0) CF = 1100 1111 (COM01 , COM00)
    1c52:	a3 e5       	ldi	r26, 0x53	; 83
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e3 e5       	ldi	r30, 0x53	; 83
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	2f 7c       	andi	r18, 0xCF	; 207
    1c60:	e9 81       	ldd	r30, Y+1	; 0x01
    1c62:	fa 81       	ldd	r31, Y+2	; 0x02
    1c64:	87 81       	ldd	r24, Z+7	; 0x07
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	82 95       	swap	r24
    1c6c:	92 95       	swap	r25
    1c6e:	90 7f       	andi	r25, 0xF0	; 240
    1c70:	98 27       	eor	r25, r24
    1c72:	80 7f       	andi	r24, 0xF0	; 240
    1c74:	98 27       	eor	r25, r24
    1c76:	82 2b       	or	r24, r18
    1c78:	8c 93       	st	X, r24

			/* Set initial value for TIMER 0 and compare value */
			TCNT0 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 0.
    1c7a:	a2 e5       	ldi	r26, 0x52	; 82
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 0.
    1c88:	ac e5       	ldi	r26, 0x5C	; 92
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	8c 93       	st	X, r24
    1c96:	fb c0       	rjmp	.+502    	; 0x1e8e <Timer_init+0x328>
		 *******************************************************************************/

	case TIMER_1 :

		/* Non-PWM mode FOC1A and FOC2A = 1 */
		TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    1c98:	ef e4       	ldi	r30, 0x4F	; 79
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	8c e0       	ldi	r24, 0x0C	; 12
    1c9e:	80 83       	st	Z, r24

		/* Prescaler of F_CPU */
		TCCR1B = ( TCCR1B & 0xF8 ) | ( Config_Ptr -> timer_clock );		// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    1ca0:	ae e4       	ldi	r26, 0x4E	; 78
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ee e4       	ldi	r30, 0x4E	; 78
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	98 2f       	mov	r25, r24
    1cac:	98 7f       	andi	r25, 0xF8	; 248
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	85 81       	ldd	r24, Z+5	; 0x05
    1cb4:	89 2b       	or	r24, r25
    1cb6:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	86 81       	ldd	r24, Z+6	; 0x06
    1cbe:	88 23       	and	r24, r24
    1cc0:	71 f4       	brne	.+28     	; 0x1cde <Timer_init+0x178>
		{
			/* To use normal mode (OVF) set these bits WGM10,WGM11,WGM12 and WGM13 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 1 */
			TCNT1 = Config_Ptr -> timer_InitialValue;
    1cc2:	ac e4       	ldi	r26, 0x4C	; 76
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24

			/* Enable TIMER 1 Overflow Interrupt */
			TIMSK = ( 1 << TOIE1 );
    1cd4:	e9 e5       	ldi	r30, 0x59	; 89
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	80 83       	st	Z, r24
    1cdc:	d8 c0       	rjmp	.+432    	; 0x1e8e <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	86 81       	ldd	r24, Z+6	; 0x06
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	f1 f4       	brne	.+60     	; 0x1d24 <Timer_init+0x1be>
		{
			/* Select (mode number 4) compare mode (CTC) by set this bit WGM12 by one */
			TCCR1B |= ( 1 << WGM12 );
    1ce8:	ae e4       	ldi	r26, 0x4E	; 78
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ee e4       	ldi	r30, 0x4E	; 78
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 60       	ori	r24, 0x08	; 8
    1cf4:	8c 93       	st	X, r24


			/* Set initial value for TIMER 1 and compare value */
			TCNT1 = Config_Ptr -> timer_InitialValue;			// Initial value for TIMER 1.
    1cf6:	ac e4       	ldi	r26, 0x4C	; 76
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	9c 93       	st	X, r25
    1d06:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;		// Compare value for TIMER 1.
    1d08:	aa e4       	ldi	r26, 0x4A	; 74
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	11 96       	adiw	r26, 0x01	; 1
    1d16:	9c 93       	st	X, r25
    1d18:	8e 93       	st	-X, r24

			/* Enable TIMER 1 Compare Interrupt */
			TIMSK = ( 1 << OCIE1A );
    1d1a:	e9 e5       	ldi	r30, 0x59	; 89
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 e1       	ldi	r24, 0x10	; 16
    1d20:	80 83       	st	Z, r24
    1d22:	b5 c0       	rjmp	.+362    	; 0x1e8e <Timer_init+0x328>
		}


		/* Fast PWM */
		else if ( Config_Ptr -> timer_mode == FAST_PWM )
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	86 81       	ldd	r24, Z+6	; 0x06
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <Timer_init+0x1ca>
    1d2e:	af c0       	rjmp	.+350    	; 0x1e8e <Timer_init+0x328>
		{
			/* We used (mode number 15) in dataSheet
			 * so we need to set these bits WGM10,WGM11,WGM12 and WGM13 by one. */
			TCCR1A |= ( 1 << WGM10 ) | ( 1 << WGM11 );
    1d30:	af e4       	ldi	r26, 0x4F	; 79
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	ef e4       	ldi	r30, 0x4F	; 79
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	83 60       	ori	r24, 0x03	; 3
    1d3c:	8c 93       	st	X, r24
			TCCR1B |= ( 1 << WGM12 ) | ( 1 << WGM13 );
    1d3e:	ae e4       	ldi	r26, 0x4E	; 78
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	ee e4       	ldi	r30, 0x4E	; 78
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 61       	ori	r24, 0x18	; 24
    1d4a:	8c 93       	st	X, r24

			/* Select mode of OC1A */
			TCCR1A  = ( TCCR1A & 0x3F ) | ( (Config_Ptr -> output_compare) << 6 );	// 3F = 0011 1111 (COM1A1,COM1A0)
    1d4c:	af e4       	ldi	r26, 0x4F	; 79
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ef e4       	ldi	r30, 0x4F	; 79
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	2f 73       	andi	r18, 0x3F	; 63
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	87 81       	ldd	r24, Z+7	; 0x07
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	00 24       	eor	r0, r0
    1d66:	96 95       	lsr	r25
    1d68:	87 95       	ror	r24
    1d6a:	07 94       	ror	r0
    1d6c:	96 95       	lsr	r25
    1d6e:	87 95       	ror	r24
    1d70:	07 94       	ror	r0
    1d72:	98 2f       	mov	r25, r24
    1d74:	80 2d       	mov	r24, r0
    1d76:	82 2b       	or	r24, r18
    1d78:	8c 93       	st	X, r24


			/* Set initial value for TIMER 1 and compare value */
			TCNT1 = Config_Ptr -> timer_InitialValue;			// Initial value for TIMER 1.
    1d7a:	ac e4       	ldi	r26, 0x4C	; 76
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	9c 93       	st	X, r25
    1d8a:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;		// Compare value for TIMER 1.
    1d8c:	aa e4       	ldi	r26, 0x4A	; 74
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	11 96       	adiw	r26, 0x01	; 1
    1d9a:	9c 93       	st	X, r25
    1d9c:	8e 93       	st	-X, r24
    1d9e:	77 c0       	rjmp	.+238    	; 0x1e8e <Timer_init+0x328>
		 *******************************************************************************/

	case TIMER_2 :

		/* Non-PWM mode FOC2 = 1 */
		TCCR2 |= ( 1 << FOC2 );
    1da0:	a5 e4       	ldi	r26, 0x45	; 69
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e4       	ldi	r30, 0x45	; 69
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	8c 93       	st	X, r24

		/* Prescaler of F_CPU */
		TCCR2 = ( TCCR2 & 0xF8 ) | ( Config_Ptr -> timer_clock );	// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    1dae:	a5 e4       	ldi	r26, 0x45	; 69
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e5 e4       	ldi	r30, 0x45	; 69
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	98 2f       	mov	r25, r24
    1dba:	98 7f       	andi	r25, 0xF8	; 248
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	85 81       	ldd	r24, Z+5	; 0x05
    1dc2:	89 2b       	or	r24, r25
    1dc4:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    1dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dca:	86 81       	ldd	r24, Z+6	; 0x06
    1dcc:	88 23       	and	r24, r24
    1dce:	79 f4       	brne	.+30     	; 0x1dee <Timer_init+0x288>
		{
			/* To use normal mode (OVF) set these bits WGM21 and WGM20 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 2 */
			TCNT2  = Config_Ptr -> timer_InitialValue;
    1dd0:	a4 e4       	ldi	r26, 0x44	; 68
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	8c 93       	st	X, r24

			/* Enable TIMER 2 Overflow Interrupt */
			TIMSK |= ( 1 << TOIE2 );
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	8c 93       	st	X, r24
    1dec:	50 c0       	rjmp	.+160    	; 0x1e8e <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    1dee:	e9 81       	ldd	r30, Y+1	; 0x01
    1df0:	fa 81       	ldd	r31, Y+2	; 0x02
    1df2:	86 81       	ldd	r24, Z+6	; 0x06
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	e9 f4       	brne	.+58     	; 0x1e32 <Timer_init+0x2cc>
		{
			/* Select compare mode (CTC) by set this bit WGM21 by one */
			TCCR0 |= ( 1 << WGM21 );
    1df8:	a3 e5       	ldi	r26, 0x53	; 83
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e3 e5       	ldi	r30, 0x53	; 83
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	88 60       	ori	r24, 0x08	; 8
    1e04:	8c 93       	st	X, r24

			/* Set initial value for TIMER 2 and compare value */
			TCNT2 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 2.
    1e06:	a4 e4       	ldi	r26, 0x44	; 68
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	8c 93       	st	X, r24
			OCR2  = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 2.
    1e14:	a3 e4       	ldi	r26, 0x43	; 67
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	8c 93       	st	X, r24

			/* Enable Timer 2 Compare Interrupt */
			TIMSK |= ( 1 << OCIE2 );
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 68       	ori	r24, 0x80	; 128
    1e2e:	8c 93       	st	X, r24
    1e30:	2e c0       	rjmp	.+92     	; 0x1e8e <Timer_init+0x328>
		}


		/* Fast PWM */
		else if( Config_Ptr -> timer_mode == FAST_PWM )
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	86 81       	ldd	r24, Z+6	; 0x06
    1e38:	83 30       	cpi	r24, 0x03	; 3
    1e3a:	49 f5       	brne	.+82     	; 0x1e8e <Timer_init+0x328>
		{
			/* Select fast PWM mode by set these bits WGM20,WGM21 by one */
			TCCR2 |= ( 1 << WGM20 ) | ( 1 << WGM21 );
    1e3c:	a5 e4       	ldi	r26, 0x45	; 69
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e5 e4       	ldi	r30, 0x45	; 69
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 64       	ori	r24, 0x48	; 72
    1e48:	8c 93       	st	X, r24

			/* Select mode of OC2 */
			TCCR2 = ( TCCR2 & 0xCF ) | ( (Config_Ptr -> output_compare) << 4 );	// (OC2) CF = 1100 1111 (COM01 , COM00)
    1e4a:	a5 e4       	ldi	r26, 0x45	; 69
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e4       	ldi	r30, 0x45	; 69
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	2f 7c       	andi	r18, 0xCF	; 207
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	87 81       	ldd	r24, Z+7	; 0x07
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	82 95       	swap	r24
    1e64:	92 95       	swap	r25
    1e66:	90 7f       	andi	r25, 0xF0	; 240
    1e68:	98 27       	eor	r25, r24
    1e6a:	80 7f       	andi	r24, 0xF0	; 240
    1e6c:	98 27       	eor	r25, r24
    1e6e:	82 2b       	or	r24, r18
    1e70:	8c 93       	st	X, r24

			/* Set initial value for TIMER 2 and compare value */
			TCNT2 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 2.
    1e72:	a4 e4       	ldi	r26, 0x44	; 68
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e9 81       	ldd	r30, Y+1	; 0x01
    1e78:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	8c 93       	st	X, r24
			OCR2  = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 2.
    1e80:	a3 e4       	ldi	r26, 0x43	; 67
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	8c 93       	st	X, r24
		}

		break;
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <Timer_deInit>:
/*
 * Description :
 *  Function to disable the Timer via Timer_ID.
 */
void Timer_deInit(Timer_ID_Type timer_ID)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <Timer_deInit+0x6>
    1ea2:	0f 92       	push	r0
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	switch( timer_ID )
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3b 83       	std	Y+3, r19	; 0x03
    1eb2:	2a 83       	std	Y+2, r18	; 0x02
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	f1 f0       	breq	.+60     	; 0x1efa <Timer_deInit+0x5e>
    1ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec2:	e2 30       	cpi	r30, 0x02	; 2
    1ec4:	f1 05       	cpc	r31, r1
    1ec6:	c1 f1       	breq	.+112    	; 0x1f38 <Timer_deInit+0x9c>
    1ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eca:	3b 81       	ldd	r19, Y+3	; 0x03
    1ecc:	21 15       	cp	r18, r1
    1ece:	31 05       	cpc	r19, r1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <Timer_deInit+0x38>
    1ed2:	44 c0       	rjmp	.+136    	; 0x1f5c <Timer_deInit+0xc0>
	{
	case TIMER_0 :

		/* Clear all TIMER 0 registers */
		TCCR0 = TCNT0 = OCR0 = TIMSK = 0;
    1ed4:	43 e5       	ldi	r20, 0x53	; 83
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	22 e5       	ldi	r18, 0x52	; 82
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	ac e5       	ldi	r26, 0x5C	; 92
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e9 e5       	ldi	r30, 0x59	; 89
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	10 82       	st	Z, r1
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8c 93       	st	X, r24
    1eea:	8c 91       	ld	r24, X
    1eec:	f9 01       	movw	r30, r18
    1eee:	80 83       	st	Z, r24
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	80 81       	ld	r24, Z
    1ef4:	fa 01       	movw	r30, r20
    1ef6:	80 83       	st	Z, r24
    1ef8:	31 c0       	rjmp	.+98     	; 0x1f5c <Timer_deInit+0xc0>
		break;

	case TIMER_1 :

		/* Clear all TIMER 1 registers */
		TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    1efa:	6f e4       	ldi	r22, 0x4F	; 79
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	4e e4       	ldi	r20, 0x4E	; 78
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	29 e5       	ldi	r18, 0x59	; 89
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	ac e4       	ldi	r26, 0x4C	; 76
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	ea e4       	ldi	r30, 0x4A	; 74
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	11 82       	std	Z+1, r1	; 0x01
    1f10:	10 82       	st	Z, r1
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	11 96       	adiw	r26, 0x01	; 1
    1f18:	9c 93       	st	X, r25
    1f1a:	8e 93       	st	-X, r24
    1f1c:	8d 91       	ld	r24, X+
    1f1e:	9c 91       	ld	r25, X
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	f9 01       	movw	r30, r18
    1f24:	80 83       	st	Z, r24
    1f26:	f9 01       	movw	r30, r18
    1f28:	80 81       	ld	r24, Z
    1f2a:	fa 01       	movw	r30, r20
    1f2c:	80 83       	st	Z, r24
    1f2e:	fa 01       	movw	r30, r20
    1f30:	80 81       	ld	r24, Z
    1f32:	fb 01       	movw	r30, r22
    1f34:	80 83       	st	Z, r24
    1f36:	12 c0       	rjmp	.+36     	; 0x1f5c <Timer_deInit+0xc0>
		break;

	case TIMER_2 :

		/* Clear all TIMER 2 registers */
		TCCR2 = TCNT2 = OCR2 = TIMSK = 0;
    1f38:	45 e4       	ldi	r20, 0x45	; 69
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	24 e4       	ldi	r18, 0x44	; 68
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	a3 e4       	ldi	r26, 0x43	; 67
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e9 e5       	ldi	r30, 0x59	; 89
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	10 82       	st	Z, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8c 93       	st	X, r24
    1f4e:	8c 91       	ld	r24, X
    1f50:	f9 01       	movw	r30, r18
    1f52:	80 83       	st	Z, r24
    1f54:	f9 01       	movw	r30, r18
    1f56:	80 81       	ld	r24, Z
    1f58:	fa 01       	movw	r30, r20
    1f5a:	80 83       	st	Z, r24
		break;
	}
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <Timer_setCallBack>:
/*
 * Description :
 *  Function to set the Call Back function address to the required Timer.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_ID )
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <Timer_setCallBack+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <Timer_setCallBack+0x8>
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	6b 83       	std	Y+3, r22	; 0x03
	switch( timer_ID )
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	3d 83       	std	Y+5, r19	; 0x05
    1f84:	2c 83       	std	Y+4, r18	; 0x04
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	81 f0       	breq	.+32     	; 0x1fb0 <Timer_setCallBack+0x48>
    1f90:	2c 81       	ldd	r18, Y+4	; 0x04
    1f92:	3d 81       	ldd	r19, Y+5	; 0x05
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <Timer_setCallBack+0x56>
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	a1 f4       	brne	.+40     	; 0x1fca <Timer_setCallBack+0x62>
	{
	case TIMER_0 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	90 93 79 00 	sts	0x0079, r25
    1faa:	80 93 78 00 	sts	0x0078, r24
    1fae:	0d c0       	rjmp	.+26     	; 0x1fca <Timer_setCallBack+0x62>
		break;

	case TIMER_1 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	90 93 79 00 	sts	0x0079, r25
    1fb8:	80 93 78 00 	sts	0x0078, r24
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <Timer_setCallBack+0x62>
		break;

	case TIMER_2 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	90 93 79 00 	sts	0x0079, r25
    1fc6:	80 93 78 00 	sts	0x0078, r24
		break;
	}

}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <TWI_init+0x6>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    /* Configure the prescaler and baud rate F_CPU=8Mhz */
    TWBR = Config_Ptr -> bit_rate;
    1fe8:	a0 e2       	ldi	r26, 0x20	; 32
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	81 81       	ldd	r24, Z+1	; 0x01
    1ff2:	8c 93       	st	X, r24
	TWSR = 0;
    1ff4:	e1 e2       	ldi	r30, 0x21	; 33
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me:(used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr -> address;
    1ffa:	a2 e2       	ldi	r26, 0x22	; 34
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	80 81       	ld	r24, Z
    2004:	8c 93       	st	X, r24

    /* Enable TWI */
    TWCR = (1 << TWEN);
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	84 e0       	ldi	r24, 0x04	; 4
    200c:	80 83       	st	Z, r24
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <TWI_start>:

void TWI_start(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2020:	e6 e5       	ldi	r30, 0x56	; 86
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	84 ea       	ldi	r24, 0xA4	; 164
    2026:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( BIT_IS_CLEAR(TWCR , TWINT) );
    2028:	e6 e5       	ldi	r30, 0x56	; 86
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	88 23       	and	r24, r24
    2030:	dc f7       	brge	.-10     	; 0x2028 <TWI_start+0x10>
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <TWI_stop>:

void TWI_stop(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2040:	e6 e5       	ldi	r30, 0x56	; 86
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	84 e9       	ldi	r24, 0x94	; 148
    2046:	80 83       	st	Z, r24
}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	0f 92       	push	r0
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    205a:	e3 e2       	ldi	r30, 0x23	; 35
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2062:	e6 e5       	ldi	r30, 0x56	; 86
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	84 e8       	ldi	r24, 0x84	; 132
    2068:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while( BIT_IS_CLEAR(TWCR , TWINT) );
    206a:	e6 e5       	ldi	r30, 0x56	; 86
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 23       	and	r24, r24
    2072:	dc f7       	brge	.-10     	; 0x206a <TWI_writeByte+0x1c>
}
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2084:	e6 e5       	ldi	r30, 0x56	; 86
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	84 ec       	ldi	r24, 0xC4	; 196
    208a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while( BIT_IS_CLEAR(TWCR , TWINT) );
    208c:	e6 e5       	ldi	r30, 0x56	; 86
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	88 23       	and	r24, r24
    2094:	dc f7       	brge	.-10     	; 0x208c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2096:	e3 e2       	ldi	r30, 0x23	; 35
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    20aa:	e6 e5       	ldi	r30, 0x56	; 86
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	84 e8       	ldi	r24, 0x84	; 132
    20b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while( BIT_IS_CLEAR(TWCR , TWINT) );
    20b2:	e6 e5       	ldi	r30, 0x56	; 86
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	88 23       	and	r24, r24
    20ba:	dc f7       	brge	.-10     	; 0x20b2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    20bc:	e3 e2       	ldi	r30, 0x23	; 35
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    20d2:	e1 e2       	ldi	r30, 0x21	; 33
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 7f       	andi	r24, 0xF8	; 248
    20da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <UART_init+0x6>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    20f4:	eb e2       	ldi	r30, 0x2B	; 43
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	80 83       	st	Z, r24

	/* Enable Transmitter and Receiver */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    20fc:	ea e2       	ldi	r30, 0x2A	; 42
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	80 83       	st	Z, r24
	
	/* The URSEL must be one when writing the UCSRC */
	UCSRC = (1 << URSEL);
    2104:	e0 e4       	ldi	r30, 0x40	; 64
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 e8       	ldi	r24, 0x80	; 128
    210a:	80 83       	st	Z, r24
	
	/* Select parity check */
	UCSRC = ( UCSRC & 0XCF ) | ( (Config_Ptr -> parity) << 4 );	// CF = 1100 1111 (UPM0 UPM1)
    210c:	a0 e4       	ldi	r26, 0x40	; 64
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e0 e4       	ldi	r30, 0x40	; 64
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	28 2f       	mov	r18, r24
    2118:	2f 7c       	andi	r18, 0xCF	; 207
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	81 81       	ldd	r24, Z+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	82 95       	swap	r24
    2126:	92 95       	swap	r25
    2128:	90 7f       	andi	r25, 0xF0	; 240
    212a:	98 27       	eor	r25, r24
    212c:	80 7f       	andi	r24, 0xF0	; 240
    212e:	98 27       	eor	r25, r24
    2130:	82 2b       	or	r24, r18
    2132:	8c 93       	st	X, r24

	/* Select number of bit stop mode */
	UCSRC = ( UCSRC & 0XF7 ) | ( (Config_Ptr -> stop_bit) << 3 );	// F7 = 1111 0111 (USBS)
    2134:	a0 e4       	ldi	r26, 0x40	; 64
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e0 e4       	ldi	r30, 0x40	; 64
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	28 2f       	mov	r18, r24
    2140:	27 7f       	andi	r18, 0xF7	; 247
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	82 2b       	or	r24, r18
    215a:	8c 93       	st	X, r24

	/* Select number of bit data mode */
	UCSRC = ( UCSRC & 0XF1 ) | ( (Config_Ptr -> bit_data) << 1 );	// F1 = 1111 0001 (UCSZ0 UCSZ1 UCSZ2)
    215c:	a0 e4       	ldi	r26, 0x40	; 64
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e0 e4       	ldi	r30, 0x40	; 64
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	28 2f       	mov	r18, r24
    2168:	21 7f       	andi	r18, 0xF1	; 241
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	80 81       	ld	r24, Z
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	82 2b       	or	r24, r18
    217a:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Config_Ptr -> baud_rate) >> 8;
    217c:	a0 e4       	ldi	r26, 0x40	; 64
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	83 81       	ldd	r24, Z+3	; 0x03
    2186:	94 81       	ldd	r25, Z+4	; 0x04
    2188:	89 2f       	mov	r24, r25
    218a:	99 27       	eor	r25, r25
    218c:	8c 93       	st	X, r24
	UBRRL = (Config_Ptr -> baud_rate);
    218e:	a9 e2       	ldi	r26, 0x29	; 41
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	83 81       	ldd	r24, Z+3	; 0x03
    2198:	94 81       	ldd	r25, Z+4	; 0x04
    219a:	8c 93       	st	X, r24
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21b2:	eb e2       	ldi	r30, 0x2B	; 43
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	80 72       	andi	r24, 0x20	; 32
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	b9 f3       	breq	.-18     	; 0x21b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    21c4:	ec e2       	ldi	r30, 0x2C	; 44
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    21dc:	eb e2       	ldi	r30, 0x2B	; 43
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	88 23       	and	r24, r24
    21e4:	dc f7       	brge	.-10     	; 0x21dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    21e6:	ec e2       	ldi	r30, 0x2C	; 44
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
}
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <UART_sendString+0x6>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9b 83       	std	Y+3, r25	; 0x03
    2200:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	80 81       	ld	r24, Z
    2218:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		i++;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	39 f7       	brne	.-50     	; 0x2206 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <UART_receiveString+0xa>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9b 83       	std	Y+3, r25	; 0x03
    2256:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2258:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	8c 01       	movw	r16, r24
    2266:	02 0f       	add	r16, r18
    2268:	13 1f       	adc	r17, r19
    226a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
    226e:	f8 01       	movw	r30, r16
    2270:	80 83       	st	Z, r24
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
    2284:	8c 01       	movw	r16, r24
    2286:	02 0f       	add	r16, r18
    2288:	13 1f       	adc	r17, r19
    228a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_recieveByte>
    228e:	f8 01       	movw	r30, r16
    2290:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	83 32       	cpi	r24, 0x23	; 35
    22a6:	31 f7       	brne	.-52     	; 0x2274 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	10 82       	st	Z, r1
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
