
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  000044c0  00004554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080015a  0080015a  0000464e  2**0
                  ALLOC
  3 .stab         000036b4  00000000  00000000  00004650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001436  00000000  00000000  00007d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000913a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000927a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000093ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__vector_4>
      14:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__vector_9>
      28:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <__vector_10>
      2c:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 13 	call	0x26c2	; 0x26c2 <main>
      8a:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e4       	ldi	r26, 0x44	; 68
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e4       	ldi	r24, 0x44	; 68
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calculate_time>:
 *                            FUNCTIONS DEFINITIONS                            *
 *******************************************************************************/

/* Function to calculate time */
void Calculate_time(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 5a 01 	lds	r24, 0x015A
     b52:	90 91 5b 01 	lds	r25, 0x015B
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 5b 01 	sts	0x015B, r25
     b5c:	80 93 5a 01 	sts	0x015A, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <Create_Password>:


/* Function to create password */
void Create_Password()
{
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	c5 5a       	subi	r28, 0xA5	; 165
     b74:	d0 40       	sbci	r29, 0x00	; 0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61

	uint8 key = 0,pass=0,count_pass;
     b80:	fe 01       	movw	r30, r28
     b82:	eb 55       	subi	r30, 0x5B	; 91
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
     b88:	fe 01       	movw	r30, r28
     b8a:	ec 55       	subi	r30, 0x5C	; 92
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	10 82       	st	Z, r1

	sint32 new_pass = 0, re_pass = 0;
     b90:	fe 01       	movw	r30, r28
     b92:	e1 56       	subi	r30, 0x61	; 97
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	10 82       	st	Z, r1
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	12 82       	std	Z+2, r1	; 0x02
     b9c:	13 82       	std	Z+3, r1	; 0x03
     b9e:	fe 01       	movw	r30, r28
     ba0:	e5 56       	subi	r30, 0x65	; 101
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	10 82       	st	Z, r1
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	12 82       	std	Z+2, r1	; 0x02
     baa:	13 82       	std	Z+3, r1	; 0x03

	/* First attempt to take password */
	LCD_clearScreen();
     bac:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     bb0:	20 e6       	ldi	r18, 0x60	; 96
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	a9 01       	movw	r20, r18
     bba:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
     bbe:	fe 01       	movw	r30, r28
     bc0:	ed 55       	subi	r30, 0x5D	; 93
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	10 82       	st	Z, r1
     bc6:	19 c3       	rjmp	.+1586   	; 0x11fa <Create_Password+0x694>
	{
		key = KEYPAD_getPressedKey();
     bc8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
     bcc:	fe 01       	movw	r30, r28
     bce:	eb 55       	subi	r30, 0x5B	; 91
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 83       	st	Z, r24
     bd4:	fe 01       	movw	r30, r28
     bd6:	e9 56       	subi	r30, 0x69	; 105
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a8 e4       	ldi	r26, 0x48	; 72
     be0:	b2 e4       	ldi	r27, 0x42	; 66
     be2:	80 83       	st	Z, r24
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	a2 83       	std	Z+2, r26	; 0x02
     be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	8e 01       	movw	r16, r28
     bec:	0d 56       	subi	r16, 0x6D	; 109
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	fe 01       	movw	r30, r28
     bf2:	e9 56       	subi	r30, 0x69	; 105
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a ef       	ldi	r20, 0xFA	; 250
     c04:	54 e4       	ldi	r21, 0x44	; 68
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	f8 01       	movw	r30, r16
     c10:	80 83       	st	Z, r24
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	a2 83       	std	Z+2, r26	; 0x02
     c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c18:	fe 01       	movw	r30, r28
     c1a:	ed 56       	subi	r30, 0x6D	; 109
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	60 81       	ld	r22, Z
     c20:	71 81       	ldd	r23, Z+1	; 0x01
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	5f e3       	ldi	r21, 0x3F	; 63
     c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c32:	88 23       	and	r24, r24
     c34:	44 f4       	brge	.+16     	; 0xc46 <Create_Password+0xe0>
		__ticks = 1;
     c36:	fe 01       	movw	r30, r28
     c38:	ef 56       	subi	r30, 0x6F	; 111
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	64 c0       	rjmp	.+200    	; 0xd0e <Create_Password+0x1a8>
	else if (__tmp > 65535)
     c46:	fe 01       	movw	r30, r28
     c48:	ed 56       	subi	r30, 0x6D	; 109
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	3f ef       	ldi	r19, 0xFF	; 255
     c58:	4f e7       	ldi	r20, 0x7F	; 127
     c5a:	57 e4       	ldi	r21, 0x47	; 71
     c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c60:	18 16       	cp	r1, r24
     c62:	0c f0       	brlt	.+2      	; 0xc66 <Create_Password+0x100>
     c64:	43 c0       	rjmp	.+134    	; 0xcec <Create_Password+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c66:	fe 01       	movw	r30, r28
     c68:	e9 56       	subi	r30, 0x69	; 105
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	60 81       	ld	r22, Z
     c6e:	71 81       	ldd	r23, Z+1	; 0x01
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	8e 01       	movw	r16, r28
     c86:	0f 56       	subi	r16, 0x6F	; 111
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	1f c0       	rjmp	.+62     	; 0xcdc <Create_Password+0x176>
     c9e:	fe 01       	movw	r30, r28
     ca0:	e1 57       	subi	r30, 0x71	; 113
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	fe 01       	movw	r30, r28
     cae:	e1 57       	subi	r30, 0x71	; 113
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <Create_Password+0x150>
     cba:	fe 01       	movw	r30, r28
     cbc:	e1 57       	subi	r30, 0x71	; 113
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	de 01       	movw	r26, r28
     cc6:	af 56       	subi	r26, 0x6F	; 111
     cc8:	bf 4f       	sbci	r27, 0xFF	; 255
     cca:	fe 01       	movw	r30, r28
     ccc:	ef 56       	subi	r30, 0x6F	; 111
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cdc:	fe 01       	movw	r30, r28
     cde:	ef 56       	subi	r30, 0x6F	; 111
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	d1 f6       	brne	.-76     	; 0xc9e <Create_Password+0x138>
     cea:	e3 c0       	rjmp	.+454    	; 0xeb2 <Create_Password+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cec:	8e 01       	movw	r16, r28
     cee:	0f 56       	subi	r16, 0x6F	; 111
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	ed 56       	subi	r30, 0x6D	; 109
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	f8 01       	movw	r30, r16
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	de 01       	movw	r26, r28
     d10:	a3 57       	subi	r26, 0x73	; 115
     d12:	bf 4f       	sbci	r27, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	ef 56       	subi	r30, 0x6F	; 111
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	fe 01       	movw	r30, r28
     d26:	e3 57       	subi	r30, 0x73	; 115
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <Create_Password+0x1c8>
     d32:	fe 01       	movw	r30, r28
     d34:	e3 57       	subi	r30, 0x73	; 115
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	ba c0       	rjmp	.+372    	; 0xeb2 <Create_Password+0x34c>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
     d3e:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
     d42:	fe 01       	movw	r30, r28
     d44:	eb 55       	subi	r30, 0x5B	; 91
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 83       	st	Z, r24
     d4a:	fe 01       	movw	r30, r28
     d4c:	e7 57       	subi	r30, 0x77	; 119
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a8 e4       	ldi	r26, 0x48	; 72
     d56:	b2 e4       	ldi	r27, 0x42	; 66
     d58:	80 83       	st	Z, r24
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	a2 83       	std	Z+2, r26	; 0x02
     d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	8e 01       	movw	r16, r28
     d62:	0b 57       	subi	r16, 0x7B	; 123
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	fe 01       	movw	r30, r28
     d68:	e7 57       	subi	r30, 0x77	; 119
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d8e:	fe 01       	movw	r30, r28
     d90:	eb 57       	subi	r30, 0x7B	; 123
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da8:	88 23       	and	r24, r24
     daa:	44 f4       	brge	.+16     	; 0xdbc <Create_Password+0x256>
		__ticks = 1;
     dac:	fe 01       	movw	r30, r28
     dae:	ed 57       	subi	r30, 0x7D	; 125
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <Create_Password+0x31e>
	else if (__tmp > 65535)
     dbc:	fe 01       	movw	r30, r28
     dbe:	eb 57       	subi	r30, 0x7B	; 123
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <Create_Password+0x276>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <Create_Password+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	fe 01       	movw	r30, r28
     dde:	e7 57       	subi	r30, 0x77	; 119
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	0d 57       	subi	r16, 0x7D	; 125
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <Create_Password+0x2ec>
     e14:	fe 01       	movw	r30, r28
     e16:	ef 57       	subi	r30, 0x7F	; 127
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	fe 01       	movw	r30, r28
     e24:	ef 57       	subi	r30, 0x7F	; 127
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <Create_Password+0x2c6>
     e30:	fe 01       	movw	r30, r28
     e32:	ef 57       	subi	r30, 0x7F	; 127
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	de 01       	movw	r26, r28
     e3c:	ad 57       	subi	r26, 0x7D	; 125
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	fe 01       	movw	r30, r28
     e42:	ed 57       	subi	r30, 0x7D	; 125
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	fe 01       	movw	r30, r28
     e54:	ed 57       	subi	r30, 0x7D	; 125
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f6       	brne	.-76     	; 0xe14 <Create_Password+0x2ae>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <Create_Password+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	8e 01       	movw	r16, r28
     e64:	0d 57       	subi	r16, 0x7D	; 125
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 57       	subi	r30, 0x7B	; 123
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	de 01       	movw	r26, r28
     e86:	a1 58       	subi	r26, 0x81	; 129
     e88:	bf 4f       	sbci	r27, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	ed 57       	subi	r30, 0x7D	; 125
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 58       	subi	r30, 0x81	; 129
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <Create_Password+0x33e>
     ea8:	fe 01       	movw	r30, r28
     eaa:	e1 58       	subi	r30, 0x81	; 129
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
     eb2:	fe 01       	movw	r30, r28
     eb4:	eb 55       	subi	r30, 0x5B	; 91
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <Create_Password+0x35a>
     ebe:	3f cf       	rjmp	.-386    	; 0xd3e <Create_Password+0x1d8>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass,"*");
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 55       	subi	r30, 0x5D	; 93
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	20 e7       	ldi	r18, 0x70	; 112
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 81       	ld	r22, Z
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
     ed4:	fe 01       	movw	r30, r28
     ed6:	e5 58       	subi	r30, 0x85	; 133
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ac e8       	ldi	r26, 0x8C	; 140
     ee0:	b2 e4       	ldi	r27, 0x42	; 66
     ee2:	80 83       	st	Z, r24
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	a2 83       	std	Z+2, r26	; 0x02
     ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	8e 01       	movw	r16, r28
     eec:	09 58       	subi	r16, 0x89	; 137
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	fe 01       	movw	r30, r28
     ef2:	e5 58       	subi	r30, 0x85	; 133
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	80 83       	st	Z, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f18:	fe 01       	movw	r30, r28
     f1a:	e9 58       	subi	r30, 0x89	; 137
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	44 f4       	brge	.+16     	; 0xf46 <Create_Password+0x3e0>
		__ticks = 1;
     f36:	fe 01       	movw	r30, r28
     f38:	eb 58       	subi	r30, 0x8B	; 139
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	64 c0       	rjmp	.+200    	; 0x100e <Create_Password+0x4a8>
	else if (__tmp > 65535)
     f46:	fe 01       	movw	r30, r28
     f48:	e9 58       	subi	r30, 0x89	; 137
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f60:	18 16       	cp	r1, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <Create_Password+0x400>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <Create_Password+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	fe 01       	movw	r30, r28
     f68:	e5 58       	subi	r30, 0x85	; 133
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8e 01       	movw	r16, r28
     f86:	0b 58       	subi	r16, 0x8B	; 139
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <Create_Password+0x476>
     f9e:	fe 01       	movw	r30, r28
     fa0:	ed 58       	subi	r30, 0x8D	; 141
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	fe 01       	movw	r30, r28
     fae:	ed 58       	subi	r30, 0x8D	; 141
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <Create_Password+0x450>
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 58       	subi	r30, 0x8D	; 141
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	de 01       	movw	r26, r28
     fc6:	ab 58       	subi	r26, 0x8B	; 139
     fc8:	bf 4f       	sbci	r27, 0xFF	; 255
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 58       	subi	r30, 0x8B	; 139
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	9c 93       	st	X, r25
     fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	fe 01       	movw	r30, r28
     fde:	eb 58       	subi	r30, 0x8B	; 139
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d1 f6       	brne	.-76     	; 0xf9e <Create_Password+0x438>
     fea:	27 c0       	rjmp	.+78     	; 0x103a <Create_Password+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	8e 01       	movw	r16, r28
     fee:	0b 58       	subi	r16, 0x8B	; 139
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e9 58       	subi	r30, 0x89	; 137
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	de 01       	movw	r26, r28
    1010:	af 58       	subi	r26, 0x8F	; 143
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	fe 01       	movw	r30, r28
    1016:	eb 58       	subi	r30, 0x8B	; 139
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	8d 93       	st	X+, r24
    1020:	9c 93       	st	X, r25
    1022:	fe 01       	movw	r30, r28
    1024:	ef 58       	subi	r30, 0x8F	; 143
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <Create_Password+0x4c6>
    1030:	fe 01       	movw	r30, r28
    1032:	ef 58       	subi	r30, 0x8F	; 143
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
		_delay_ms(70);
		new_pass= new_pass*10 + key;
    103a:	fe 01       	movw	r30, r28
    103c:	e1 56       	subi	r30, 0x61	; 97
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	a2 81       	ldd	r26, Z+2	; 0x02
    1046:	b3 81       	ldd	r27, Z+3	; 0x03
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 86 21 	call	0x430c	; 0x430c <__mulsi3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	fe 01       	movw	r30, r28
    105e:	eb 55       	subi	r30, 0x5B	; 91
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	fe 01       	movw	r30, r28
    106e:	e1 56       	subi	r30, 0x61	; 97
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	a4 1f       	adc	r26, r20
    1078:	b5 1f       	adc	r27, r21
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	fe 01       	movw	r30, r28
    1084:	e3 59       	subi	r30, 0x93	; 147
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	aa e7       	ldi	r26, 0x7A	; 122
    108e:	b3 e4       	ldi	r27, 0x43	; 67
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	8e 01       	movw	r16, r28
    109a:	07 59       	subi	r16, 0x97	; 151
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	fe 01       	movw	r30, r28
    10a0:	e3 59       	subi	r30, 0x93	; 147
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	f8 01       	movw	r30, r16
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e7 59       	subi	r30, 0x97	; 151
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	44 f4       	brge	.+16     	; 0x10f4 <Create_Password+0x58e>
		__ticks = 1;
    10e4:	fe 01       	movw	r30, r28
    10e6:	e9 59       	subi	r30, 0x99	; 153
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	64 c0       	rjmp	.+200    	; 0x11bc <Create_Password+0x656>
	else if (__tmp > 65535)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e7 59       	subi	r30, 0x97	; 151
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	0c f0       	brlt	.+2      	; 0x1114 <Create_Password+0x5ae>
    1112:	43 c0       	rjmp	.+134    	; 0x119a <Create_Password+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	fe 01       	movw	r30, r28
    1116:	e3 59       	subi	r30, 0x93	; 147
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8e 01       	movw	r16, r28
    1134:	09 59       	subi	r16, 0x99	; 153
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	1f c0       	rjmp	.+62     	; 0x118a <Create_Password+0x624>
    114c:	fe 01       	movw	r30, r28
    114e:	eb 59       	subi	r30, 0x9B	; 155
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
    115a:	fe 01       	movw	r30, r28
    115c:	eb 59       	subi	r30, 0x9B	; 155
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <Create_Password+0x5fe>
    1168:	fe 01       	movw	r30, r28
    116a:	eb 59       	subi	r30, 0x9B	; 155
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1172:	de 01       	movw	r26, r28
    1174:	a9 59       	subi	r26, 0x99	; 153
    1176:	bf 4f       	sbci	r27, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e9 59       	subi	r30, 0x99	; 153
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	fe 01       	movw	r30, r28
    118c:	e9 59       	subi	r30, 0x99	; 153
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f6       	brne	.-76     	; 0x114c <Create_Password+0x5e6>
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <Create_Password+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	8e 01       	movw	r16, r28
    119c:	09 59       	subi	r16, 0x99	; 153
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 59       	subi	r30, 0x97	; 151
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	de 01       	movw	r26, r28
    11be:	ad 59       	subi	r26, 0x9D	; 157
    11c0:	bf 4f       	sbci	r27, 0xFF	; 255
    11c2:	fe 01       	movw	r30, r28
    11c4:	e9 59       	subi	r30, 0x99	; 153
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	8d 93       	st	X+, r24
    11ce:	9c 93       	st	X, r25
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 59       	subi	r30, 0x9D	; 157
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <Create_Password+0x674>
    11de:	fe 01       	movw	r30, r28
    11e0:	ed 59       	subi	r30, 0x9D	; 157
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24

	/* First attempt to take password */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    11e8:	de 01       	movw	r26, r28
    11ea:	ad 55       	subi	r26, 0x5D	; 93
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 55       	subi	r30, 0x5D	; 93
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8c 93       	st	X, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	ed 55       	subi	r30, 0x5D	; 93
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	08 f4       	brcc	.+2      	; 0x1208 <Create_Password+0x6a2>
    1206:	e0 cc       	rjmp	.-1600   	; 0xbc8 <Create_Password+0x62>
		LCD_displayStringRowColumn(1,count_pass,"*");
		_delay_ms(70);
		new_pass= new_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    1208:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    120c:	22 e7       	ldi	r18, 0x72	; 114
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    121a:	ba c0       	rjmp	.+372    	; 0x1390 <Create_Password+0x82a>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    121c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    1220:	fe 01       	movw	r30, r28
    1222:	eb 55       	subi	r30, 0x5B	; 91
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	fe 01       	movw	r30, r28
    122a:	e1 5a       	subi	r30, 0xA1	; 161
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a8 e4       	ldi	r26, 0x48	; 72
    1234:	b2 e4       	ldi	r27, 0x42	; 66
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	8e 01       	movw	r16, r28
    1240:	05 5a       	subi	r16, 0xA5	; 165
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	e1 5a       	subi	r30, 0xA1	; 161
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a ef       	ldi	r20, 0xFA	; 250
    1258:	54 e4       	ldi	r21, 0x44	; 68
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    126c:	fe 01       	movw	r30, r28
    126e:	e5 5a       	subi	r30, 0xA5	; 165
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	44 f4       	brge	.+16     	; 0x129a <Create_Password+0x734>
		__ticks = 1;
    128a:	fe 01       	movw	r30, r28
    128c:	e7 5a       	subi	r30, 0xA7	; 167
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	64 c0       	rjmp	.+200    	; 0x1362 <Create_Password+0x7fc>
	else if (__tmp > 65535)
    129a:	fe 01       	movw	r30, r28
    129c:	e5 5a       	subi	r30, 0xA5	; 165
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <Create_Password+0x754>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <Create_Password+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	fe 01       	movw	r30, r28
    12bc:	e1 5a       	subi	r30, 0xA1	; 161
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8e 01       	movw	r16, r28
    12da:	07 5a       	subi	r16, 0xA7	; 167
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <Create_Password+0x7ca>
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 5a       	subi	r30, 0xA9	; 169
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	88 ec       	ldi	r24, 0xC8	; 200
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	fe 01       	movw	r30, r28
    1302:	e9 5a       	subi	r30, 0xA9	; 169
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <Create_Password+0x7a4>
    130e:	fe 01       	movw	r30, r28
    1310:	e9 5a       	subi	r30, 0xA9	; 169
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	de 01       	movw	r26, r28
    131a:	a7 5a       	subi	r26, 0xA7	; 167
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e7 5a       	subi	r30, 0xA7	; 167
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	fe 01       	movw	r30, r28
    1332:	e7 5a       	subi	r30, 0xA7	; 167
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f6       	brne	.-76     	; 0x12f2 <Create_Password+0x78c>
    133e:	28 c0       	rjmp	.+80     	; 0x1390 <Create_Password+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	8e 01       	movw	r16, r28
    1342:	07 5a       	subi	r16, 0xA7	; 167
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	de 01       	movw	r26, r28
    1364:	ab 5a       	subi	r26, 0xAB	; 171
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e7 5a       	subi	r30, 0xA7	; 167
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	fe 01       	movw	r30, r28
    137a:	eb 5a       	subi	r30, 0xAB	; 171
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <Create_Password+0x81c>
    1386:	fe 01       	movw	r30, r28
    1388:	eb 5a       	subi	r30, 0xAB	; 171
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
		new_pass= new_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    1390:	fe 01       	movw	r30, r28
    1392:	eb 55       	subi	r30, 0x5B	; 91
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	8d 33       	cpi	r24, 0x3D	; 61
    139a:	09 f0       	breq	.+2      	; 0x139e <Create_Password+0x838>
    139c:	3f cf       	rjmp	.-386    	; 0x121c <Create_Password+0x6b6>
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}

	/* Second attempt to take password */
	LCD_clearScreen();
    139e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Re-enter The");
    13a2:	2e e7       	ldi	r18, 0x7E	; 126
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Same Pass:");
    13b0:	2f e8       	ldi	r18, 0x8F	; 143
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
    13be:	fe 01       	movw	r30, r28
    13c0:	ed 55       	subi	r30, 0x5D	; 93
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	10 82       	st	Z, r1
    13c6:	6b c2       	rjmp	.+1238   	; 0x189e <Create_Password+0xd38>
	{
		key = KEYPAD_getPressedKey();
    13c8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    13cc:	fe 01       	movw	r30, r28
    13ce:	eb 55       	subi	r30, 0x5B	; 91
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	fe 01       	movw	r30, r28
    13d6:	ef 5a       	subi	r30, 0xAF	; 175
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a8 e4       	ldi	r26, 0x48	; 72
    13e0:	b2 e4       	ldi	r27, 0x42	; 66
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	8e 01       	movw	r16, r28
    13ec:	03 5b       	subi	r16, 0xB3	; 179
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ef 5a       	subi	r30, 0xAF	; 175
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a ef       	ldi	r20, 0xFA	; 250
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1418:	fe 01       	movw	r30, r28
    141a:	e3 5b       	subi	r30, 0xB3	; 179
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	44 f4       	brge	.+16     	; 0x1446 <Create_Password+0x8e0>
		__ticks = 1;
    1436:	fe 01       	movw	r30, r28
    1438:	e5 5b       	subi	r30, 0xB5	; 181
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    1444:	64 c0       	rjmp	.+200    	; 0x150e <Create_Password+0x9a8>
	else if (__tmp > 65535)
    1446:	fe 01       	movw	r30, r28
    1448:	e3 5b       	subi	r30, 0xB3	; 179
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	0c f0       	brlt	.+2      	; 0x1466 <Create_Password+0x900>
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <Create_Password+0x986>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	fe 01       	movw	r30, r28
    1468:	ef 5a       	subi	r30, 0xAF	; 175
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8e 01       	movw	r16, r28
    1486:	05 5b       	subi	r16, 0xB5	; 181
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	f8 01       	movw	r30, r16
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <Create_Password+0x976>
    149e:	fe 01       	movw	r30, r28
    14a0:	e7 5b       	subi	r30, 0xB7	; 183
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5b       	subi	r30, 0xB7	; 183
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <Create_Password+0x950>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 5b       	subi	r30, 0xB7	; 183
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	de 01       	movw	r26, r28
    14c6:	a5 5b       	subi	r26, 0xB5	; 181
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e5 5b       	subi	r30, 0xB5	; 181
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	9c 93       	st	X, r25
    14da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	d1 f6       	brne	.-76     	; 0x149e <Create_Password+0x938>
    14ea:	b4 c0       	rjmp	.+360    	; 0x1654 <Create_Password+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	8e 01       	movw	r16, r28
    14ee:	05 5b       	subi	r16, 0xB5	; 181
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	e3 5b       	subi	r30, 0xB3	; 179
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	de 01       	movw	r26, r28
    1510:	a9 5b       	subi	r26, 0xB9	; 185
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
    1524:	fe 01       	movw	r30, r28
    1526:	e9 5b       	subi	r30, 0xB9	; 185
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <Create_Password+0x9c8>
    1532:	fe 01       	movw	r30, r28
    1534:	e9 5b       	subi	r30, 0xB9	; 185
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	8b c0       	rjmp	.+278    	; 0x1654 <Create_Password+0xaee>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    153e:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    1542:	fe 01       	movw	r30, r28
    1544:	eb 55       	subi	r30, 0x5B	; 91
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 83       	st	Z, r24
    154a:	fe 01       	movw	r30, r28
    154c:	ed 5b       	subi	r30, 0xBD	; 189
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a8 e4       	ldi	r26, 0x48	; 72
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	8e 01       	movw	r16, r28
    1562:	01 5c       	subi	r16, 0xC1	; 193
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	ed 5b       	subi	r30, 0xBD	; 189
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a ef       	ldi	r20, 0xFA	; 250
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	f8 01       	movw	r30, r16
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158e:	fe 01       	movw	r30, r28
    1590:	ff 96       	adiw	r30, 0x3f	; 63
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <Create_Password+0xa4e>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e af       	std	Y+62, r25	; 0x3e
    15b0:	8d af       	std	Y+61, r24	; 0x3d
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <Create_Password+0xada>
	else if (__tmp > 65535)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ff 96       	adiw	r30, 0x3f	; 63
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	64 f5       	brge	.+88     	; 0x1628 <Create_Password+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ed 5b       	subi	r30, 0xBD	; 189
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <Create_Password+0xab8>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c af       	std	Y+60, r25	; 0x3c
    1606:	8b af       	std	Y+59, r24	; 0x3b
    1608:	8b ad       	ldd	r24, Y+59	; 0x3b
    160a:	9c ad       	ldd	r25, Y+60	; 0x3c
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <Create_Password+0xaa6>
    1610:	9c af       	std	Y+60, r25	; 0x3c
    1612:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d ad       	ldd	r24, Y+61	; 0x3d
    1616:	9e ad       	ldd	r25, Y+62	; 0x3e
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e af       	std	Y+62, r25	; 0x3e
    161c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1620:	9e ad       	ldd	r25, Y+62	; 0x3e
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <Create_Password+0xa9a>
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <Create_Password+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	fe 01       	movw	r30, r28
    162a:	ff 96       	adiw	r30, 0x3f	; 63
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e af       	std	Y+62, r25	; 0x3e
    163e:	8d af       	std	Y+61, r24	; 0x3d
    1640:	8d ad       	ldd	r24, Y+61	; 0x3d
    1642:	9e ad       	ldd	r25, Y+62	; 0x3e
    1644:	9a af       	std	Y+58, r25	; 0x3a
    1646:	89 af       	std	Y+57, r24	; 0x39
    1648:	89 ad       	ldd	r24, Y+57	; 0x39
    164a:	9a ad       	ldd	r25, Y+58	; 0x3a
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <Create_Password+0xae6>
    1650:	9a af       	std	Y+58, r25	; 0x3a
    1652:	89 af       	std	Y+57, r24	; 0x39
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
    1654:	fe 01       	movw	r30, r28
    1656:	eb 55       	subi	r30, 0x5B	; 91
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	08 f0       	brcs	.+2      	; 0x1662 <Create_Password+0xafc>
    1660:	6e cf       	rjmp	.-292    	; 0x153e <Create_Password+0x9d8>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass+10,"*");
    1662:	fe 01       	movw	r30, r28
    1664:	ed 55       	subi	r30, 0x5D	; 93
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	98 2f       	mov	r25, r24
    166c:	96 5f       	subi	r25, 0xF6	; 246
    166e:	20 e7       	ldi	r18, 0x70	; 112
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	69 2f       	mov	r22, r25
    1676:	a9 01       	movw	r20, r18
    1678:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	ac e8       	ldi	r26, 0x8C	; 140
    1682:	b2 e4       	ldi	r27, 0x42	; 66
    1684:	8d ab       	std	Y+53, r24	; 0x35
    1686:	9e ab       	std	Y+54, r25	; 0x36
    1688:	af ab       	std	Y+55, r26	; 0x37
    168a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6d a9       	ldd	r22, Y+53	; 0x35
    168e:	7e a9       	ldd	r23, Y+54	; 0x36
    1690:	8f a9       	ldd	r24, Y+55	; 0x37
    1692:	98 ad       	ldd	r25, Y+56	; 0x38
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	89 ab       	std	Y+49, r24	; 0x31
    16a6:	9a ab       	std	Y+50, r25	; 0x32
    16a8:	ab ab       	std	Y+51, r26	; 0x33
    16aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ac:	69 a9       	ldd	r22, Y+49	; 0x31
    16ae:	7a a9       	ldd	r23, Y+50	; 0x32
    16b0:	8b a9       	ldd	r24, Y+51	; 0x33
    16b2:	9c a9       	ldd	r25, Y+52	; 0x34
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <Create_Password+0xb68>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	98 ab       	std	Y+48, r25	; 0x30
    16ca:	8f a7       	std	Y+47, r24	; 0x2f
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <Create_Password+0xbe6>
	else if (__tmp > 65535)
    16ce:	69 a9       	ldd	r22, Y+49	; 0x31
    16d0:	7a a9       	ldd	r23, Y+50	; 0x32
    16d2:	8b a9       	ldd	r24, Y+51	; 0x33
    16d4:	9c a9       	ldd	r25, Y+52	; 0x34
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <Create_Password+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6d a9       	ldd	r22, Y+53	; 0x35
    16e8:	7e a9       	ldd	r23, Y+54	; 0x36
    16ea:	8f a9       	ldd	r24, Y+55	; 0x37
    16ec:	98 ad       	ldd	r25, Y+56	; 0x38
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	98 ab       	std	Y+48, r25	; 0x30
    170c:	8f a7       	std	Y+47, r24	; 0x2f
    170e:	0f c0       	rjmp	.+30     	; 0x172e <Create_Password+0xbc8>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9e a7       	std	Y+46, r25	; 0x2e
    1716:	8d a7       	std	Y+45, r24	; 0x2d
    1718:	8d a5       	ldd	r24, Y+45	; 0x2d
    171a:	9e a5       	ldd	r25, Y+46	; 0x2e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <Create_Password+0xbb6>
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8f a5       	ldd	r24, Y+47	; 0x2f
    1726:	98 a9       	ldd	r25, Y+48	; 0x30
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	98 ab       	std	Y+48, r25	; 0x30
    172c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	98 a9       	ldd	r25, Y+48	; 0x30
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <Create_Password+0xbaa>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <Create_Password+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	69 a9       	ldd	r22, Y+49	; 0x31
    173a:	7a a9       	ldd	r23, Y+50	; 0x32
    173c:	8b a9       	ldd	r24, Y+51	; 0x33
    173e:	9c a9       	ldd	r25, Y+52	; 0x34
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	8f a5       	ldd	r24, Y+47	; 0x2f
    174e:	98 a9       	ldd	r25, Y+48	; 0x30
    1750:	9c a7       	std	Y+44, r25	; 0x2c
    1752:	8b a7       	std	Y+43, r24	; 0x2b
    1754:	8b a5       	ldd	r24, Y+43	; 0x2b
    1756:	9c a5       	ldd	r25, Y+44	; 0x2c
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <Create_Password+0xbf2>
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(70);
		re_pass= re_pass*10 + key;
    1760:	fe 01       	movw	r30, r28
    1762:	e5 56       	subi	r30, 0x65	; 101
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	a2 81       	ldd	r26, Z+2	; 0x02
    176c:	b3 81       	ldd	r27, Z+3	; 0x03
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 86 21 	call	0x430c	; 0x430c <__mulsi3>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	fe 01       	movw	r30, r28
    1784:	eb 55       	subi	r30, 0x5B	; 91
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	fe 01       	movw	r30, r28
    1794:	e5 56       	subi	r30, 0x65	; 101
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	82 0f       	add	r24, r18
    179a:	93 1f       	adc	r25, r19
    179c:	a4 1f       	adc	r26, r20
    179e:	b5 1f       	adc	r27, r21
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	aa e7       	ldi	r26, 0x7A	; 122
    17ae:	b3 e4       	ldi	r27, 0x43	; 67
    17b0:	8f a3       	std	Y+39, r24	; 0x27
    17b2:	98 a7       	std	Y+40, r25	; 0x28
    17b4:	a9 a7       	std	Y+41, r26	; 0x29
    17b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ba:	78 a5       	ldd	r23, Y+40	; 0x28
    17bc:	89 a5       	ldd	r24, Y+41	; 0x29
    17be:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8b a3       	std	Y+35, r24	; 0x23
    17d2:	9c a3       	std	Y+36, r25	; 0x24
    17d4:	ad a3       	std	Y+37, r26	; 0x25
    17d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d8:	6b a1       	ldd	r22, Y+35	; 0x23
    17da:	7c a1       	ldd	r23, Y+36	; 0x24
    17dc:	8d a1       	ldd	r24, Y+37	; 0x25
    17de:	9e a1       	ldd	r25, Y+38	; 0x26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <Create_Password+0xc94>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <Create_Password+0xd12>
	else if (__tmp > 65535)
    17fa:	6b a1       	ldd	r22, Y+35	; 0x23
    17fc:	7c a1       	ldd	r23, Y+36	; 0x24
    17fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1800:	9e a1       	ldd	r25, Y+38	; 0x26
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <Create_Password+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6f a1       	ldd	r22, Y+39	; 0x27
    1814:	78 a5       	ldd	r23, Y+40	; 0x28
    1816:	89 a5       	ldd	r24, Y+41	; 0x29
    1818:	9a a5       	ldd	r25, Y+42	; 0x2a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
    183a:	0f c0       	rjmp	.+30     	; 0x185a <Create_Password+0xcf4>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
    1844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1846:	98 a1       	ldd	r25, Y+32	; 0x20
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <Create_Password+0xce2>
    184c:	98 a3       	std	Y+32, r25	; 0x20
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	89 a1       	ldd	r24, Y+33	; 0x21
    1852:	9a a1       	ldd	r25, Y+34	; 0x22
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <Create_Password+0xcd6>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <Create_Password+0xd26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6b a1       	ldd	r22, Y+35	; 0x23
    1866:	7c a1       	ldd	r23, Y+36	; 0x24
    1868:	8d a1       	ldd	r24, Y+37	; 0x25
    186a:	9e a1       	ldd	r25, Y+38	; 0x26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <Create_Password+0xd1e>
    1888:	9e 8f       	std	Y+30, r25	; 0x1e
    188a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Second attempt to take password */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Re-enter The");
	LCD_displayStringRowColumn(1,0,"Same Pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    188c:	de 01       	movw	r26, r28
    188e:	ad 55       	subi	r26, 0x5D	; 93
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	ed 55       	subi	r30, 0x5D	; 93
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	8c 93       	st	X, r24
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 55       	subi	r30, 0x5D	; 93
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <Create_Password+0xd46>
    18aa:	8e cd       	rjmp	.-1252   	; 0x13c8 <Create_Password+0x862>
		LCD_displayStringRowColumn(1,count_pass+10,"*");
		_delay_ms(70);
		re_pass= re_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    18ac:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    18b0:	22 e7       	ldi	r18, 0x72	; 114
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    18be:	78 c0       	rjmp	.+240    	; 0x19b0 <Create_Password+0xe4a>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    18c0:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    18c4:	fe 01       	movw	r30, r28
    18c6:	eb 55       	subi	r30, 0x5B	; 91
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a8 e4       	ldi	r26, 0x48	; 72
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	89 8f       	std	Y+25, r24	; 0x19
    18d6:	9a 8f       	std	Y+26, r25	; 0x1a
    18d8:	ab 8f       	std	Y+27, r26	; 0x1b
    18da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8d 8b       	std	Y+21, r24	; 0x15
    18f6:	9e 8b       	std	Y+22, r25	; 0x16
    18f8:	af 8b       	std	Y+23, r26	; 0x17
    18fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <Create_Password+0xdb8>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	3f c0       	rjmp	.+126    	; 0x199c <Create_Password+0xe36>
	else if (__tmp > 65535)
    191e:	6d 89       	ldd	r22, Y+21	; 0x15
    1920:	7e 89       	ldd	r23, Y+22	; 0x16
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <Create_Password+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	69 8d       	ldd	r22, Y+25	; 0x19
    1938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9c 8b       	std	Y+20, r25	; 0x14
    195c:	8b 8b       	std	Y+19, r24	; 0x13
    195e:	0f c0       	rjmp	.+30     	; 0x197e <Create_Password+0xe18>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <Create_Password+0xe06>
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <Create_Password+0xdfa>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <Create_Password+0xe4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 89       	ldd	r25, Y+16	; 0x10
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <Create_Password+0xe42>
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
		re_pass= re_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 55       	subi	r30, 0x5B	; 91
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 33       	cpi	r24, 0x3D	; 61
    19ba:	09 f0       	breq	.+2      	; 0x19be <Create_Password+0xe58>
    19bc:	81 cf       	rjmp	.-254    	; 0x18c0 <Create_Password+0xd5a>
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}


	if(re_pass == new_pass)
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 56       	subi	r30, 0x65	; 101
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	de 01       	movw	r26, r28
    19c6:	a1 56       	subi	r26, 0x61	; 97
    19c8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 81       	ldd	r20, Z+2	; 0x02
    19d0:	53 81       	ldd	r21, Z+3	; 0x03
    19d2:	8d 91       	ld	r24, X+
    19d4:	9d 91       	ld	r25, X+
    19d6:	0d 90       	ld	r0, X+
    19d8:	bc 91       	ld	r27, X
    19da:	a0 2d       	mov	r26, r0
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	4a 07       	cpc	r20, r26
    19e2:	5b 07       	cpc	r21, r27
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <Create_Password+0xe82>
    19e6:	55 c0       	rjmp	.+170    	; 0x1a92 <Create_Password+0xf2c>
	{
		/* Send ACK to HMI ECU to know that we will
		 *start to save the new password */
		UART_sendByte(SAVE);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>
		for(count_pass=0;count_pass<5;count_pass++)
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 55       	subi	r30, 0x5D	; 93
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
    19f6:	41 c0       	rjmp	.+130    	; 0x1a7a <Create_Password+0xf14>
		{
			pass = re_pass % 10;
    19f8:	fe 01       	movw	r30, r28
    19fa:	e5 56       	subi	r30, 0x65	; 101
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	a2 81       	ldd	r26, Z+2	; 0x02
    1a04:	b3 81       	ldd	r27, Z+3	; 0x03
    1a06:	2a e0       	ldi	r18, 0x0A	; 10
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 a5 21 	call	0x434a	; 0x434a <__divmodsi4>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ec 55       	subi	r30, 0x5C	; 92
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
			/* wait ACK from control ECU that he is ready
			 * to receive password */
			while(UART_recieveByte()!= M2_CONTROL_READY);
    1a22:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    1a26:	80 32       	cpi	r24, 0x20	; 32
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <Create_Password+0xebc>
			UART_sendByte(pass);
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ec 55       	subi	r30, 0x5C	; 92
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>
			re_pass /= 10;
    1a36:	8e 01       	movw	r16, r28
    1a38:	05 56       	subi	r16, 0x65	; 101
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e5 56       	subi	r30, 0x65	; 101
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	a2 81       	ldd	r26, Z+2	; 0x02
    1a48:	b3 81       	ldd	r27, Z+3	; 0x03
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 a5 21 	call	0x434a	; 0x434a <__divmodsi4>
    1a5a:	da 01       	movw	r26, r20
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	f8 01       	movw	r30, r16
    1a60:	80 83       	st	Z, r24
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	a2 83       	std	Z+2, r26	; 0x02
    1a66:	b3 83       	std	Z+3, r27	; 0x03
	if(re_pass == new_pass)
	{
		/* Send ACK to HMI ECU to know that we will
		 *start to save the new password */
		UART_sendByte(SAVE);
		for(count_pass=0;count_pass<5;count_pass++)
    1a68:	de 01       	movw	r26, r28
    1a6a:	ad 55       	subi	r26, 0x5D	; 93
    1a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ed 55       	subi	r30, 0x5D	; 93
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	8c 93       	st	X, r24
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ed 55       	subi	r30, 0x5D	; 93
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	85 30       	cpi	r24, 0x05	; 5
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <Create_Password+0xf22>
    1a86:	b8 cf       	rjmp	.-144    	; 0x19f8 <Create_Password+0xe92>
			re_pass /= 10;
		}

		/* Receive ACK from HMI ECU to know that password
		 *saved successful */
		while(UART_recieveByte()!= END_SAVING);
    1a88:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <Create_Password+0xf22>
    1a90:	7d c0       	rjmp	.+250    	; 0x1b8c <Create_Password+0x1026>
	}
	else
	{
		LCD_clearScreen();
    1a92:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"NOT MATCHING");
    1a96:	2a e9       	ldi	r18, 0x9A	; 154
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	aa ef       	ldi	r26, 0xFA	; 250
    1aaa:	b3 e4       	ldi	r27, 0x43	; 67
    1aac:	8b 87       	std	Y+11, r24	; 0x0b
    1aae:	9c 87       	std	Y+12, r25	; 0x0c
    1ab0:	ad 87       	std	Y+13, r26	; 0x0d
    1ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	98 87       	std	Y+8, r25	; 0x08
    1ad0:	a9 87       	std	Y+9, r26	; 0x09
    1ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <Create_Password+0xf90>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <Create_Password+0x100e>
	else if (__tmp > 65535)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <Create_Password+0xffa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <Create_Password+0xff0>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <Create_Password+0xfde>
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <Create_Password+0xfd2>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <Create_Password+0x1022>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <Create_Password+0x101a>
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/* start again to take password */
		Create_Password();
    1b88:	0e 94 b3 05 	call	0xb66	; 0xb66 <Create_Password>
	}
}
    1b8c:	cb 55       	subi	r28, 0x5B	; 91
    1b8e:	df 4f       	sbci	r29, 0xFF	; 255
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <Check_Password>:


/* Function to check the password */
void Check_Password(const Timer_ConfigType * Config_Ptr)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	ce 55       	subi	r28, 0x5E	; 94
    1bb2:	d0 40       	sbci	r29, 0x00	; 0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e3 5a       	subi	r30, 0xA3	; 163
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
	sint32 pass=0;
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e7 5a       	subi	r30, 0xA7	; 167
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	10 82       	st	Z, r1
    1bd0:	11 82       	std	Z+1, r1	; 0x01
    1bd2:	12 82       	std	Z+2, r1	; 0x02
    1bd4:	13 82       	std	Z+3, r1	; 0x03

	uint8 count_pass,key=0,pass_digit=0,error_pass=0;
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e9 5a       	subi	r30, 0xA9	; 169
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	10 82       	st	Z, r1
    1bde:	fe 01       	movw	r30, r28
    1be0:	ea 5a       	subi	r30, 0xAA	; 170
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	10 82       	st	Z, r1
    1be6:	fe 01       	movw	r30, r28
    1be8:	eb 5a       	subi	r30, 0xAB	; 171
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	10 82       	st	Z, r1

	/* Attempt to take password to check if it match with
	 * the system password */
	LCD_clearScreen();
    1bee:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter pass:");
    1bf2:	27 ea       	ldi	r18, 0xA7	; 167
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e8 5a       	subi	r30, 0xA8	; 168
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	10 82       	st	Z, r1
    1c08:	68 c2       	rjmp	.+1232   	; 0x20da <Check_Password+0x536>
	{
		key = KEYPAD_getPressedKey();
    1c0a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e9 5a       	subi	r30, 0xA9	; 169
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 83       	st	Z, r24
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 5a       	subi	r30, 0xAF	; 175
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a8 e4       	ldi	r26, 0x48	; 72
    1c22:	b2 e4       	ldi	r27, 0x42	; 66
    1c24:	80 83       	st	Z, r24
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	a2 83       	std	Z+2, r26	; 0x02
    1c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	03 5b       	subi	r16, 0xB3	; 179
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 5a       	subi	r30, 0xAF	; 175
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	f8 01       	movw	r30, r16
    1c52:	80 83       	st	Z, r24
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e3 5b       	subi	r30, 0xB3	; 179
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	44 f4       	brge	.+16     	; 0x1c88 <Check_Password+0xe4>
		__ticks = 1;
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
    1c86:	64 c0       	rjmp	.+200    	; 0x1d50 <Check_Password+0x1ac>
	else if (__tmp > 65535)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e3 5b       	subi	r30, 0xB3	; 179
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <Check_Password+0x104>
    1ca6:	43 c0       	rjmp	.+134    	; 0x1d2e <Check_Password+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ef 5a       	subi	r30, 0xAF	; 175
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5b       	subi	r16, 0xB5	; 181
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	1f c0       	rjmp	.+62     	; 0x1d1e <Check_Password+0x17a>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5b       	subi	r30, 0xB7	; 183
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5b       	subi	r30, 0xB7	; 183
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <Check_Password+0x154>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 5b       	subi	r30, 0xB7	; 183
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	de 01       	movw	r26, r28
    1d08:	a5 5b       	subi	r26, 0xB5	; 181
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 5b       	subi	r30, 0xB5	; 181
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 5b       	subi	r30, 0xB5	; 181
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	d1 f6       	brne	.-76     	; 0x1ce0 <Check_Password+0x13c>
    1d2c:	b4 c0       	rjmp	.+360    	; 0x1e96 <Check_Password+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	8e 01       	movw	r16, r28
    1d30:	05 5b       	subi	r16, 0xB5	; 181
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 5b       	subi	r30, 0xB3	; 179
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	80 83       	st	Z, r24
    1d50:	de 01       	movw	r26, r28
    1d52:	a9 5b       	subi	r26, 0xB9	; 185
    1d54:	bf 4f       	sbci	r27, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 5b       	subi	r30, 0xB5	; 181
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	11 96       	adiw	r26, 0x01	; 1
    1d62:	9c 93       	st	X, r25
    1d64:	8e 93       	st	-X, r24
    1d66:	fe 01       	movw	r30, r28
    1d68:	e9 5b       	subi	r30, 0xB9	; 185
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <Check_Password+0x1cc>
    1d74:	fe 01       	movw	r30, r28
    1d76:	e9 5b       	subi	r30, 0xB9	; 185
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
    1d7e:	8b c0       	rjmp	.+278    	; 0x1e96 <Check_Password+0x2f2>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    1d80:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    1d84:	fe 01       	movw	r30, r28
    1d86:	e9 5a       	subi	r30, 0xA9	; 169
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 83       	st	Z, r24
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ed 5b       	subi	r30, 0xBD	; 189
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a8 e4       	ldi	r26, 0x48	; 72
    1d98:	b2 e4       	ldi	r27, 0x42	; 66
    1d9a:	80 83       	st	Z, r24
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	a2 83       	std	Z+2, r26	; 0x02
    1da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	8e 01       	movw	r16, r28
    1da4:	01 5c       	subi	r16, 0xC1	; 193
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	fe 01       	movw	r30, r28
    1daa:	ed 5b       	subi	r30, 0xBD	; 189
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a ef       	ldi	r20, 0xFA	; 250
    1dbc:	54 e4       	ldi	r21, 0x44	; 68
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	80 83       	st	Z, r24
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	a2 83       	std	Z+2, r26	; 0x02
    1dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ff 96       	adiw	r30, 0x3f	; 63
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <Check_Password+0x252>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e af       	std	Y+62, r25	; 0x3e
    1df2:	8d af       	std	Y+61, r24	; 0x3d
    1df4:	46 c0       	rjmp	.+140    	; 0x1e82 <Check_Password+0x2de>
	else if (__tmp > 65535)
    1df6:	fe 01       	movw	r30, r28
    1df8:	ff 96       	adiw	r30, 0x3f	; 63
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	64 f5       	brge	.+88     	; 0x1e6a <Check_Password+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	fe 01       	movw	r30, r28
    1e14:	ed 5b       	subi	r30, 0xBD	; 189
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e af       	std	Y+62, r25	; 0x3e
    1e3e:	8d af       	std	Y+61, r24	; 0x3d
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <Check_Password+0x2bc>
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9c af       	std	Y+60, r25	; 0x3c
    1e48:	8b af       	std	Y+59, r24	; 0x3b
    1e4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <Check_Password+0x2aa>
    1e52:	9c af       	std	Y+60, r25	; 0x3c
    1e54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9e af       	std	Y+62, r25	; 0x3e
    1e5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <Check_Password+0x29e>
    1e68:	16 c0       	rjmp	.+44     	; 0x1e96 <Check_Password+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ff 96       	adiw	r30, 0x3f	; 63
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9e af       	std	Y+62, r25	; 0x3e
    1e80:	8d af       	std	Y+61, r24	; 0x3d
    1e82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e86:	9a af       	std	Y+58, r25	; 0x3a
    1e88:	89 af       	std	Y+57, r24	; 0x39
    1e8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <Check_Password+0x2ea>
    1e92:	9a af       	std	Y+58, r25	; 0x3a
    1e94:	89 af       	std	Y+57, r24	; 0x39
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
    1e96:	fe 01       	movw	r30, r28
    1e98:	e9 5a       	subi	r30, 0xA9	; 169
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8a 30       	cpi	r24, 0x0A	; 10
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <Check_Password+0x300>
    1ea2:	6e cf       	rjmp	.-292    	; 0x1d80 <Check_Password+0x1dc>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass,"*");
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e8 5a       	subi	r30, 0xA8	; 168
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	20 e7       	ldi	r18, 0x70	; 112
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	60 81       	ld	r22, Z
    1eb2:	a9 01       	movw	r20, r18
    1eb4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	ac e8       	ldi	r26, 0x8C	; 140
    1ebe:	b2 e4       	ldi	r27, 0x42	; 66
    1ec0:	8d ab       	std	Y+53, r24	; 0x35
    1ec2:	9e ab       	std	Y+54, r25	; 0x36
    1ec4:	af ab       	std	Y+55, r26	; 0x37
    1ec6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eca:	7e a9       	ldd	r23, Y+54	; 0x36
    1ecc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ece:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a ef       	ldi	r20, 0xFA	; 250
    1ed6:	54 e4       	ldi	r21, 0x44	; 68
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	89 ab       	std	Y+49, r24	; 0x31
    1ee2:	9a ab       	std	Y+50, r25	; 0x32
    1ee4:	ab ab       	std	Y+51, r26	; 0x33
    1ee6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eea:	7a a9       	ldd	r23, Y+50	; 0x32
    1eec:	8b a9       	ldd	r24, Y+51	; 0x33
    1eee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <Check_Password+0x366>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <Check_Password+0x3e4>
	else if (__tmp > 65535)
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <Check_Password+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6d a9       	ldd	r22, Y+53	; 0x35
    1f24:	7e a9       	ldd	r23, Y+54	; 0x36
    1f26:	8f a9       	ldd	r24, Y+55	; 0x37
    1f28:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <Check_Password+0x3c6>
    1f4c:	88 ec       	ldi	r24, 0xC8	; 200
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e a7       	std	Y+46, r25	; 0x2e
    1f52:	8d a7       	std	Y+45, r24	; 0x2d
    1f54:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f56:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <Check_Password+0x3b4>
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	98 ab       	std	Y+48, r25	; 0x30
    1f68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <Check_Password+0x3a8>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <Check_Password+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	69 a9       	ldd	r22, Y+49	; 0x31
    1f76:	7a a9       	ldd	r23, Y+50	; 0x32
    1f78:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	98 ab       	std	Y+48, r25	; 0x30
    1f86:	8f a7       	std	Y+47, r24	; 0x2f
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	9c a7       	std	Y+44, r25	; 0x2c
    1f8e:	8b a7       	std	Y+43, r24	; 0x2b
    1f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <Check_Password+0x3f0>
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(70);
		pass= pass*10 + key;
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 5a       	subi	r30, 0xA7	; 167
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	a2 81       	ldd	r26, Z+2	; 0x02
    1fa8:	b3 81       	ldd	r27, Z+3	; 0x03
    1faa:	2a e0       	ldi	r18, 0x0A	; 10
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 86 21 	call	0x430c	; 0x430c <__mulsi3>
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e9 5a       	subi	r30, 0xA9	; 169
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e0       	ldi	r26, 0x00	; 0
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 5a       	subi	r30, 0xA7	; 167
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	82 0f       	add	r24, r18
    1fd6:	93 1f       	adc	r25, r19
    1fd8:	a4 1f       	adc	r26, r20
    1fda:	b5 1f       	adc	r27, r21
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	aa e7       	ldi	r26, 0x7A	; 122
    1fea:	b3 e4       	ldi	r27, 0x43	; 67
    1fec:	8f a3       	std	Y+39, r24	; 0x27
    1fee:	98 a7       	std	Y+40, r25	; 0x28
    1ff0:	a9 a7       	std	Y+41, r26	; 0x29
    1ff2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8b a3       	std	Y+35, r24	; 0x23
    200e:	9c a3       	std	Y+36, r25	; 0x24
    2010:	ad a3       	std	Y+37, r26	; 0x25
    2012:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <Check_Password+0x492>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <Check_Password+0x510>
	else if (__tmp > 65535)
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <Check_Password+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6f a1       	ldd	r22, Y+39	; 0x27
    2050:	78 a5       	ldd	r23, Y+40	; 0x28
    2052:	89 a5       	ldd	r24, Y+41	; 0x29
    2054:	9a a5       	ldd	r25, Y+42	; 0x2a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <Check_Password+0x4f2>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	98 a3       	std	Y+32, r25	; 0x20
    207e:	8f 8f       	std	Y+31, r24	; 0x1f
    2080:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2082:	98 a1       	ldd	r25, Y+32	; 0x20
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <Check_Password+0x4e0>
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	89 a1       	ldd	r24, Y+33	; 0x21
    2098:	9a a1       	ldd	r25, Y+34	; 0x22
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <Check_Password+0x4d4>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <Check_Password+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ba:	8d 8f       	std	Y+29, r24	; 0x1d
    20bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <Check_Password+0x51c>
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Attempt to take password to check if it match with
	 * the system password */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    20c8:	de 01       	movw	r26, r28
    20ca:	a8 5a       	subi	r26, 0xA8	; 168
    20cc:	bf 4f       	sbci	r27, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e8 5a       	subi	r30, 0xA8	; 168
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	8c 93       	st	X, r24
    20da:	fe 01       	movw	r30, r28
    20dc:	e8 5a       	subi	r30, 0xA8	; 168
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	85 30       	cpi	r24, 0x05	; 5
    20e4:	08 f4       	brcc	.+2      	; 0x20e8 <Check_Password+0x544>
    20e6:	91 cd       	rjmp	.-1246   	; 0x1c0a <Check_Password+0x66>
		LCD_displayStringRowColumn(1,count_pass,"*");
		_delay_ms(70);
		pass= pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    20e8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    20ec:	22 e7       	ldi	r18, 0x72	; 114
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    20fa:	78 c0       	rjmp	.+240    	; 0x21ec <Check_Password+0x648>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    20fc:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    2100:	fe 01       	movw	r30, r28
    2102:	e9 5a       	subi	r30, 0xA9	; 169
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 83       	st	Z, r24
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a8 e4       	ldi	r26, 0x48	; 72
    210e:	b2 e4       	ldi	r27, 0x42	; 66
    2110:	89 8f       	std	Y+25, r24	; 0x19
    2112:	9a 8f       	std	Y+26, r25	; 0x1a
    2114:	ab 8f       	std	Y+27, r26	; 0x1b
    2116:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	69 8d       	ldd	r22, Y+25	; 0x19
    211a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a ef       	ldi	r20, 0xFA	; 250
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8d 8b       	std	Y+21, r24	; 0x15
    2132:	9e 8b       	std	Y+22, r25	; 0x16
    2134:	af 8b       	std	Y+23, r26	; 0x17
    2136:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2138:	6d 89       	ldd	r22, Y+21	; 0x15
    213a:	7e 89       	ldd	r23, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	2c f4       	brge	.+10     	; 0x215a <Check_Password+0x5b6>
		__ticks = 1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	3f c0       	rjmp	.+126    	; 0x21d8 <Check_Password+0x634>
	else if (__tmp > 65535)
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	4c f5       	brge	.+82     	; 0x21c4 <Check_Password+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	69 8d       	ldd	r22, Y+25	; 0x19
    2174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <Check_Password+0x616>
    219c:	88 ec       	ldi	r24, 0xC8	; 200
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9a 8b       	std	Y+18, r25	; 0x12
    21a2:	89 8b       	std	Y+17, r24	; 0x11
    21a4:	89 89       	ldd	r24, Y+17	; 0x11
    21a6:	9a 89       	ldd	r25, Y+18	; 0x12
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <Check_Password+0x604>
    21ac:	9a 8b       	std	Y+18, r25	; 0x12
    21ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f7       	brne	.-38     	; 0x219c <Check_Password+0x5f8>
    21c2:	14 c0       	rjmp	.+40     	; 0x21ec <Check_Password+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	98 8b       	std	Y+16, r25	; 0x10
    21de:	8f 87       	std	Y+15, r24	; 0x0f
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	98 89       	ldd	r25, Y+16	; 0x10
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <Check_Password+0x640>
    21e8:	98 8b       	std	Y+16, r25	; 0x10
    21ea:	8f 87       	std	Y+15, r24	; 0x0f
		pass= pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    21ec:	fe 01       	movw	r30, r28
    21ee:	e9 5a       	subi	r30, 0xA9	; 169
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	8d 33       	cpi	r24, 0x3D	; 61
    21f6:	09 f0       	breq	.+2      	; 0x21fa <Check_Password+0x656>
    21f8:	81 cf       	rjmp	.-254    	; 0x20fc <Check_Password+0x558>
		_delay_ms(50);
	}

	/* Send ACK to control ECU to
	 * start to check the password */
	UART_sendByte(CHECK_PASS);
    21fa:	84 e0       	ldi	r24, 0x04	; 4
    21fc:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>

	for(count_pass=0; count_pass<5; count_pass++)
    2200:	fe 01       	movw	r30, r28
    2202:	e8 5a       	subi	r30, 0xA8	; 168
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	10 82       	st	Z, r1
    2208:	4a c0       	rjmp	.+148    	; 0x229e <Check_Password+0x6fa>
	{
		pass_digit = pass % 10;
    220a:	fe 01       	movw	r30, r28
    220c:	e7 5a       	subi	r30, 0xA7	; 167
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	a2 81       	ldd	r26, Z+2	; 0x02
    2216:	b3 81       	ldd	r27, Z+3	; 0x03
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 a5 21 	call	0x434a	; 0x434a <__divmodsi4>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	fe 01       	movw	r30, r28
    222e:	ea 5a       	subi	r30, 0xAA	; 170
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 83       	st	Z, r24
		UART_sendByte(pass_digit);
    2234:	fe 01       	movw	r30, r28
    2236:	ea 5a       	subi	r30, 0xAA	; 170
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>

		/* Check if control ECU send ACK that password wrong */
		if(UART_recieveByte() == Error_pass)
    2240:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    2244:	88 23       	and	r24, r24
    2246:	49 f4       	brne	.+18     	; 0x225a <Check_Password+0x6b6>
		{
			error_pass ++;
    2248:	de 01       	movw	r26, r28
    224a:	ab 5a       	subi	r26, 0xAB	; 171
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	eb 5a       	subi	r30, 0xAB	; 171
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	8c 93       	st	X, r24
		}
		pass /= 10;
    225a:	8e 01       	movw	r16, r28
    225c:	07 5a       	subi	r16, 0xA7	; 167
    225e:	1f 4f       	sbci	r17, 0xFF	; 255
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5a       	subi	r30, 0xA7	; 167
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	a2 81       	ldd	r26, Z+2	; 0x02
    226c:	b3 81       	ldd	r27, Z+3	; 0x03
    226e:	2a e0       	ldi	r18, 0x0A	; 10
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 a5 21 	call	0x434a	; 0x434a <__divmodsi4>
    227e:	da 01       	movw	r26, r20
    2280:	c9 01       	movw	r24, r18
    2282:	f8 01       	movw	r30, r16
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03

	/* Send ACK to control ECU to
	 * start to check the password */
	UART_sendByte(CHECK_PASS);

	for(count_pass=0; count_pass<5; count_pass++)
    228c:	de 01       	movw	r26, r28
    228e:	a8 5a       	subi	r26, 0xA8	; 168
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e8 5a       	subi	r30, 0xA8	; 168
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	8c 93       	st	X, r24
    229e:	fe 01       	movw	r30, r28
    22a0:	e8 5a       	subi	r30, 0xA8	; 168
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	85 30       	cpi	r24, 0x05	; 5
    22a8:	08 f4       	brcc	.+2      	; 0x22ac <Check_Password+0x708>
    22aa:	af cf       	rjmp	.-162    	; 0x220a <Check_Password+0x666>
			error_pass ++;
		}
		pass /= 10;
	}

	if(error_pass != 0)
    22ac:	fe 01       	movw	r30, r28
    22ae:	eb 5a       	subi	r30, 0xAB	; 171
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	09 f4       	brne	.+2      	; 0x22ba <Check_Password+0x716>
    22b8:	ba c0       	rjmp	.+372    	; 0x242e <Check_Password+0x88a>
	{
		g_counter_error ++;
    22ba:	80 91 5c 01 	lds	r24, 0x015C
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	80 93 5c 01 	sts	0x015C, r24
		UART_sendByte(g_counter_error);
    22c4:	80 91 5c 01 	lds	r24, 0x015C
    22c8:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>

		if(g_counter_error < 3)
    22cc:	80 91 5c 01 	lds	r24, 0x015C
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <Check_Password+0x732>
    22d4:	83 c0       	rjmp	.+262    	; 0x23dc <Check_Password+0x838>
		{
			LCD_clearScreen();
    22d6:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"INCORRECT PASS");
    22da:	27 eb       	ldi	r18, 0xB7	; 183
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	a9 01       	movw	r20, r18
    22e4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	aa ef       	ldi	r26, 0xFA	; 250
    22ee:	b3 e4       	ldi	r27, 0x43	; 67
    22f0:	8b 87       	std	Y+11, r24	; 0x0b
    22f2:	9c 87       	std	Y+12, r25	; 0x0c
    22f4:	ad 87       	std	Y+13, r26	; 0x0d
    22f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8f 83       	std	Y+7, r24	; 0x07
    2312:	98 87       	std	Y+8, r25	; 0x08
    2314:	a9 87       	std	Y+9, r26	; 0x09
    2316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <Check_Password+0x796>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <Check_Password+0x814>
	else if (__tmp > 65535)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <Check_Password+0x800>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	0f c0       	rjmp	.+30     	; 0x239a <Check_Password+0x7f6>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <Check_Password+0x7e4>
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <Check_Password+0x7d8>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <Check_Password+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <Check_Password+0x820>
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			Check_Password(Config_Ptr);
    23cc:	fe 01       	movw	r30, r28
    23ce:	e3 5a       	subi	r30, 0xA3	; 163
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Check_Password>
    23da:	2e c0       	rjmp	.+92     	; 0x2438 <Check_Password+0x894>
		}
		else
		{
			LCD_clearScreen();
    23dc:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>


			Timer_init(Config_Ptr);
    23e0:	fe 01       	movw	r30, r28
    23e2:	e3 5a       	subi	r30, 0xA3	; 163
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <Timer_init>
			g_tick =0;					// Reset TIMER 1.
    23ee:	10 92 5b 01 	sts	0x015B, r1
    23f2:	10 92 5a 01 	sts	0x015A, r1
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <Check_Password+0x870>
			while (g_tick != 60)		// wait 60 seconds.
			{
				LCD_displayStringRowColumn(0,0,"System LOCKED");
    23f8:	26 ec       	ldi	r18, 0xC6	; 198
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Wait for 1 min");
    2406:	24 ed       	ldi	r18, 0xD4	; 212
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	a9 01       	movw	r20, r18
    2410:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
			LCD_clearScreen();


			Timer_init(Config_Ptr);
			g_tick =0;					// Reset TIMER 1.
			while (g_tick != 60)		// wait 60 seconds.
    2414:	80 91 5a 01 	lds	r24, 0x015A
    2418:	90 91 5b 01 	lds	r25, 0x015B
    241c:	8c 33       	cpi	r24, 0x3C	; 60
    241e:	91 05       	cpc	r25, r1
    2420:	59 f7       	brne	.-42     	; 0x23f8 <Check_Password+0x854>
			{
				LCD_displayStringRowColumn(0,0,"System LOCKED");
				LCD_displayStringRowColumn(1,0,"Wait for 1 min");
			}

			g_counter_error = 0;
    2422:	10 92 5c 01 	sts	0x015C, r1
			g_return_flag =1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 5d 01 	sts	0x015D, r24
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <Check_Password+0x894>
		}
	}
	else
	{
		UART_sendByte(4);
    242e:	84 e0       	ldi	r24, 0x04	; 4
    2430:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>
		g_counter_error = 0;
    2434:	10 92 5c 01 	sts	0x015C, r1
	}
}
    2438:	c2 5a       	subi	r28, 0xA2	; 162
    243a:	df 4f       	sbci	r29, 0xFF	; 255
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	08 95       	ret

00002450 <Open_Door>:


/* Function to open door */
void Open_Door(const Timer_ConfigType * Config_Ptr)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <Open_Door+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	/* Send ACK to control ECU that we will start
	 * the prosses to unlock the door */
	UART_sendByte(UNLOCK_DOOR);
    245e:	86 e0       	ldi	r24, 0x06	; 6
    2460:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>

	LCD_clearScreen();
    2464:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	Timer_init(Config_Ptr);
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	9a 81       	ldd	r25, Y+2	; 0x02
    246c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <Timer_init>
	g_tick =0;							// Reset TIMER 1.
    2470:	10 92 5b 01 	sts	0x015B, r1
    2474:	10 92 5a 01 	sts	0x015A, r1
    2478:	07 c0       	rjmp	.+14     	; 0x2488 <Open_Door+0x38>

	/* Display on LCD "opening door" */
	while(g_tick != 15)					// wait 15 seconds.
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
    247a:	23 ee       	ldi	r18, 0xE3	; 227
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	a9 01       	movw	r20, r18
    2484:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
	LCD_clearScreen();
	Timer_init(Config_Ptr);
	g_tick =0;							// Reset TIMER 1.

	/* Display on LCD "opening door" */
	while(g_tick != 15)					// wait 15 seconds.
    2488:	80 91 5a 01 	lds	r24, 0x015A
    248c:	90 91 5b 01 	lds	r25, 0x015B
    2490:	8f 30       	cpi	r24, 0x0F	; 15
    2492:	91 05       	cpc	r25, r1
    2494:	91 f7       	brne	.-28     	; 0x247a <Open_Door+0x2a>
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
	}

	LCD_clearScreen();
    2496:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door Opened");
    249a:	22 ef       	ldi	r18, 0xF2	; 242
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	a9 01       	movw	r20, r18
    24a4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
	g_tick =0;							// Reset TIMER 1.
    24a8:	10 92 5b 01 	sts	0x015B, r1
    24ac:	10 92 5a 01 	sts	0x015A, r1
	while(g_tick != 3);					// wait 3 seconds.
    24b0:	80 91 5a 01 	lds	r24, 0x015A
    24b4:	90 91 5b 01 	lds	r25, 0x015B
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	91 05       	cpc	r25, r1
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <Open_Door+0x60>


	/* wait ACK from control ECU to Check PIR sensor state */
	g_people_status = UART_recieveByte();
    24be:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    24c2:	80 93 5e 01 	sts	0x015E, r24

	if( g_people_status == PEOPLE_IN )
    24c6:	80 91 5e 01 	lds	r24, 0x015E
    24ca:	87 30       	cpi	r24, 0x07	; 7
    24cc:	09 f5       	brne	.+66     	; 0x2510 <Open_Door+0xc0>
	{
		g_people_status = UART_recieveByte();
    24ce:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    24d2:	80 93 5e 01 	sts	0x015E, r24
		/* Display on LCD "Wait for People to Enter" */
		LCD_clearScreen();
    24d6:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Wait for People");
    24da:	2e ef       	ldi	r18, 0xFE	; 254
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	a9 01       	movw	r20, r18
    24e4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 3, "to Enter");
    24e8:	2e e0       	ldi	r18, 0x0E	; 14
    24ea:	31 e0       	ldi	r19, 0x01	; 1
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	63 e0       	ldi	r22, 0x03	; 3
    24f0:	a9 01       	movw	r20, r18
    24f2:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
		g_people_status = UART_recieveByte();
    24f6:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    24fa:	80 93 5e 01 	sts	0x015E, r24
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <Open_Door+0xb8>
		while( g_people_status == PEOPLE_IN )
		{
			/* Keep updating the PIR sensor state */
			g_people_status = UART_recieveByte();
    2500:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    2504:	80 93 5e 01 	sts	0x015E, r24
		/* Display on LCD "Wait for People to Enter" */
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Wait for People");
		LCD_displayStringRowColumn(1, 3, "to Enter");
		g_people_status = UART_recieveByte();
		while( g_people_status == PEOPLE_IN )
    2508:	80 91 5e 01 	lds	r24, 0x015E
    250c:	87 30       	cpi	r24, 0x07	; 7
    250e:	c1 f3       	breq	.-16     	; 0x2500 <Open_Door+0xb0>
		}

	}

	/* Display on LCD closing door */
	LCD_clearScreen();
    2510:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	g_tick = 0;						// Reset TIMER 1.
    2514:	10 92 5b 01 	sts	0x015B, r1
    2518:	10 92 5a 01 	sts	0x015A, r1
    251c:	07 c0       	rjmp	.+14     	; 0x252c <Open_Door+0xdc>
	while(g_tick != 15)				// wait 15 seconds.
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
    251e:	27 e1       	ldi	r18, 0x17	; 23
    2520:	31 e0       	ldi	r19, 0x01	; 1
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	a9 01       	movw	r20, r18
    2528:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
	}

	/* Display on LCD closing door */
	LCD_clearScreen();
	g_tick = 0;						// Reset TIMER 1.
	while(g_tick != 15)				// wait 15 seconds.
    252c:	80 91 5a 01 	lds	r24, 0x015A
    2530:	90 91 5b 01 	lds	r25, 0x015B
    2534:	8f 30       	cpi	r24, 0x0F	; 15
    2536:	91 05       	cpc	r25, r1
    2538:	91 f7       	brne	.-28     	; 0x251e <Open_Door+0xce>
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
	}
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <Main_menu>:


/* Function main menu */
void Main_menu(const Timer_ConfigType * Config_Ptr)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	61 97       	sbiw	r28, 0x11	; 17
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	99 8b       	std	Y+17, r25	; 0x11
    255a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key=0;				// Variable to take value of keypad button.
    255c:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    255e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    2562:	26 e2       	ldi	r18, 0x26	; 38
    2564:	31 e0       	ldi	r19, 0x01	; 1
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	a9 01       	movw	r20, r18
    256c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2570:	24 e3       	ldi	r18, 0x34	; 52
    2572:	31 e0       	ldi	r19, 0x01	; 1
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	a9 01       	movw	r20, r18
    257a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <LCD_displayStringRowColumn>
    257e:	75 c0       	rjmp	.+234    	; 0x266a <Main_menu+0x126>

	while((key != '+') && (key != '-'))
	{
		key = KEYPAD_getPressedKey();
    2580:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <KEYPAD_getPressedKey>
    2584:	8f 87       	std	Y+15, r24	; 0x0f
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a8 e4       	ldi	r26, 0x48	; 72
    258c:	b2 e4       	ldi	r27, 0x42	; 66
    258e:	8b 87       	std	Y+11, r24	; 0x0b
    2590:	9c 87       	std	Y+12, r25	; 0x0c
    2592:	ad 87       	std	Y+13, r26	; 0x0d
    2594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	8d 85       	ldd	r24, Y+13	; 0x0d
    259c:	9e 85       	ldd	r25, Y+14	; 0x0e
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a ef       	ldi	r20, 0xFA	; 250
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8f 83       	std	Y+7, r24	; 0x07
    25b0:	98 87       	std	Y+8, r25	; 0x08
    25b2:	a9 87       	std	Y+9, r26	; 0x09
    25b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <Main_menu+0x94>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <Main_menu+0x112>
	else if (__tmp > 65535)
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <Main_menu+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <Main_menu+0xf4>
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <Main_menu+0xe2>
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <Main_menu+0xd6>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <Main_menu+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	8d 81       	ldd	r24, Y+5	; 0x05
    2658:	9e 81       	ldd	r25, Y+6	; 0x06
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <Main_menu+0x11e>
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");

	while((key != '+') && (key != '-'))
    266a:	8f 85       	ldd	r24, Y+15	; 0x0f
    266c:	8b 32       	cpi	r24, 0x2B	; 43
    266e:	21 f0       	breq	.+8      	; 0x2678 <Main_menu+0x134>
    2670:	8f 85       	ldd	r24, Y+15	; 0x0f
    2672:	8d 32       	cpi	r24, 0x2D	; 45
    2674:	09 f0       	breq	.+2      	; 0x2678 <Main_menu+0x134>
    2676:	84 cf       	rjmp	.-248    	; 0x2580 <Main_menu+0x3c>
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
	}

	/* Check the password after press key '-' or '+' */
	Check_Password(Config_Ptr);
    2678:	88 89       	ldd	r24, Y+16	; 0x10
    267a:	99 89       	ldd	r25, Y+17	; 0x11
    267c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Check_Password>
	UART_sendByte(g_return_flag);
    2680:	80 91 5d 01 	lds	r24, 0x015D
    2684:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>


	if(g_return_flag == 0)
    2688:	80 91 5d 01 	lds	r24, 0x015D
    268c:	88 23       	and	r24, r24
    268e:	71 f4       	brne	.+28     	; 0x26ac <Main_menu+0x168>
	{
		UART_sendByte(key);
    2690:	8f 85       	ldd	r24, Y+15	; 0x0f
    2692:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>
		if (key == '-')
    2696:	8f 85       	ldd	r24, Y+15	; 0x0f
    2698:	8d 32       	cpi	r24, 0x2D	; 45
    269a:	19 f4       	brne	.+6      	; 0x26a2 <Main_menu+0x15e>
		{
			/* Call function Create Password */
			Create_Password();
    269c:	0e 94 b3 05 	call	0xb66	; 0xb66 <Create_Password>
    26a0:	07 c0       	rjmp	.+14     	; 0x26b0 <Main_menu+0x16c>

		}
		else
		{
			/* Call function Open Door */
			Open_Door(Config_Ptr);
    26a2:	88 89       	ldd	r24, Y+16	; 0x10
    26a4:	99 89       	ldd	r25, Y+17	; 0x11
    26a6:	0e 94 28 12 	call	0x2450	; 0x2450 <Open_Door>
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <Main_menu+0x16c>
		}
	}
	else
	{
		g_return_flag = 0;
    26ac:	10 92 5d 01 	sts	0x015D, r1
	}

}
    26b0:	61 96       	adiw	r28, 0x11	; 17
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <main>:
/*******************************************************************************
 *                     		  Main Program                                     *
 *******************************************************************************/

int main(void)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	67 97       	sbiw	r28, 0x17	; 23
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61

	/* Initialize LCD driver */
	LCD_init();
    26d6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <LCD_init>

	/* Initialize UART driver */
	UART_ConfigType UART_Config={BIT_8 , DISABLE , BIT_1 , RATE_9600_bps};
    26da:	ce 01       	movw	r24, r28
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	9f 87       	std	Y+15, r25	; 0x0f
    26e0:	8e 87       	std	Y+14, r24	; 0x0e
    26e2:	e4 e5       	ldi	r30, 0x54	; 84
    26e4:	f1 e0       	ldi	r31, 0x01	; 1
    26e6:	f9 8b       	std	Y+17, r31	; 0x11
    26e8:	e8 8b       	std	Y+16, r30	; 0x10
    26ea:	f5 e0       	ldi	r31, 0x05	; 5
    26ec:	fa 8b       	std	Y+18, r31	; 0x12
    26ee:	e8 89       	ldd	r30, Y+16	; 0x10
    26f0:	f9 89       	ldd	r31, Y+17	; 0x11
    26f2:	00 80       	ld	r0, Z
    26f4:	88 89       	ldd	r24, Y+16	; 0x10
    26f6:	99 89       	ldd	r25, Y+17	; 0x11
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	99 8b       	std	Y+17, r25	; 0x11
    26fc:	88 8b       	std	Y+16, r24	; 0x10
    26fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    2700:	ff 85       	ldd	r31, Y+15	; 0x0f
    2702:	00 82       	st	Z, r0
    2704:	8e 85       	ldd	r24, Y+14	; 0x0e
    2706:	9f 85       	ldd	r25, Y+15	; 0x0f
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	9f 87       	std	Y+15, r25	; 0x0f
    270c:	8e 87       	std	Y+14, r24	; 0x0e
    270e:	9a 89       	ldd	r25, Y+18	; 0x12
    2710:	91 50       	subi	r25, 0x01	; 1
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	ea 89       	ldd	r30, Y+18	; 0x12
    2716:	ee 23       	and	r30, r30
    2718:	51 f7       	brne	.-44     	; 0x26ee <main+0x2c>
	UART_init(&UART_Config);
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	0e 94 94 20 	call	0x4128	; 0x4128 <UART_init>

	/* Initialize TIMER 1 driver */
	SREG |= (1<<7);						// Enable global interrupt.
    2722:	af e5       	ldi	r26, 0x5F	; 95
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	ef e5       	ldi	r30, 0x5F	; 95
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	80 68       	ori	r24, 0x80	; 128
    272e:	8c 93       	st	X, r24
	Timer_ConfigType Timer_Config = {0, 3500, TIMER_1, F_CPU_1024, COMPARE, DISCONNECTED };
    2730:	ce 01       	movw	r24, r28
    2732:	06 96       	adiw	r24, 0x06	; 6
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	ec e4       	ldi	r30, 0x4C	; 76
    273a:	f1 e0       	ldi	r31, 0x01	; 1
    273c:	fe 8b       	std	Y+22, r31	; 0x16
    273e:	ed 8b       	std	Y+21, r30	; 0x15
    2740:	f8 e0       	ldi	r31, 0x08	; 8
    2742:	ff 8b       	std	Y+23, r31	; 0x17
    2744:	ed 89       	ldd	r30, Y+21	; 0x15
    2746:	fe 89       	ldd	r31, Y+22	; 0x16
    2748:	00 80       	ld	r0, Z
    274a:	8d 89       	ldd	r24, Y+21	; 0x15
    274c:	9e 89       	ldd	r25, Y+22	; 0x16
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	9e 8b       	std	Y+22, r25	; 0x16
    2752:	8d 8b       	std	Y+21, r24	; 0x15
    2754:	eb 89       	ldd	r30, Y+19	; 0x13
    2756:	fc 89       	ldd	r31, Y+20	; 0x14
    2758:	00 82       	st	Z, r0
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	9f 89       	ldd	r25, Y+23	; 0x17
    2766:	91 50       	subi	r25, 0x01	; 1
    2768:	9f 8b       	std	Y+23, r25	; 0x17
    276a:	ef 89       	ldd	r30, Y+23	; 0x17
    276c:	ee 23       	and	r30, r30
    276e:	51 f7       	brne	.-44     	; 0x2744 <main+0x82>
	Timer_setCallBack(Calculate_time, TIMER_1);
    2770:	83 ea       	ldi	r24, 0xA3	; 163
    2772:	95 e0       	ldi	r25, 0x05	; 5
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <Timer_setCallBack>

	/* Send ACK to control ECU that HMI ECU ready after
	 * finish all Initialization for drivers */
	UART_sendByte(M1_HMI_READY);
    277a:	80 e1       	ldi	r24, 0x10	; 16
    277c:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>

	/* Create first password for the system */
	Create_Password();
    2780:	0e 94 b3 05 	call	0xb66	; 0xb66 <Create_Password>

	while(1)
	{

		Main_menu(& Timer_Config);
    2784:	ce 01       	movw	r24, r28
    2786:	06 96       	adiw	r24, 0x06	; 6
    2788:	0e 94 a2 12 	call	0x2544	; 0x2544 <Main_menu>
    278c:	fb cf       	rjmp	.-10     	; 0x2784 <main+0xc2>

0000278e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <GPIO_setupPinDirection+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <GPIO_setupPinDirection+0x8>
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	6a 83       	std	Y+2, r22	; 0x02
    27a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	88 30       	cpi	r24, 0x08	; 8
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <GPIO_setupPinDirection+0x1c>
    27a8:	d5 c0       	rjmp	.+426    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <GPIO_setupPinDirection+0x24>
    27b0:	d1 c0       	rjmp	.+418    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3d 83       	std	Y+5, r19	; 0x05
    27ba:	2c 83       	std	Y+4, r18	; 0x04
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <GPIO_setupPinDirection+0x3a>
    27c6:	43 c0       	rjmp	.+134    	; 0x284e <GPIO_setupPinDirection+0xc0>
    27c8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ca:	3d 81       	ldd	r19, Y+5	; 0x05
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <GPIO_setupPinDirection+0x4e>
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	71 f0       	breq	.+28     	; 0x27f6 <GPIO_setupPinDirection+0x68>
    27da:	bc c0       	rjmp	.+376    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
    27dc:	2c 81       	ldd	r18, Y+4	; 0x04
    27de:	3d 81       	ldd	r19, Y+5	; 0x05
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <GPIO_setupPinDirection+0x5a>
    27e6:	5f c0       	rjmp	.+190    	; 0x28a6 <GPIO_setupPinDirection+0x118>
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	83 30       	cpi	r24, 0x03	; 3
    27ee:	91 05       	cpc	r25, r1
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <GPIO_setupPinDirection+0x66>
    27f2:	85 c0       	rjmp	.+266    	; 0x28fe <GPIO_setupPinDirection+0x170>
    27f4:	af c0       	rjmp	.+350    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	a1 f4       	brne	.+40     	; 0x2824 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    27fc:	aa e3       	ldi	r26, 0x3A	; 58
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	ea e3       	ldi	r30, 0x3A	; 58
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	48 2f       	mov	r20, r24
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	02 2e       	mov	r0, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <GPIO_setupPinDirection+0x8c>
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <GPIO_setupPinDirection+0x88>
    281e:	84 2b       	or	r24, r20
    2820:	8c 93       	st	X, r24
    2822:	98 c0       	rjmp	.+304    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2824:	aa e3       	ldi	r26, 0x3A	; 58
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	ea e3       	ldi	r30, 0x3A	; 58
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	48 2f       	mov	r20, r24
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	02 2e       	mov	r0, r18
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <GPIO_setupPinDirection+0xb4>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	0a 94       	dec	r0
    2844:	e2 f7       	brpl	.-8      	; 0x283e <GPIO_setupPinDirection+0xb0>
    2846:	80 95       	com	r24
    2848:	84 23       	and	r24, r20
    284a:	8c 93       	st	X, r24
    284c:	83 c0       	rjmp	.+262    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	a1 f4       	brne	.+40     	; 0x287c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2854:	a7 e3       	ldi	r26, 0x37	; 55
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e7 e3       	ldi	r30, 0x37	; 55
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 2e       	mov	r0, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <GPIO_setupPinDirection+0xe4>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <GPIO_setupPinDirection+0xe0>
    2876:	84 2b       	or	r24, r20
    2878:	8c 93       	st	X, r24
    287a:	6c c0       	rjmp	.+216    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    287c:	a7 e3       	ldi	r26, 0x37	; 55
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e7 e3       	ldi	r30, 0x37	; 55
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	48 2f       	mov	r20, r24
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	02 2e       	mov	r0, r18
    2894:	02 c0       	rjmp	.+4      	; 0x289a <GPIO_setupPinDirection+0x10c>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	0a 94       	dec	r0
    289c:	e2 f7       	brpl	.-8      	; 0x2896 <GPIO_setupPinDirection+0x108>
    289e:	80 95       	com	r24
    28a0:	84 23       	and	r24, r20
    28a2:	8c 93       	st	X, r24
    28a4:	57 c0       	rjmp	.+174    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	a1 f4       	brne	.+40     	; 0x28d4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    28ac:	a4 e3       	ldi	r26, 0x34	; 52
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e4 e3       	ldi	r30, 0x34	; 52
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <GPIO_setupPinDirection+0x13c>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <GPIO_setupPinDirection+0x138>
    28ce:	84 2b       	or	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	40 c0       	rjmp	.+128    	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    28d4:	a4 e3       	ldi	r26, 0x34	; 52
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e4 e3       	ldi	r30, 0x34	; 52
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <GPIO_setupPinDirection+0x164>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <GPIO_setupPinDirection+0x160>
    28f6:	80 95       	com	r24
    28f8:	84 23       	and	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	2b c0       	rjmp	.+86     	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	a1 f4       	brne	.+40     	; 0x292c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2904:	a1 e3       	ldi	r26, 0x31	; 49
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e1 e3       	ldi	r30, 0x31	; 49
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_setupPinDirection+0x194>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_setupPinDirection+0x190>
    2926:	84 2b       	or	r24, r20
    2928:	8c 93       	st	X, r24
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    292c:	a1 e3       	ldi	r26, 0x31	; 49
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e1 e3       	ldi	r30, 0x31	; 49
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	02 2e       	mov	r0, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <GPIO_setupPinDirection+0x1bc>
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <GPIO_setupPinDirection+0x1b8>
    294e:	80 95       	com	r24
    2950:	84 23       	and	r24, r20
    2952:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	00 d0       	rcall	.+0      	; 0x296a <GPIO_writePin+0x6>
    296a:	00 d0       	rcall	.+0      	; 0x296c <GPIO_writePin+0x8>
    296c:	0f 92       	push	r0
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	6a 83       	std	Y+2, r22	; 0x02
    2976:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	88 30       	cpi	r24, 0x08	; 8
    297c:	08 f0       	brcs	.+2      	; 0x2980 <GPIO_writePin+0x1c>
    297e:	d5 c0       	rjmp	.+426    	; 0x2b2a <GPIO_writePin+0x1c6>
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	08 f0       	brcs	.+2      	; 0x2988 <GPIO_writePin+0x24>
    2986:	d1 c0       	rjmp	.+418    	; 0x2b2a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	3d 83       	std	Y+5, r19	; 0x05
    2990:	2c 83       	std	Y+4, r18	; 0x04
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	9d 81       	ldd	r25, Y+5	; 0x05
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	91 05       	cpc	r25, r1
    299a:	09 f4       	brne	.+2      	; 0x299e <GPIO_writePin+0x3a>
    299c:	43 c0       	rjmp	.+134    	; 0x2a24 <GPIO_writePin+0xc0>
    299e:	2c 81       	ldd	r18, Y+4	; 0x04
    29a0:	3d 81       	ldd	r19, Y+5	; 0x05
    29a2:	22 30       	cpi	r18, 0x02	; 2
    29a4:	31 05       	cpc	r19, r1
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <GPIO_writePin+0x4e>
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	9d 81       	ldd	r25, Y+5	; 0x05
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	71 f0       	breq	.+28     	; 0x29cc <GPIO_writePin+0x68>
    29b0:	bc c0       	rjmp	.+376    	; 0x2b2a <GPIO_writePin+0x1c6>
    29b2:	2c 81       	ldd	r18, Y+4	; 0x04
    29b4:	3d 81       	ldd	r19, Y+5	; 0x05
    29b6:	22 30       	cpi	r18, 0x02	; 2
    29b8:	31 05       	cpc	r19, r1
    29ba:	09 f4       	brne	.+2      	; 0x29be <GPIO_writePin+0x5a>
    29bc:	5f c0       	rjmp	.+190    	; 0x2a7c <GPIO_writePin+0x118>
    29be:	8c 81       	ldd	r24, Y+4	; 0x04
    29c0:	9d 81       	ldd	r25, Y+5	; 0x05
    29c2:	83 30       	cpi	r24, 0x03	; 3
    29c4:	91 05       	cpc	r25, r1
    29c6:	09 f4       	brne	.+2      	; 0x29ca <GPIO_writePin+0x66>
    29c8:	85 c0       	rjmp	.+266    	; 0x2ad4 <GPIO_writePin+0x170>
    29ca:	af c0       	rjmp	.+350    	; 0x2b2a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	81 30       	cpi	r24, 0x01	; 1
    29d0:	a1 f4       	brne	.+40     	; 0x29fa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    29d2:	ab e3       	ldi	r26, 0x3B	; 59
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	eb e3       	ldi	r30, 0x3B	; 59
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 2e       	mov	r0, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <GPIO_writePin+0x8c>
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	0a 94       	dec	r0
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <GPIO_writePin+0x88>
    29f4:	84 2b       	or	r24, r20
    29f6:	8c 93       	st	X, r24
    29f8:	98 c0       	rjmp	.+304    	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    29fa:	ab e3       	ldi	r26, 0x3B	; 59
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	eb e3       	ldi	r30, 0x3B	; 59
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	48 2f       	mov	r20, r24
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	02 2e       	mov	r0, r18
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <GPIO_writePin+0xb4>
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	0a 94       	dec	r0
    2a1a:	e2 f7       	brpl	.-8      	; 0x2a14 <GPIO_writePin+0xb0>
    2a1c:	80 95       	com	r24
    2a1e:	84 23       	and	r24, r20
    2a20:	8c 93       	st	X, r24
    2a22:	83 c0       	rjmp	.+262    	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	a1 f4       	brne	.+40     	; 0x2a52 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2a2a:	a8 e3       	ldi	r26, 0x38	; 56
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e8 e3       	ldi	r30, 0x38	; 56
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	48 2f       	mov	r20, r24
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 2e       	mov	r0, r18
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <GPIO_writePin+0xe4>
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	0a 94       	dec	r0
    2a4a:	e2 f7       	brpl	.-8      	; 0x2a44 <GPIO_writePin+0xe0>
    2a4c:	84 2b       	or	r24, r20
    2a4e:	8c 93       	st	X, r24
    2a50:	6c c0       	rjmp	.+216    	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2a52:	a8 e3       	ldi	r26, 0x38	; 56
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e8 e3       	ldi	r30, 0x38	; 56
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	02 2e       	mov	r0, r18
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <GPIO_writePin+0x10c>
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	0a 94       	dec	r0
    2a72:	e2 f7       	brpl	.-8      	; 0x2a6c <GPIO_writePin+0x108>
    2a74:	80 95       	com	r24
    2a76:	84 23       	and	r24, r20
    2a78:	8c 93       	st	X, r24
    2a7a:	57 c0       	rjmp	.+174    	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	a1 f4       	brne	.+40     	; 0x2aaa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2a82:	a5 e3       	ldi	r26, 0x35	; 53
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e5 e3       	ldi	r30, 0x35	; 53
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 2e       	mov	r0, r18
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <GPIO_writePin+0x13c>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	0a 94       	dec	r0
    2aa2:	e2 f7       	brpl	.-8      	; 0x2a9c <GPIO_writePin+0x138>
    2aa4:	84 2b       	or	r24, r20
    2aa6:	8c 93       	st	X, r24
    2aa8:	40 c0       	rjmp	.+128    	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2aaa:	a5 e3       	ldi	r26, 0x35	; 53
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e5 e3       	ldi	r30, 0x35	; 53
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	48 2f       	mov	r20, r24
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	02 2e       	mov	r0, r18
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <GPIO_writePin+0x164>
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	0a 94       	dec	r0
    2aca:	e2 f7       	brpl	.-8      	; 0x2ac4 <GPIO_writePin+0x160>
    2acc:	80 95       	com	r24
    2ace:	84 23       	and	r24, r20
    2ad0:	8c 93       	st	X, r24
    2ad2:	2b c0       	rjmp	.+86     	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	a1 f4       	brne	.+40     	; 0x2b02 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2ada:	a2 e3       	ldi	r26, 0x32	; 50
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e2 e3       	ldi	r30, 0x32	; 50
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	48 2f       	mov	r20, r24
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	02 2e       	mov	r0, r18
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <GPIO_writePin+0x194>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	0a 94       	dec	r0
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <GPIO_writePin+0x190>
    2afc:	84 2b       	or	r24, r20
    2afe:	8c 93       	st	X, r24
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2b02:	a2 e3       	ldi	r26, 0x32	; 50
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e2 e3       	ldi	r30, 0x32	; 50
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 2e       	mov	r0, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <GPIO_writePin+0x1bc>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	0a 94       	dec	r0
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <GPIO_writePin+0x1b8>
    2b24:	80 95       	com	r24
    2b26:	84 23       	and	r24, r20
    2b28:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <GPIO_readPin+0x6>
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <GPIO_readPin+0x8>
    2b42:	0f 92       	push	r0
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2b4c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	88 30       	cpi	r24, 0x08	; 8
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <GPIO_readPin+0x1c>
    2b54:	84 c0       	rjmp	.+264    	; 0x2c5e <GPIO_readPin+0x124>
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <GPIO_readPin+0x24>
    2b5c:	80 c0       	rjmp	.+256    	; 0x2c5e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3d 83       	std	Y+5, r19	; 0x05
    2b66:	2c 83       	std	Y+4, r18	; 0x04
    2b68:	4c 81       	ldd	r20, Y+4	; 0x04
    2b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b6c:	41 30       	cpi	r20, 0x01	; 1
    2b6e:	51 05       	cpc	r21, r1
    2b70:	79 f1       	breq	.+94     	; 0x2bd0 <GPIO_readPin+0x96>
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	82 30       	cpi	r24, 0x02	; 2
    2b78:	91 05       	cpc	r25, r1
    2b7a:	34 f4       	brge	.+12     	; 0x2b88 <GPIO_readPin+0x4e>
    2b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b80:	21 15       	cp	r18, r1
    2b82:	31 05       	cpc	r19, r1
    2b84:	69 f0       	breq	.+26     	; 0x2ba0 <GPIO_readPin+0x66>
    2b86:	6b c0       	rjmp	.+214    	; 0x2c5e <GPIO_readPin+0x124>
    2b88:	4c 81       	ldd	r20, Y+4	; 0x04
    2b8a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b8c:	42 30       	cpi	r20, 0x02	; 2
    2b8e:	51 05       	cpc	r21, r1
    2b90:	b9 f1       	breq	.+110    	; 0x2c00 <GPIO_readPin+0xc6>
    2b92:	8c 81       	ldd	r24, Y+4	; 0x04
    2b94:	9d 81       	ldd	r25, Y+5	; 0x05
    2b96:	83 30       	cpi	r24, 0x03	; 3
    2b98:	91 05       	cpc	r25, r1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <GPIO_readPin+0x64>
    2b9c:	49 c0       	rjmp	.+146    	; 0x2c30 <GPIO_readPin+0xf6>
    2b9e:	5f c0       	rjmp	.+190    	; 0x2c5e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2ba0:	e9 e3       	ldi	r30, 0x39	; 57
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a9 01       	movw	r20, r18
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <GPIO_readPin+0x7e>
    2bb4:	55 95       	asr	r21
    2bb6:	47 95       	ror	r20
    2bb8:	8a 95       	dec	r24
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <GPIO_readPin+0x7a>
    2bbc:	ca 01       	movw	r24, r20
    2bbe:	81 70       	andi	r24, 0x01	; 1
    2bc0:	90 70       	andi	r25, 0x00	; 0
    2bc2:	88 23       	and	r24, r24
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	49 c0       	rjmp	.+146    	; 0x2c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2bcc:	19 82       	std	Y+1, r1	; 0x01
    2bce:	47 c0       	rjmp	.+142    	; 0x2c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2bd0:	e6 e3       	ldi	r30, 0x36	; 54
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a9 01       	movw	r20, r18
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <GPIO_readPin+0xae>
    2be4:	55 95       	asr	r21
    2be6:	47 95       	ror	r20
    2be8:	8a 95       	dec	r24
    2bea:	e2 f7       	brpl	.-8      	; 0x2be4 <GPIO_readPin+0xaa>
    2bec:	ca 01       	movw	r24, r20
    2bee:	81 70       	andi	r24, 0x01	; 1
    2bf0:	90 70       	andi	r25, 0x00	; 0
    2bf2:	88 23       	and	r24, r24
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	31 c0       	rjmp	.+98     	; 0x2c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2bfc:	19 82       	std	Y+1, r1	; 0x01
    2bfe:	2f c0       	rjmp	.+94     	; 0x2c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2c00:	e3 e3       	ldi	r30, 0x33	; 51
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a9 01       	movw	r20, r18
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <GPIO_readPin+0xde>
    2c14:	55 95       	asr	r21
    2c16:	47 95       	ror	r20
    2c18:	8a 95       	dec	r24
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <GPIO_readPin+0xda>
    2c1c:	ca 01       	movw	r24, r20
    2c1e:	81 70       	andi	r24, 0x01	; 1
    2c20:	90 70       	andi	r25, 0x00	; 0
    2c22:	88 23       	and	r24, r24
    2c24:	19 f0       	breq	.+6      	; 0x2c2c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	19 c0       	rjmp	.+50     	; 0x2c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c2c:	19 82       	std	Y+1, r1	; 0x01
    2c2e:	17 c0       	rjmp	.+46     	; 0x2c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2c30:	e0 e3       	ldi	r30, 0x30	; 48
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a9 01       	movw	r20, r18
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <GPIO_readPin+0x10e>
    2c44:	55 95       	asr	r21
    2c46:	47 95       	ror	r20
    2c48:	8a 95       	dec	r24
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <GPIO_readPin+0x10a>
    2c4c:	ca 01       	movw	r24, r20
    2c4e:	81 70       	andi	r24, 0x01	; 1
    2c50:	90 70       	andi	r25, 0x00	; 0
    2c52:	88 23       	and	r24, r24
    2c54:	19 f0       	breq	.+6      	; 0x2c5c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	89 83       	std	Y+1, r24	; 0x01
    2c5a:	01 c0       	rjmp	.+2      	; 0x2c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c5c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <GPIO_setupPortDirection+0x6>
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <GPIO_setupPortDirection+0x8>
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	84 30       	cpi	r24, 0x04	; 4
    2c84:	90 f5       	brcc	.+100    	; 0x2cea <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	3c 83       	std	Y+4, r19	; 0x04
    2c8e:	2b 83       	std	Y+3, r18	; 0x03
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	91 05       	cpc	r25, r1
    2c98:	d1 f0       	breq	.+52     	; 0x2cce <GPIO_setupPortDirection+0x5e>
    2c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9e:	22 30       	cpi	r18, 0x02	; 2
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	2c f4       	brge	.+10     	; 0x2cae <GPIO_setupPortDirection+0x3e>
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	61 f0       	breq	.+24     	; 0x2cc4 <GPIO_setupPortDirection+0x54>
    2cac:	1e c0       	rjmp	.+60     	; 0x2cea <GPIO_setupPortDirection+0x7a>
    2cae:	2b 81       	ldd	r18, Y+3	; 0x03
    2cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cb2:	22 30       	cpi	r18, 0x02	; 2
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	81 f0       	breq	.+32     	; 0x2cd8 <GPIO_setupPortDirection+0x68>
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	83 30       	cpi	r24, 0x03	; 3
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	81 f0       	breq	.+32     	; 0x2ce2 <GPIO_setupPortDirection+0x72>
    2cc2:	13 c0       	rjmp	.+38     	; 0x2cea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2cc4:	ea e3       	ldi	r30, 0x3A	; 58
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	80 83       	st	Z, r24
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2cce:	e7 e3       	ldi	r30, 0x37	; 55
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	80 83       	st	Z, r24
    2cd6:	09 c0       	rjmp	.+18     	; 0x2cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2cd8:	e4 e3       	ldi	r30, 0x34	; 52
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	80 83       	st	Z, r24
    2ce0:	04 c0       	rjmp	.+8      	; 0x2cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2ce2:	e1 e3       	ldi	r30, 0x31	; 49
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	80 83       	st	Z, r24
			break;
		}
	}
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <GPIO_writePort+0x6>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <GPIO_writePort+0x8>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	84 30       	cpi	r24, 0x04	; 4
    2d0c:	90 f5       	brcc	.+100    	; 0x2d72 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	3c 83       	std	Y+4, r19	; 0x04
    2d16:	2b 83       	std	Y+3, r18	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	91 05       	cpc	r25, r1
    2d20:	d1 f0       	breq	.+52     	; 0x2d56 <GPIO_writePort+0x5e>
    2d22:	2b 81       	ldd	r18, Y+3	; 0x03
    2d24:	3c 81       	ldd	r19, Y+4	; 0x04
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <GPIO_writePort+0x3e>
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	61 f0       	breq	.+24     	; 0x2d4c <GPIO_writePort+0x54>
    2d34:	1e c0       	rjmp	.+60     	; 0x2d72 <GPIO_writePort+0x7a>
    2d36:	2b 81       	ldd	r18, Y+3	; 0x03
    2d38:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3a:	22 30       	cpi	r18, 0x02	; 2
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	81 f0       	breq	.+32     	; 0x2d60 <GPIO_writePort+0x68>
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	83 30       	cpi	r24, 0x03	; 3
    2d46:	91 05       	cpc	r25, r1
    2d48:	81 f0       	breq	.+32     	; 0x2d6a <GPIO_writePort+0x72>
    2d4a:	13 c0       	rjmp	.+38     	; 0x2d72 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2d4c:	eb e3       	ldi	r30, 0x3B	; 59
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	80 83       	st	Z, r24
    2d54:	0e c0       	rjmp	.+28     	; 0x2d72 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2d56:	e8 e3       	ldi	r30, 0x38	; 56
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	80 83       	st	Z, r24
    2d5e:	09 c0       	rjmp	.+18     	; 0x2d72 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2d60:	e5 e3       	ldi	r30, 0x35	; 53
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	80 83       	st	Z, r24
    2d68:	04 c0       	rjmp	.+8      	; 0x2d72 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2d6a:	e2 e3       	ldi	r30, 0x32	; 50
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	80 83       	st	Z, r24
			break;
		}
	}
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <GPIO_readPort+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <GPIO_readPort+0x8>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2d8e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	84 30       	cpi	r24, 0x04	; 4
    2d94:	90 f5       	brcc	.+100    	; 0x2dfa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	3c 83       	std	Y+4, r19	; 0x04
    2d9e:	2b 83       	std	Y+3, r18	; 0x03
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	91 05       	cpc	r25, r1
    2da8:	d1 f0       	breq	.+52     	; 0x2dde <GPIO_readPort+0x5e>
    2daa:	2b 81       	ldd	r18, Y+3	; 0x03
    2dac:	3c 81       	ldd	r19, Y+4	; 0x04
    2dae:	22 30       	cpi	r18, 0x02	; 2
    2db0:	31 05       	cpc	r19, r1
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <GPIO_readPort+0x3e>
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	61 f0       	breq	.+24     	; 0x2dd4 <GPIO_readPort+0x54>
    2dbc:	1e c0       	rjmp	.+60     	; 0x2dfa <GPIO_readPort+0x7a>
    2dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc2:	22 30       	cpi	r18, 0x02	; 2
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	81 f0       	breq	.+32     	; 0x2de8 <GPIO_readPort+0x68>
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	83 30       	cpi	r24, 0x03	; 3
    2dce:	91 05       	cpc	r25, r1
    2dd0:	81 f0       	breq	.+32     	; 0x2df2 <GPIO_readPort+0x72>
    2dd2:	13 c0       	rjmp	.+38     	; 0x2dfa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2dd4:	e9 e3       	ldi	r30, 0x39	; 57
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	0e c0       	rjmp	.+28     	; 0x2dfa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2dde:	e6 e3       	ldi	r30, 0x36	; 54
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2de8:	e3 e3       	ldi	r30, 0x33	; 51
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	04 c0       	rjmp	.+8      	; 0x2dfa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2df2:	e0 e3       	ldi	r30, 0x30	; 48
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <KEYPAD_getPressedKey+0x6>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2e16:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2e18:	1b 82       	std	Y+3, r1	; 0x03
    2e1a:	43 c0       	rjmp	.+134    	; 0x2ea2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	98 2f       	mov	r25, r24
    2e28:	9c 5f       	subi	r25, 0xFC	; 252
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	69 2f       	mov	r22, r25
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	88 2f       	mov	r24, r24
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 01       	movw	r18, r24
    2e3c:	2c 5f       	subi	r18, 0xFC	; 252
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <KEYPAD_getPressedKey+0x40>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	2a 95       	dec	r18
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <KEYPAD_getPressedKey+0x3c>
    2e4e:	80 95       	com	r24
    2e50:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	69 81       	ldd	r22, Y+1	; 0x01
    2e56:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2e5a:	1a 82       	std	Y+2, r1	; 0x02
    2e5c:	1c c0       	rjmp	.+56     	; 0x2e96 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	6a 81       	ldd	r22, Y+2	; 0x02
    2e62:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <GPIO_readPin>
    2e66:	88 23       	and	r24, r24
    2e68:	99 f4       	brne	.+38     	; 0x2e90 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	98 2f       	mov	r25, r24
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	89 0f       	add	r24, r25
    2e7e:	8f 5f       	subi	r24, 0xFF	; 255
    2e80:	0e 94 56 17 	call	0x2eac	; 0x2eac <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	08 f3       	brcs	.-62     	; 0x2e5e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	84 30       	cpi	r24, 0x04	; 4
    2ea6:	08 f4       	brcc	.+2      	; 0x2eaa <KEYPAD_getPressedKey+0xa0>
    2ea8:	b9 cf       	rjmp	.-142    	; 0x2e1c <KEYPAD_getPressedKey+0x12>
    2eaa:	b6 cf       	rjmp	.-148    	; 0x2e18 <KEYPAD_getPressedKey+0xe>

00002eac <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2eba:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	3c 83       	std	Y+4, r19	; 0x04
    2ec4:	2b 83       	std	Y+3, r18	; 0x03
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	88 30       	cpi	r24, 0x08	; 8
    2ecc:	91 05       	cpc	r25, r1
    2ece:	09 f4       	brne	.+2      	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2ed0:	70 c0       	rjmp	.+224    	; 0x2fb2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed6:	29 30       	cpi	r18, 0x09	; 9
    2ed8:	31 05       	cpc	r19, r1
    2eda:	5c f5       	brge	.+86     	; 0x2f32 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	84 30       	cpi	r24, 0x04	; 4
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ee6:	59 c0       	rjmp	.+178    	; 0x2f9a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eea:	3c 81       	ldd	r19, Y+4	; 0x04
    2eec:	25 30       	cpi	r18, 0x05	; 5
    2eee:	31 05       	cpc	r19, r1
    2ef0:	9c f4       	brge	.+38     	; 0x2f18 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	91 05       	cpc	r25, r1
    2efa:	09 f4       	brne	.+2      	; 0x2efe <KEYPAD_4x4_adjustKeyNumber+0x52>
    2efc:	48 c0       	rjmp	.+144    	; 0x2f8e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2efe:	2b 81       	ldd	r18, Y+3	; 0x03
    2f00:	3c 81       	ldd	r19, Y+4	; 0x04
    2f02:	23 30       	cpi	r18, 0x03	; 3
    2f04:	31 05       	cpc	r19, r1
    2f06:	0c f0       	brlt	.+2      	; 0x2f0a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2f08:	45 c0       	rjmp	.+138    	; 0x2f94 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	81 30       	cpi	r24, 0x01	; 1
    2f10:	91 05       	cpc	r25, r1
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2f14:	39 c0       	rjmp	.+114    	; 0x2f88 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2f16:	67 c0       	rjmp	.+206    	; 0x2fe6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2f18:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f1c:	26 30       	cpi	r18, 0x06	; 6
    2f1e:	31 05       	cpc	r19, r1
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2f22:	41 c0       	rjmp	.+130    	; 0x2fa6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	87 30       	cpi	r24, 0x07	; 7
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2f2e:	3e c0       	rjmp	.+124    	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x100>
    2f30:	37 c0       	rjmp	.+110    	; 0x2fa0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2f32:	2b 81       	ldd	r18, Y+3	; 0x03
    2f34:	3c 81       	ldd	r19, Y+4	; 0x04
    2f36:	2c 30       	cpi	r18, 0x0C	; 12
    2f38:	31 05       	cpc	r19, r1
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <KEYPAD_4x4_adjustKeyNumber+0x92>
    2f3c:	46 c0       	rjmp	.+140    	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	8d 30       	cpi	r24, 0x0D	; 13
    2f44:	91 05       	cpc	r25, r1
    2f46:	5c f4       	brge	.+22     	; 0x2f5e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2f48:	2b 81       	ldd	r18, Y+3	; 0x03
    2f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f4c:	2a 30       	cpi	r18, 0x0A	; 10
    2f4e:	31 05       	cpc	r19, r1
    2f50:	b1 f1       	breq	.+108    	; 0x2fbe <KEYPAD_4x4_adjustKeyNumber+0x112>
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	8b 30       	cpi	r24, 0x0B	; 11
    2f58:	91 05       	cpc	r25, r1
    2f5a:	a4 f5       	brge	.+104    	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2f5c:	2d c0       	rjmp	.+90     	; 0x2fb8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f60:	3c 81       	ldd	r19, Y+4	; 0x04
    2f62:	2e 30       	cpi	r18, 0x0E	; 14
    2f64:	31 05       	cpc	r19, r1
    2f66:	b9 f1       	breq	.+110    	; 0x2fd6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	8e 30       	cpi	r24, 0x0E	; 14
    2f6e:	91 05       	cpc	r25, r1
    2f70:	7c f1       	brlt	.+94     	; 0x2fd0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f72:	2b 81       	ldd	r18, Y+3	; 0x03
    2f74:	3c 81       	ldd	r19, Y+4	; 0x04
    2f76:	2f 30       	cpi	r18, 0x0F	; 15
    2f78:	31 05       	cpc	r19, r1
    2f7a:	79 f1       	breq	.+94     	; 0x2fda <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f80:	80 31       	cpi	r24, 0x10	; 16
    2f82:	91 05       	cpc	r25, r1
    2f84:	69 f1       	breq	.+90     	; 0x2fe0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f86:	2f c0       	rjmp	.+94     	; 0x2fe6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2f88:	87 e0       	ldi	r24, 0x07	; 7
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	2e c0       	rjmp	.+92     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2f8e:	88 e0       	ldi	r24, 0x08	; 8
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	2b c0       	rjmp	.+86     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2f94:	89 e0       	ldi	r24, 0x09	; 9
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	28 c0       	rjmp	.+80     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2f9a:	85 e2       	ldi	r24, 0x25	; 37
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	25 c0       	rjmp	.+74     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2fa0:	84 e0       	ldi	r24, 0x04	; 4
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	22 c0       	rjmp	.+68     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2fa6:	85 e0       	ldi	r24, 0x05	; 5
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	1f c0       	rjmp	.+62     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2fac:	86 e0       	ldi	r24, 0x06	; 6
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	1c c0       	rjmp	.+56     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2fb2:	8a e2       	ldi	r24, 0x2A	; 42
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	19 c0       	rjmp	.+50     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	16 c0       	rjmp	.+44     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	13 c0       	rjmp	.+38     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	10 c0       	rjmp	.+32     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2fca:	8d e2       	ldi	r24, 0x2D	; 45
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	0d c0       	rjmp	.+26     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2fd0:	8d e0       	ldi	r24, 0x0D	; 13
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	0a c0       	rjmp	.+20     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
    2fd8:	08 c0       	rjmp	.+16     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2fda:	8d e3       	ldi	r24, 0x3D	; 61
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	05 c0       	rjmp	.+10     	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2fe0:	8b e2       	ldi	r24, 0x2B	; 43
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	2e 97       	sbiw	r28, 0x0e	; 14
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_setupPinDirection>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 ea       	ldi	r26, 0xA0	; 160
    3028:	b1 e4       	ldi	r27, 0x41	; 65
    302a:	8b 87       	std	Y+11, r24	; 0x0b
    302c:	9c 87       	std	Y+12, r25	; 0x0c
    302e:	ad 87       	std	Y+13, r26	; 0x0d
    3030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	6b 85       	ldd	r22, Y+11	; 0x0b
    3034:	7c 85       	ldd	r23, Y+12	; 0x0c
    3036:	8d 85       	ldd	r24, Y+13	; 0x0d
    3038:	9e 85       	ldd	r25, Y+14	; 0x0e
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	4a ef       	ldi	r20, 0xFA	; 250
    3040:	54 e4       	ldi	r21, 0x44	; 68
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	8f 83       	std	Y+7, r24	; 0x07
    304c:	98 87       	std	Y+8, r25	; 0x08
    304e:	a9 87       	std	Y+9, r26	; 0x09
    3050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e8       	ldi	r20, 0x80	; 128
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3066:	88 23       	and	r24, r24
    3068:	2c f4       	brge	.+10     	; 0x3074 <LCD_init+0x7a>
		__ticks = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
    3072:	3f c0       	rjmp	.+126    	; 0x30f2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3074:	6f 81       	ldd	r22, Y+7	; 0x07
    3076:	78 85       	ldd	r23, Y+8	; 0x08
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	57 e4       	ldi	r21, 0x47	; 71
    3084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3088:	18 16       	cp	r1, r24
    308a:	4c f5       	brge	.+82     	; 0x30de <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308c:	6b 85       	ldd	r22, Y+11	; 0x0b
    308e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3090:	8d 85       	ldd	r24, Y+13	; 0x0d
    3092:	9e 85       	ldd	r25, Y+14	; 0x0e
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e2       	ldi	r20, 0x20	; 32
    309a:	51 e4       	ldi	r21, 0x41	; 65
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <LCD_init+0xda>
    30b6:	88 ec       	ldi	r24, 0xC8	; 200
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	8b 83       	std	Y+3, r24	; 0x03
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <LCD_init+0xc8>
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	69 f7       	brne	.-38     	; 0x30b6 <LCD_init+0xbc>
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	6f 81       	ldd	r22, Y+7	; 0x07
    30e0:	78 85       	ldd	r23, Y+8	; 0x08
    30e2:	89 85       	ldd	r24, Y+9	; 0x09
    30e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	9e 81       	ldd	r25, Y+6	; 0x06
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	9a 81       	ldd	r25, Y+2	; 0x02
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LCD_init+0x104>
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	6f ef       	ldi	r22, 0xFF	; 255
    310a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    310e:	88 e3       	ldi	r24, 0x38	; 56
    3110:	0e 94 99 18 	call	0x3132	; 0x3132 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3114:	8c e0       	ldi	r24, 0x0C	; 12
    3116:	0e 94 99 18 	call	0x3132	; 0x3132 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	0e 94 99 18 	call	0x3132	; 0x3132 <LCD_sendCommand>
}
    3120:	2e 96       	adiw	r28, 0x0e	; 14
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	e9 97       	sbiw	r28, 0x39	; 57
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a0 e8       	ldi	r26, 0x80	; 128
    3158:	bf e3       	ldi	r27, 0x3F	; 63
    315a:	8d ab       	std	Y+53, r24	; 0x35
    315c:	9e ab       	std	Y+54, r25	; 0x36
    315e:	af ab       	std	Y+55, r26	; 0x37
    3160:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3162:	6d a9       	ldd	r22, Y+53	; 0x35
    3164:	7e a9       	ldd	r23, Y+54	; 0x36
    3166:	8f a9       	ldd	r24, Y+55	; 0x37
    3168:	98 ad       	ldd	r25, Y+56	; 0x38
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a ef       	ldi	r20, 0xFA	; 250
    3170:	54 e4       	ldi	r21, 0x44	; 68
    3172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	89 ab       	std	Y+49, r24	; 0x31
    317c:	9a ab       	std	Y+50, r25	; 0x32
    317e:	ab ab       	std	Y+51, r26	; 0x33
    3180:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3182:	69 a9       	ldd	r22, Y+49	; 0x31
    3184:	7a a9       	ldd	r23, Y+50	; 0x32
    3186:	8b a9       	ldd	r24, Y+51	; 0x33
    3188:	9c a9       	ldd	r25, Y+52	; 0x34
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	5f e3       	ldi	r21, 0x3F	; 63
    3192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3196:	88 23       	and	r24, r24
    3198:	2c f4       	brge	.+10     	; 0x31a4 <LCD_sendCommand+0x72>
		__ticks = 1;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	98 ab       	std	Y+48, r25	; 0x30
    31a0:	8f a7       	std	Y+47, r24	; 0x2f
    31a2:	3f c0       	rjmp	.+126    	; 0x3222 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    31a4:	69 a9       	ldd	r22, Y+49	; 0x31
    31a6:	7a a9       	ldd	r23, Y+50	; 0x32
    31a8:	8b a9       	ldd	r24, Y+51	; 0x33
    31aa:	9c a9       	ldd	r25, Y+52	; 0x34
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	3f ef       	ldi	r19, 0xFF	; 255
    31b0:	4f e7       	ldi	r20, 0x7F	; 127
    31b2:	57 e4       	ldi	r21, 0x47	; 71
    31b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b8:	18 16       	cp	r1, r24
    31ba:	4c f5       	brge	.+82     	; 0x320e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31bc:	6d a9       	ldd	r22, Y+53	; 0x35
    31be:	7e a9       	ldd	r23, Y+54	; 0x36
    31c0:	8f a9       	ldd	r24, Y+55	; 0x37
    31c2:	98 ad       	ldd	r25, Y+56	; 0x38
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	bc 01       	movw	r22, r24
    31d6:	cd 01       	movw	r24, r26
    31d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	98 ab       	std	Y+48, r25	; 0x30
    31e2:	8f a7       	std	Y+47, r24	; 0x2f
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <LCD_sendCommand+0xd2>
    31e6:	88 ec       	ldi	r24, 0xC8	; 200
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9e a7       	std	Y+46, r25	; 0x2e
    31ec:	8d a7       	std	Y+45, r24	; 0x2d
    31ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    31f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <LCD_sendCommand+0xc0>
    31f6:	9e a7       	std	Y+46, r25	; 0x2e
    31f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    31fc:	98 a9       	ldd	r25, Y+48	; 0x30
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	98 ab       	std	Y+48, r25	; 0x30
    3202:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3204:	8f a5       	ldd	r24, Y+47	; 0x2f
    3206:	98 a9       	ldd	r25, Y+48	; 0x30
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	69 f7       	brne	.-38     	; 0x31e6 <LCD_sendCommand+0xb4>
    320c:	14 c0       	rjmp	.+40     	; 0x3236 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320e:	69 a9       	ldd	r22, Y+49	; 0x31
    3210:	7a a9       	ldd	r23, Y+50	; 0x32
    3212:	8b a9       	ldd	r24, Y+51	; 0x33
    3214:	9c a9       	ldd	r25, Y+52	; 0x34
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	98 ab       	std	Y+48, r25	; 0x30
    3220:	8f a7       	std	Y+47, r24	; 0x2f
    3222:	8f a5       	ldd	r24, Y+47	; 0x2f
    3224:	98 a9       	ldd	r25, Y+48	; 0x30
    3226:	9c a7       	std	Y+44, r25	; 0x2c
    3228:	8b a7       	std	Y+43, r24	; 0x2b
    322a:	8b a5       	ldd	r24, Y+43	; 0x2b
    322c:	9c a5       	ldd	r25, Y+44	; 0x2c
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <LCD_sendCommand+0xfc>
    3232:	9c a7       	std	Y+44, r25	; 0x2c
    3234:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3236:	82 e0       	ldi	r24, 0x02	; 2
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e8       	ldi	r26, 0x80	; 128
    3246:	bf e3       	ldi	r27, 0x3F	; 63
    3248:	8f a3       	std	Y+39, r24	; 0x27
    324a:	98 a7       	std	Y+40, r25	; 0x28
    324c:	a9 a7       	std	Y+41, r26	; 0x29
    324e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	6f a1       	ldd	r22, Y+39	; 0x27
    3252:	78 a5       	ldd	r23, Y+40	; 0x28
    3254:	89 a5       	ldd	r24, Y+41	; 0x29
    3256:	9a a5       	ldd	r25, Y+42	; 0x2a
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4a ef       	ldi	r20, 0xFA	; 250
    325e:	54 e4       	ldi	r21, 0x44	; 68
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	8b a3       	std	Y+35, r24	; 0x23
    326a:	9c a3       	std	Y+36, r25	; 0x24
    326c:	ad a3       	std	Y+37, r26	; 0x25
    326e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3270:	6b a1       	ldd	r22, Y+35	; 0x23
    3272:	7c a1       	ldd	r23, Y+36	; 0x24
    3274:	8d a1       	ldd	r24, Y+37	; 0x25
    3276:	9e a1       	ldd	r25, Y+38	; 0x26
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e8       	ldi	r20, 0x80	; 128
    327e:	5f e3       	ldi	r21, 0x3F	; 63
    3280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3284:	88 23       	and	r24, r24
    3286:	2c f4       	brge	.+10     	; 0x3292 <LCD_sendCommand+0x160>
		__ticks = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9a a3       	std	Y+34, r25	; 0x22
    328e:	89 a3       	std	Y+33, r24	; 0x21
    3290:	3f c0       	rjmp	.+126    	; 0x3310 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3292:	6b a1       	ldd	r22, Y+35	; 0x23
    3294:	7c a1       	ldd	r23, Y+36	; 0x24
    3296:	8d a1       	ldd	r24, Y+37	; 0x25
    3298:	9e a1       	ldd	r25, Y+38	; 0x26
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	3f ef       	ldi	r19, 0xFF	; 255
    329e:	4f e7       	ldi	r20, 0x7F	; 127
    32a0:	57 e4       	ldi	r21, 0x47	; 71
    32a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a6:	18 16       	cp	r1, r24
    32a8:	4c f5       	brge	.+82     	; 0x32fc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32aa:	6f a1       	ldd	r22, Y+39	; 0x27
    32ac:	78 a5       	ldd	r23, Y+40	; 0x28
    32ae:	89 a5       	ldd	r24, Y+41	; 0x29
    32b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e2       	ldi	r20, 0x20	; 32
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9a a3       	std	Y+34, r25	; 0x22
    32d0:	89 a3       	std	Y+33, r24	; 0x21
    32d2:	0f c0       	rjmp	.+30     	; 0x32f2 <LCD_sendCommand+0x1c0>
    32d4:	88 ec       	ldi	r24, 0xC8	; 200
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	98 a3       	std	Y+32, r25	; 0x20
    32da:	8f 8f       	std	Y+31, r24	; 0x1f
    32dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32de:	98 a1       	ldd	r25, Y+32	; 0x20
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <LCD_sendCommand+0x1ae>
    32e4:	98 a3       	std	Y+32, r25	; 0x20
    32e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ea:	9a a1       	ldd	r25, Y+34	; 0x22
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	9a a3       	std	Y+34, r25	; 0x22
    32f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f2:	89 a1       	ldd	r24, Y+33	; 0x21
    32f4:	9a a1       	ldd	r25, Y+34	; 0x22
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	69 f7       	brne	.-38     	; 0x32d4 <LCD_sendCommand+0x1a2>
    32fa:	14 c0       	rjmp	.+40     	; 0x3324 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fc:	6b a1       	ldd	r22, Y+35	; 0x23
    32fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3300:	8d a1       	ldd	r24, Y+37	; 0x25
    3302:	9e a1       	ldd	r25, Y+38	; 0x26
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9a a3       	std	Y+34, r25	; 0x22
    330e:	89 a3       	std	Y+33, r24	; 0x21
    3310:	89 a1       	ldd	r24, Y+33	; 0x21
    3312:	9a a1       	ldd	r25, Y+34	; 0x22
    3314:	9e 8f       	std	Y+30, r25	; 0x1e
    3316:	8d 8f       	std	Y+29, r24	; 0x1d
    3318:	8d 8d       	ldd	r24, Y+29	; 0x1d
    331a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <LCD_sendCommand+0x1ea>
    3320:	9e 8f       	std	Y+30, r25	; 0x1e
    3322:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	69 ad       	ldd	r22, Y+57	; 0x39
    3328:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <GPIO_writePort>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a0 e8       	ldi	r26, 0x80	; 128
    3332:	bf e3       	ldi	r27, 0x3F	; 63
    3334:	89 8f       	std	Y+25, r24	; 0x19
    3336:	9a 8f       	std	Y+26, r25	; 0x1a
    3338:	ab 8f       	std	Y+27, r26	; 0x1b
    333a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333c:	69 8d       	ldd	r22, Y+25	; 0x19
    333e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	4a ef       	ldi	r20, 0xFA	; 250
    334a:	54 e4       	ldi	r21, 0x44	; 68
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	8d 8b       	std	Y+21, r24	; 0x15
    3356:	9e 8b       	std	Y+22, r25	; 0x16
    3358:	af 8b       	std	Y+23, r26	; 0x17
    335a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    335c:	6d 89       	ldd	r22, Y+21	; 0x15
    335e:	7e 89       	ldd	r23, Y+22	; 0x16
    3360:	8f 89       	ldd	r24, Y+23	; 0x17
    3362:	98 8d       	ldd	r25, Y+24	; 0x18
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3370:	88 23       	and	r24, r24
    3372:	2c f4       	brge	.+10     	; 0x337e <LCD_sendCommand+0x24c>
		__ticks = 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	9c 8b       	std	Y+20, r25	; 0x14
    337a:	8b 8b       	std	Y+19, r24	; 0x13
    337c:	3f c0       	rjmp	.+126    	; 0x33fc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    337e:	6d 89       	ldd	r22, Y+21	; 0x15
    3380:	7e 89       	ldd	r23, Y+22	; 0x16
    3382:	8f 89       	ldd	r24, Y+23	; 0x17
    3384:	98 8d       	ldd	r25, Y+24	; 0x18
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	57 e4       	ldi	r21, 0x47	; 71
    338e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	4c f5       	brge	.+82     	; 0x33e8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3396:	69 8d       	ldd	r22, Y+25	; 0x19
    3398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e2       	ldi	r20, 0x20	; 32
    33a4:	51 e4       	ldi	r21, 0x41	; 65
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9c 8b       	std	Y+20, r25	; 0x14
    33bc:	8b 8b       	std	Y+19, r24	; 0x13
    33be:	0f c0       	rjmp	.+30     	; 0x33de <LCD_sendCommand+0x2ac>
    33c0:	88 ec       	ldi	r24, 0xC8	; 200
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9a 8b       	std	Y+18, r25	; 0x12
    33c6:	89 8b       	std	Y+17, r24	; 0x11
    33c8:	89 89       	ldd	r24, Y+17	; 0x11
    33ca:	9a 89       	ldd	r25, Y+18	; 0x12
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <LCD_sendCommand+0x29a>
    33d0:	9a 8b       	std	Y+18, r25	; 0x12
    33d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d4:	8b 89       	ldd	r24, Y+19	; 0x13
    33d6:	9c 89       	ldd	r25, Y+20	; 0x14
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	9c 8b       	std	Y+20, r25	; 0x14
    33dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33de:	8b 89       	ldd	r24, Y+19	; 0x13
    33e0:	9c 89       	ldd	r25, Y+20	; 0x14
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	69 f7       	brne	.-38     	; 0x33c0 <LCD_sendCommand+0x28e>
    33e6:	14 c0       	rjmp	.+40     	; 0x3410 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ea:	7e 89       	ldd	r23, Y+22	; 0x16
    33ec:	8f 89       	ldd	r24, Y+23	; 0x17
    33ee:	98 8d       	ldd	r25, Y+24	; 0x18
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9c 8b       	std	Y+20, r25	; 0x14
    33fa:	8b 8b       	std	Y+19, r24	; 0x13
    33fc:	8b 89       	ldd	r24, Y+19	; 0x13
    33fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3400:	98 8b       	std	Y+16, r25	; 0x10
    3402:	8f 87       	std	Y+15, r24	; 0x0f
    3404:	8f 85       	ldd	r24, Y+15	; 0x0f
    3406:	98 89       	ldd	r25, Y+16	; 0x10
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <LCD_sendCommand+0x2d6>
    340c:	98 8b       	std	Y+16, r25	; 0x10
    340e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3410:	82 e0       	ldi	r24, 0x02	; 2
    3412:	61 e0       	ldi	r22, 0x01	; 1
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	a0 e8       	ldi	r26, 0x80	; 128
    3420:	bf e3       	ldi	r27, 0x3F	; 63
    3422:	8b 87       	std	Y+11, r24	; 0x0b
    3424:	9c 87       	std	Y+12, r25	; 0x0c
    3426:	ad 87       	std	Y+13, r26	; 0x0d
    3428:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	4a ef       	ldi	r20, 0xFA	; 250
    3438:	54 e4       	ldi	r21, 0x44	; 68
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	8f 83       	std	Y+7, r24	; 0x07
    3444:	98 87       	std	Y+8, r25	; 0x08
    3446:	a9 87       	std	Y+9, r26	; 0x09
    3448:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    344a:	6f 81       	ldd	r22, Y+7	; 0x07
    344c:	78 85       	ldd	r23, Y+8	; 0x08
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e8       	ldi	r20, 0x80	; 128
    3458:	5f e3       	ldi	r21, 0x3F	; 63
    345a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    345e:	88 23       	and	r24, r24
    3460:	2c f4       	brge	.+10     	; 0x346c <LCD_sendCommand+0x33a>
		__ticks = 1;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9e 83       	std	Y+6, r25	; 0x06
    3468:	8d 83       	std	Y+5, r24	; 0x05
    346a:	3f c0       	rjmp	.+126    	; 0x34ea <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	3f ef       	ldi	r19, 0xFF	; 255
    3478:	4f e7       	ldi	r20, 0x7F	; 127
    347a:	57 e4       	ldi	r21, 0x47	; 71
    347c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3480:	18 16       	cp	r1, r24
    3482:	4c f5       	brge	.+82     	; 0x34d6 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3484:	6b 85       	ldd	r22, Y+11	; 0x0b
    3486:	7c 85       	ldd	r23, Y+12	; 0x0c
    3488:	8d 85       	ldd	r24, Y+13	; 0x0d
    348a:	9e 85       	ldd	r25, Y+14	; 0x0e
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e2       	ldi	r20, 0x20	; 32
    3492:	51 e4       	ldi	r21, 0x41	; 65
    3494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <LCD_sendCommand+0x39a>
    34ae:	88 ec       	ldi	r24, 0xC8	; 200
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <LCD_sendCommand+0x388>
    34be:	9c 83       	std	Y+4, r25	; 0x04
    34c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	9e 81       	ldd	r25, Y+6	; 0x06
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	69 f7       	brne	.-38     	; 0x34ae <LCD_sendCommand+0x37c>
    34d4:	14 c0       	rjmp	.+40     	; 0x34fe <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9e 83       	std	Y+6, r25	; 0x06
    34e8:	8d 83       	std	Y+5, r24	; 0x05
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <LCD_sendCommand+0x3c4>
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    34fe:	e9 96       	adiw	r28, 0x39	; 57
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	e9 97       	sbiw	r28, 0x39	; 57
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	41 e0       	ldi	r20, 0x01	; 1
    352c:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a0 e8       	ldi	r26, 0x80	; 128
    3536:	bf e3       	ldi	r27, 0x3F	; 63
    3538:	8d ab       	std	Y+53, r24	; 0x35
    353a:	9e ab       	std	Y+54, r25	; 0x36
    353c:	af ab       	std	Y+55, r26	; 0x37
    353e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3540:	6d a9       	ldd	r22, Y+53	; 0x35
    3542:	7e a9       	ldd	r23, Y+54	; 0x36
    3544:	8f a9       	ldd	r24, Y+55	; 0x37
    3546:	98 ad       	ldd	r25, Y+56	; 0x38
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4a ef       	ldi	r20, 0xFA	; 250
    354e:	54 e4       	ldi	r21, 0x44	; 68
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	89 ab       	std	Y+49, r24	; 0x31
    355a:	9a ab       	std	Y+50, r25	; 0x32
    355c:	ab ab       	std	Y+51, r26	; 0x33
    355e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3560:	69 a9       	ldd	r22, Y+49	; 0x31
    3562:	7a a9       	ldd	r23, Y+50	; 0x32
    3564:	8b a9       	ldd	r24, Y+51	; 0x33
    3566:	9c a9       	ldd	r25, Y+52	; 0x34
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3574:	88 23       	and	r24, r24
    3576:	2c f4       	brge	.+10     	; 0x3582 <LCD_displayCharacter+0x72>
		__ticks = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	98 ab       	std	Y+48, r25	; 0x30
    357e:	8f a7       	std	Y+47, r24	; 0x2f
    3580:	3f c0       	rjmp	.+126    	; 0x3600 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3582:	69 a9       	ldd	r22, Y+49	; 0x31
    3584:	7a a9       	ldd	r23, Y+50	; 0x32
    3586:	8b a9       	ldd	r24, Y+51	; 0x33
    3588:	9c a9       	ldd	r25, Y+52	; 0x34
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	4c f5       	brge	.+82     	; 0x35ec <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	6d a9       	ldd	r22, Y+53	; 0x35
    359c:	7e a9       	ldd	r23, Y+54	; 0x36
    359e:	8f a9       	ldd	r24, Y+55	; 0x37
    35a0:	98 ad       	ldd	r25, Y+56	; 0x38
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e2       	ldi	r20, 0x20	; 32
    35a8:	51 e4       	ldi	r21, 0x41	; 65
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	bc 01       	movw	r22, r24
    35b4:	cd 01       	movw	r24, r26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	98 ab       	std	Y+48, r25	; 0x30
    35c0:	8f a7       	std	Y+47, r24	; 0x2f
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <LCD_displayCharacter+0xd2>
    35c4:	88 ec       	ldi	r24, 0xC8	; 200
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	9e a7       	std	Y+46, r25	; 0x2e
    35ca:	8d a7       	std	Y+45, r24	; 0x2d
    35cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    35ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_displayCharacter+0xc0>
    35d4:	9e a7       	std	Y+46, r25	; 0x2e
    35d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35da:	98 a9       	ldd	r25, Y+48	; 0x30
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	98 ab       	std	Y+48, r25	; 0x30
    35e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e4:	98 a9       	ldd	r25, Y+48	; 0x30
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	69 f7       	brne	.-38     	; 0x35c4 <LCD_displayCharacter+0xb4>
    35ea:	14 c0       	rjmp	.+40     	; 0x3614 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ec:	69 a9       	ldd	r22, Y+49	; 0x31
    35ee:	7a a9       	ldd	r23, Y+50	; 0x32
    35f0:	8b a9       	ldd	r24, Y+51	; 0x33
    35f2:	9c a9       	ldd	r25, Y+52	; 0x34
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	98 ab       	std	Y+48, r25	; 0x30
    35fe:	8f a7       	std	Y+47, r24	; 0x2f
    3600:	8f a5       	ldd	r24, Y+47	; 0x2f
    3602:	98 a9       	ldd	r25, Y+48	; 0x30
    3604:	9c a7       	std	Y+44, r25	; 0x2c
    3606:	8b a7       	std	Y+43, r24	; 0x2b
    3608:	8b a5       	ldd	r24, Y+43	; 0x2b
    360a:	9c a5       	ldd	r25, Y+44	; 0x2c
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <LCD_displayCharacter+0xfc>
    3610:	9c a7       	std	Y+44, r25	; 0x2c
    3612:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	61 e0       	ldi	r22, 0x01	; 1
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a0 e8       	ldi	r26, 0x80	; 128
    3624:	bf e3       	ldi	r27, 0x3F	; 63
    3626:	8f a3       	std	Y+39, r24	; 0x27
    3628:	98 a7       	std	Y+40, r25	; 0x28
    362a:	a9 a7       	std	Y+41, r26	; 0x29
    362c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362e:	6f a1       	ldd	r22, Y+39	; 0x27
    3630:	78 a5       	ldd	r23, Y+40	; 0x28
    3632:	89 a5       	ldd	r24, Y+41	; 0x29
    3634:	9a a5       	ldd	r25, Y+42	; 0x2a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	4a ef       	ldi	r20, 0xFA	; 250
    363c:	54 e4       	ldi	r21, 0x44	; 68
    363e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	8b a3       	std	Y+35, r24	; 0x23
    3648:	9c a3       	std	Y+36, r25	; 0x24
    364a:	ad a3       	std	Y+37, r26	; 0x25
    364c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    364e:	6b a1       	ldd	r22, Y+35	; 0x23
    3650:	7c a1       	ldd	r23, Y+36	; 0x24
    3652:	8d a1       	ldd	r24, Y+37	; 0x25
    3654:	9e a1       	ldd	r25, Y+38	; 0x26
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e8       	ldi	r20, 0x80	; 128
    365c:	5f e3       	ldi	r21, 0x3F	; 63
    365e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3662:	88 23       	and	r24, r24
    3664:	2c f4       	brge	.+10     	; 0x3670 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	9a a3       	std	Y+34, r25	; 0x22
    366c:	89 a3       	std	Y+33, r24	; 0x21
    366e:	3f c0       	rjmp	.+126    	; 0x36ee <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3670:	6b a1       	ldd	r22, Y+35	; 0x23
    3672:	7c a1       	ldd	r23, Y+36	; 0x24
    3674:	8d a1       	ldd	r24, Y+37	; 0x25
    3676:	9e a1       	ldd	r25, Y+38	; 0x26
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	3f ef       	ldi	r19, 0xFF	; 255
    367c:	4f e7       	ldi	r20, 0x7F	; 127
    367e:	57 e4       	ldi	r21, 0x47	; 71
    3680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3684:	18 16       	cp	r1, r24
    3686:	4c f5       	brge	.+82     	; 0x36da <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3688:	6f a1       	ldd	r22, Y+39	; 0x27
    368a:	78 a5       	ldd	r23, Y+40	; 0x28
    368c:	89 a5       	ldd	r24, Y+41	; 0x29
    368e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e2       	ldi	r20, 0x20	; 32
    3696:	51 e4       	ldi	r21, 0x41	; 65
    3698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9a a3       	std	Y+34, r25	; 0x22
    36ae:	89 a3       	std	Y+33, r24	; 0x21
    36b0:	0f c0       	rjmp	.+30     	; 0x36d0 <LCD_displayCharacter+0x1c0>
    36b2:	88 ec       	ldi	r24, 0xC8	; 200
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	98 a3       	std	Y+32, r25	; 0x20
    36b8:	8f 8f       	std	Y+31, r24	; 0x1f
    36ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36bc:	98 a1       	ldd	r25, Y+32	; 0x20
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <LCD_displayCharacter+0x1ae>
    36c2:	98 a3       	std	Y+32, r25	; 0x20
    36c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c6:	89 a1       	ldd	r24, Y+33	; 0x21
    36c8:	9a a1       	ldd	r25, Y+34	; 0x22
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	9a a3       	std	Y+34, r25	; 0x22
    36ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d0:	89 a1       	ldd	r24, Y+33	; 0x21
    36d2:	9a a1       	ldd	r25, Y+34	; 0x22
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	69 f7       	brne	.-38     	; 0x36b2 <LCD_displayCharacter+0x1a2>
    36d8:	14 c0       	rjmp	.+40     	; 0x3702 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36da:	6b a1       	ldd	r22, Y+35	; 0x23
    36dc:	7c a1       	ldd	r23, Y+36	; 0x24
    36de:	8d a1       	ldd	r24, Y+37	; 0x25
    36e0:	9e a1       	ldd	r25, Y+38	; 0x26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9a a3       	std	Y+34, r25	; 0x22
    36ec:	89 a3       	std	Y+33, r24	; 0x21
    36ee:	89 a1       	ldd	r24, Y+33	; 0x21
    36f0:	9a a1       	ldd	r25, Y+34	; 0x22
    36f2:	9e 8f       	std	Y+30, r25	; 0x1e
    36f4:	8d 8f       	std	Y+29, r24	; 0x1d
    36f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <LCD_displayCharacter+0x1ea>
    36fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3700:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	69 ad       	ldd	r22, Y+57	; 0x39
    3706:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <GPIO_writePort>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	a0 e8       	ldi	r26, 0x80	; 128
    3710:	bf e3       	ldi	r27, 0x3F	; 63
    3712:	89 8f       	std	Y+25, r24	; 0x19
    3714:	9a 8f       	std	Y+26, r25	; 0x1a
    3716:	ab 8f       	std	Y+27, r26	; 0x1b
    3718:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371a:	69 8d       	ldd	r22, Y+25	; 0x19
    371c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	4a ef       	ldi	r20, 0xFA	; 250
    3728:	54 e4       	ldi	r21, 0x44	; 68
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	8d 8b       	std	Y+21, r24	; 0x15
    3734:	9e 8b       	std	Y+22, r25	; 0x16
    3736:	af 8b       	std	Y+23, r26	; 0x17
    3738:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    373a:	6d 89       	ldd	r22, Y+21	; 0x15
    373c:	7e 89       	ldd	r23, Y+22	; 0x16
    373e:	8f 89       	ldd	r24, Y+23	; 0x17
    3740:	98 8d       	ldd	r25, Y+24	; 0x18
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e8       	ldi	r20, 0x80	; 128
    3748:	5f e3       	ldi	r21, 0x3F	; 63
    374a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374e:	88 23       	and	r24, r24
    3750:	2c f4       	brge	.+10     	; 0x375c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	9c 8b       	std	Y+20, r25	; 0x14
    3758:	8b 8b       	std	Y+19, r24	; 0x13
    375a:	3f c0       	rjmp	.+126    	; 0x37da <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    375c:	6d 89       	ldd	r22, Y+21	; 0x15
    375e:	7e 89       	ldd	r23, Y+22	; 0x16
    3760:	8f 89       	ldd	r24, Y+23	; 0x17
    3762:	98 8d       	ldd	r25, Y+24	; 0x18
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	3f ef       	ldi	r19, 0xFF	; 255
    3768:	4f e7       	ldi	r20, 0x7F	; 127
    376a:	57 e4       	ldi	r21, 0x47	; 71
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3770:	18 16       	cp	r1, r24
    3772:	4c f5       	brge	.+82     	; 0x37c6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3774:	69 8d       	ldd	r22, Y+25	; 0x19
    3776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e2       	ldi	r20, 0x20	; 32
    3782:	51 e4       	ldi	r21, 0x41	; 65
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
    379c:	0f c0       	rjmp	.+30     	; 0x37bc <LCD_displayCharacter+0x2ac>
    379e:	88 ec       	ldi	r24, 0xC8	; 200
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	9a 8b       	std	Y+18, r25	; 0x12
    37a4:	89 8b       	std	Y+17, r24	; 0x11
    37a6:	89 89       	ldd	r24, Y+17	; 0x11
    37a8:	9a 89       	ldd	r25, Y+18	; 0x12
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <LCD_displayCharacter+0x29a>
    37ae:	9a 8b       	std	Y+18, r25	; 0x12
    37b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b2:	8b 89       	ldd	r24, Y+19	; 0x13
    37b4:	9c 89       	ldd	r25, Y+20	; 0x14
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	9c 8b       	std	Y+20, r25	; 0x14
    37ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37bc:	8b 89       	ldd	r24, Y+19	; 0x13
    37be:	9c 89       	ldd	r25, Y+20	; 0x14
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	69 f7       	brne	.-38     	; 0x379e <LCD_displayCharacter+0x28e>
    37c4:	14 c0       	rjmp	.+40     	; 0x37ee <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c6:	6d 89       	ldd	r22, Y+21	; 0x15
    37c8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	98 8d       	ldd	r25, Y+24	; 0x18
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	9c 8b       	std	Y+20, r25	; 0x14
    37d8:	8b 8b       	std	Y+19, r24	; 0x13
    37da:	8b 89       	ldd	r24, Y+19	; 0x13
    37dc:	9c 89       	ldd	r25, Y+20	; 0x14
    37de:	98 8b       	std	Y+16, r25	; 0x10
    37e0:	8f 87       	std	Y+15, r24	; 0x0f
    37e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e4:	98 89       	ldd	r25, Y+16	; 0x10
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	f1 f7       	brne	.-4      	; 0x37e6 <LCD_displayCharacter+0x2d6>
    37ea:	98 8b       	std	Y+16, r25	; 0x10
    37ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_writePin>
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	a0 e8       	ldi	r26, 0x80	; 128
    37fe:	bf e3       	ldi	r27, 0x3F	; 63
    3800:	8b 87       	std	Y+11, r24	; 0x0b
    3802:	9c 87       	std	Y+12, r25	; 0x0c
    3804:	ad 87       	std	Y+13, r26	; 0x0d
    3806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3808:	6b 85       	ldd	r22, Y+11	; 0x0b
    380a:	7c 85       	ldd	r23, Y+12	; 0x0c
    380c:	8d 85       	ldd	r24, Y+13	; 0x0d
    380e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	4a ef       	ldi	r20, 0xFA	; 250
    3816:	54 e4       	ldi	r21, 0x44	; 68
    3818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	8f 83       	std	Y+7, r24	; 0x07
    3822:	98 87       	std	Y+8, r25	; 0x08
    3824:	a9 87       	std	Y+9, r26	; 0x09
    3826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3828:	6f 81       	ldd	r22, Y+7	; 0x07
    382a:	78 85       	ldd	r23, Y+8	; 0x08
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	2c f4       	brge	.+10     	; 0x384a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	9e 83       	std	Y+6, r25	; 0x06
    3846:	8d 83       	std	Y+5, r24	; 0x05
    3848:	3f c0       	rjmp	.+126    	; 0x38c8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    384a:	6f 81       	ldd	r22, Y+7	; 0x07
    384c:	78 85       	ldd	r23, Y+8	; 0x08
    384e:	89 85       	ldd	r24, Y+9	; 0x09
    3850:	9a 85       	ldd	r25, Y+10	; 0x0a
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	3f ef       	ldi	r19, 0xFF	; 255
    3856:	4f e7       	ldi	r20, 0x7F	; 127
    3858:	57 e4       	ldi	r21, 0x47	; 71
    385a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    385e:	18 16       	cp	r1, r24
    3860:	4c f5       	brge	.+82     	; 0x38b4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3862:	6b 85       	ldd	r22, Y+11	; 0x0b
    3864:	7c 85       	ldd	r23, Y+12	; 0x0c
    3866:	8d 85       	ldd	r24, Y+13	; 0x0d
    3868:	9e 85       	ldd	r25, Y+14	; 0x0e
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e2       	ldi	r20, 0x20	; 32
    3870:	51 e4       	ldi	r21, 0x41	; 65
    3872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	9e 83       	std	Y+6, r25	; 0x06
    3888:	8d 83       	std	Y+5, r24	; 0x05
    388a:	0f c0       	rjmp	.+30     	; 0x38aa <LCD_displayCharacter+0x39a>
    388c:	88 ec       	ldi	r24, 0xC8	; 200
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 83       	std	Y+4, r25	; 0x04
    3892:	8b 83       	std	Y+3, r24	; 0x03
    3894:	8b 81       	ldd	r24, Y+3	; 0x03
    3896:	9c 81       	ldd	r25, Y+4	; 0x04
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	f1 f7       	brne	.-4      	; 0x3898 <LCD_displayCharacter+0x388>
    389c:	9c 83       	std	Y+4, r25	; 0x04
    389e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a0:	8d 81       	ldd	r24, Y+5	; 0x05
    38a2:	9e 81       	ldd	r25, Y+6	; 0x06
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	9e 81       	ldd	r25, Y+6	; 0x06
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	69 f7       	brne	.-38     	; 0x388c <LCD_displayCharacter+0x37c>
    38b2:	14 c0       	rjmp	.+40     	; 0x38dc <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b4:	6f 81       	ldd	r22, Y+7	; 0x07
    38b6:	78 85       	ldd	r23, Y+8	; 0x08
    38b8:	89 85       	ldd	r24, Y+9	; 0x09
    38ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9e 83       	std	Y+6, r25	; 0x06
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <LCD_displayCharacter+0x3c4>
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    38dc:	e9 96       	adiw	r28, 0x39	; 57
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <LCD_displayString+0x6>
    38f4:	0f 92       	push	r0
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	9b 83       	std	Y+3, r25	; 0x03
    38fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38fe:	19 82       	std	Y+1, r1	; 0x01
    3900:	0e c0       	rjmp	.+28     	; 0x391e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	9b 81       	ldd	r25, Y+3	; 0x03
    390c:	fc 01       	movw	r30, r24
    390e:	e2 0f       	add	r30, r18
    3910:	f3 1f       	adc	r31, r19
    3912:	80 81       	ld	r24, Z
    3914:	0e 94 88 1a 	call	0x3510	; 0x3510 <LCD_displayCharacter>
		i++;
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	8f 5f       	subi	r24, 0xFF	; 255
    391c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	28 2f       	mov	r18, r24
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	9b 81       	ldd	r25, Y+3	; 0x03
    3928:	fc 01       	movw	r30, r24
    392a:	e2 0f       	add	r30, r18
    392c:	f3 1f       	adc	r31, r19
    392e:	80 81       	ld	r24, Z
    3930:	88 23       	and	r24, r24
    3932:	39 f7       	brne	.-50     	; 0x3902 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	cf 91       	pop	r28
    393c:	df 91       	pop	r29
    393e:	08 95       	ret

00003940 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3940:	df 93       	push	r29
    3942:	cf 93       	push	r28
    3944:	00 d0       	rcall	.+0      	; 0x3946 <LCD_moveCursor+0x6>
    3946:	00 d0       	rcall	.+0      	; 0x3948 <LCD_moveCursor+0x8>
    3948:	0f 92       	push	r0
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	8a 83       	std	Y+2, r24	; 0x02
    3950:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	28 2f       	mov	r18, r24
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	3d 83       	std	Y+5, r19	; 0x05
    395a:	2c 83       	std	Y+4, r18	; 0x04
    395c:	8c 81       	ldd	r24, Y+4	; 0x04
    395e:	9d 81       	ldd	r25, Y+5	; 0x05
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	91 05       	cpc	r25, r1
    3964:	c1 f0       	breq	.+48     	; 0x3996 <LCD_moveCursor+0x56>
    3966:	2c 81       	ldd	r18, Y+4	; 0x04
    3968:	3d 81       	ldd	r19, Y+5	; 0x05
    396a:	22 30       	cpi	r18, 0x02	; 2
    396c:	31 05       	cpc	r19, r1
    396e:	2c f4       	brge	.+10     	; 0x397a <LCD_moveCursor+0x3a>
    3970:	8c 81       	ldd	r24, Y+4	; 0x04
    3972:	9d 81       	ldd	r25, Y+5	; 0x05
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	61 f0       	breq	.+24     	; 0x3990 <LCD_moveCursor+0x50>
    3978:	19 c0       	rjmp	.+50     	; 0x39ac <LCD_moveCursor+0x6c>
    397a:	2c 81       	ldd	r18, Y+4	; 0x04
    397c:	3d 81       	ldd	r19, Y+5	; 0x05
    397e:	22 30       	cpi	r18, 0x02	; 2
    3980:	31 05       	cpc	r19, r1
    3982:	69 f0       	breq	.+26     	; 0x399e <LCD_moveCursor+0x5e>
    3984:	8c 81       	ldd	r24, Y+4	; 0x04
    3986:	9d 81       	ldd	r25, Y+5	; 0x05
    3988:	83 30       	cpi	r24, 0x03	; 3
    398a:	91 05       	cpc	r25, r1
    398c:	61 f0       	breq	.+24     	; 0x39a6 <LCD_moveCursor+0x66>
    398e:	0e c0       	rjmp	.+28     	; 0x39ac <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	89 83       	std	Y+1, r24	; 0x01
    3994:	0b c0       	rjmp	.+22     	; 0x39ac <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3996:	8b 81       	ldd	r24, Y+3	; 0x03
    3998:	80 5c       	subi	r24, 0xC0	; 192
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	07 c0       	rjmp	.+14     	; 0x39ac <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	80 5f       	subi	r24, 0xF0	; 240
    39a2:	89 83       	std	Y+1, r24	; 0x01
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	80 5b       	subi	r24, 0xB0	; 176
    39aa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	80 68       	ori	r24, 0x80	; 128
    39b0:	0e 94 99 18 	call	0x3132	; 0x3132 <LCD_sendCommand>
}
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <LCD_displayStringRowColumn+0x6>
    39ca:	00 d0       	rcall	.+0      	; 0x39cc <LCD_displayStringRowColumn+0x8>
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	6a 83       	std	Y+2, r22	; 0x02
    39d4:	5c 83       	std	Y+4, r21	; 0x04
    39d6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	6a 81       	ldd	r22, Y+2	; 0x02
    39dc:	0e 94 a0 1c 	call	0x3940	; 0x3940 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	9c 81       	ldd	r25, Y+4	; 0x04
    39e4:	0e 94 77 1c 	call	0x38ee	; 0x38ee <LCD_displayString>
}
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	62 97       	sbiw	r28, 0x12	; 18
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	9a 8b       	std	Y+18, r25	; 0x12
    3a0c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3a0e:	89 89       	ldd	r24, Y+17	; 0x11
    3a10:	9a 89       	ldd	r25, Y+18	; 0x12
    3a12:	9e 01       	movw	r18, r28
    3a14:	2f 5f       	subi	r18, 0xFF	; 255
    3a16:	3f 4f       	sbci	r19, 0xFF	; 255
    3a18:	b9 01       	movw	r22, r18
    3a1a:	4a e0       	ldi	r20, 0x0A	; 10
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	0e 94 19 22 	call	0x4432	; 0x4432 <itoa>
   LCD_displayString(buff); /* Display the string */
    3a22:	ce 01       	movw	r24, r28
    3a24:	01 96       	adiw	r24, 0x01	; 1
    3a26:	0e 94 77 1c 	call	0x38ee	; 0x38ee <LCD_displayString>
}
    3a2a:	62 96       	adiw	r28, 0x12	; 18
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	0e 94 99 18 	call	0x3132	; 0x3132 <LCD_sendCommand>
}
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	08 95       	ret

00003a50 <__vector_11>:
 *                        Functions Definitions                                *
 *******************************************************************************/

/* TIMER 0 normal mode ISR */
ISR(TIMER0_OVF_vect)
{
    3a50:	1f 92       	push	r1
    3a52:	0f 92       	push	r0
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	0f 92       	push	r0
    3a58:	11 24       	eor	r1, r1
    3a5a:	2f 93       	push	r18
    3a5c:	3f 93       	push	r19
    3a5e:	4f 93       	push	r20
    3a60:	5f 93       	push	r21
    3a62:	6f 93       	push	r22
    3a64:	7f 93       	push	r23
    3a66:	8f 93       	push	r24
    3a68:	9f 93       	push	r25
    3a6a:	af 93       	push	r26
    3a6c:	bf 93       	push	r27
    3a6e:	ef 93       	push	r30
    3a70:	ff 93       	push	r31
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3a7a:	80 91 5f 01 	lds	r24, 0x015F
    3a7e:	90 91 60 01 	lds	r25, 0x0160
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	29 f0       	breq	.+10     	; 0x3a90 <__vector_11+0x40>
	{
		(*g_callBackPtr)();
    3a86:	e0 91 5f 01 	lds	r30, 0x015F
    3a8a:	f0 91 60 01 	lds	r31, 0x0160
    3a8e:	09 95       	icall
	}
}
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	ff 91       	pop	r31
    3a96:	ef 91       	pop	r30
    3a98:	bf 91       	pop	r27
    3a9a:	af 91       	pop	r26
    3a9c:	9f 91       	pop	r25
    3a9e:	8f 91       	pop	r24
    3aa0:	7f 91       	pop	r23
    3aa2:	6f 91       	pop	r22
    3aa4:	5f 91       	pop	r21
    3aa6:	4f 91       	pop	r20
    3aa8:	3f 91       	pop	r19
    3aaa:	2f 91       	pop	r18
    3aac:	0f 90       	pop	r0
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	0f 90       	pop	r0
    3ab2:	1f 90       	pop	r1
    3ab4:	18 95       	reti

00003ab6 <__vector_10>:

/* TIMER 0 compare mode ISR */
ISR(TIMER0_COMP_vect)
{
    3ab6:	1f 92       	push	r1
    3ab8:	0f 92       	push	r0
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	0f 92       	push	r0
    3abe:	11 24       	eor	r1, r1
    3ac0:	2f 93       	push	r18
    3ac2:	3f 93       	push	r19
    3ac4:	4f 93       	push	r20
    3ac6:	5f 93       	push	r21
    3ac8:	6f 93       	push	r22
    3aca:	7f 93       	push	r23
    3acc:	8f 93       	push	r24
    3ace:	9f 93       	push	r25
    3ad0:	af 93       	push	r26
    3ad2:	bf 93       	push	r27
    3ad4:	ef 93       	push	r30
    3ad6:	ff 93       	push	r31
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3ae0:	80 91 5f 01 	lds	r24, 0x015F
    3ae4:	90 91 60 01 	lds	r25, 0x0160
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	29 f0       	breq	.+10     	; 0x3af6 <__vector_10+0x40>
	{
		(*g_callBackPtr)();
    3aec:	e0 91 5f 01 	lds	r30, 0x015F
    3af0:	f0 91 60 01 	lds	r31, 0x0160
    3af4:	09 95       	icall
	}
}
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	ff 91       	pop	r31
    3afc:	ef 91       	pop	r30
    3afe:	bf 91       	pop	r27
    3b00:	af 91       	pop	r26
    3b02:	9f 91       	pop	r25
    3b04:	8f 91       	pop	r24
    3b06:	7f 91       	pop	r23
    3b08:	6f 91       	pop	r22
    3b0a:	5f 91       	pop	r21
    3b0c:	4f 91       	pop	r20
    3b0e:	3f 91       	pop	r19
    3b10:	2f 91       	pop	r18
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	0f 90       	pop	r0
    3b18:	1f 90       	pop	r1
    3b1a:	18 95       	reti

00003b1c <__vector_9>:

/* TIMER 1 normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    3b1c:	1f 92       	push	r1
    3b1e:	0f 92       	push	r0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	0f 92       	push	r0
    3b24:	11 24       	eor	r1, r1
    3b26:	2f 93       	push	r18
    3b28:	3f 93       	push	r19
    3b2a:	4f 93       	push	r20
    3b2c:	5f 93       	push	r21
    3b2e:	6f 93       	push	r22
    3b30:	7f 93       	push	r23
    3b32:	8f 93       	push	r24
    3b34:	9f 93       	push	r25
    3b36:	af 93       	push	r26
    3b38:	bf 93       	push	r27
    3b3a:	ef 93       	push	r30
    3b3c:	ff 93       	push	r31
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3b46:	80 91 5f 01 	lds	r24, 0x015F
    3b4a:	90 91 60 01 	lds	r25, 0x0160
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	29 f0       	breq	.+10     	; 0x3b5c <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    3b52:	e0 91 5f 01 	lds	r30, 0x015F
    3b56:	f0 91 60 01 	lds	r31, 0x0160
    3b5a:	09 95       	icall
	}
}
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	ff 91       	pop	r31
    3b62:	ef 91       	pop	r30
    3b64:	bf 91       	pop	r27
    3b66:	af 91       	pop	r26
    3b68:	9f 91       	pop	r25
    3b6a:	8f 91       	pop	r24
    3b6c:	7f 91       	pop	r23
    3b6e:	6f 91       	pop	r22
    3b70:	5f 91       	pop	r21
    3b72:	4f 91       	pop	r20
    3b74:	3f 91       	pop	r19
    3b76:	2f 91       	pop	r18
    3b78:	0f 90       	pop	r0
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	0f 90       	pop	r0
    3b7e:	1f 90       	pop	r1
    3b80:	18 95       	reti

00003b82 <__vector_7>:

/* TIMER 1 compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    3b82:	1f 92       	push	r1
    3b84:	0f 92       	push	r0
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	0f 92       	push	r0
    3b8a:	11 24       	eor	r1, r1
    3b8c:	2f 93       	push	r18
    3b8e:	3f 93       	push	r19
    3b90:	4f 93       	push	r20
    3b92:	5f 93       	push	r21
    3b94:	6f 93       	push	r22
    3b96:	7f 93       	push	r23
    3b98:	8f 93       	push	r24
    3b9a:	9f 93       	push	r25
    3b9c:	af 93       	push	r26
    3b9e:	bf 93       	push	r27
    3ba0:	ef 93       	push	r30
    3ba2:	ff 93       	push	r31
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3bac:	80 91 5f 01 	lds	r24, 0x015F
    3bb0:	90 91 60 01 	lds	r25, 0x0160
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	29 f0       	breq	.+10     	; 0x3bc2 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    3bb8:	e0 91 5f 01 	lds	r30, 0x015F
    3bbc:	f0 91 60 01 	lds	r31, 0x0160
    3bc0:	09 95       	icall
	}
}
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	ff 91       	pop	r31
    3bc8:	ef 91       	pop	r30
    3bca:	bf 91       	pop	r27
    3bcc:	af 91       	pop	r26
    3bce:	9f 91       	pop	r25
    3bd0:	8f 91       	pop	r24
    3bd2:	7f 91       	pop	r23
    3bd4:	6f 91       	pop	r22
    3bd6:	5f 91       	pop	r21
    3bd8:	4f 91       	pop	r20
    3bda:	3f 91       	pop	r19
    3bdc:	2f 91       	pop	r18
    3bde:	0f 90       	pop	r0
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	0f 90       	pop	r0
    3be4:	1f 90       	pop	r1
    3be6:	18 95       	reti

00003be8 <__vector_5>:

/* TIMER 2 normal mode ISR */
ISR(TIMER2_OVF_vect)
{
    3be8:	1f 92       	push	r1
    3bea:	0f 92       	push	r0
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	0f 92       	push	r0
    3bf0:	11 24       	eor	r1, r1
    3bf2:	2f 93       	push	r18
    3bf4:	3f 93       	push	r19
    3bf6:	4f 93       	push	r20
    3bf8:	5f 93       	push	r21
    3bfa:	6f 93       	push	r22
    3bfc:	7f 93       	push	r23
    3bfe:	8f 93       	push	r24
    3c00:	9f 93       	push	r25
    3c02:	af 93       	push	r26
    3c04:	bf 93       	push	r27
    3c06:	ef 93       	push	r30
    3c08:	ff 93       	push	r31
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3c12:	80 91 5f 01 	lds	r24, 0x015F
    3c16:	90 91 60 01 	lds	r25, 0x0160
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	29 f0       	breq	.+10     	; 0x3c28 <__vector_5+0x40>
	{
		(*g_callBackPtr)();
    3c1e:	e0 91 5f 01 	lds	r30, 0x015F
    3c22:	f0 91 60 01 	lds	r31, 0x0160
    3c26:	09 95       	icall
	}
}
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	ff 91       	pop	r31
    3c2e:	ef 91       	pop	r30
    3c30:	bf 91       	pop	r27
    3c32:	af 91       	pop	r26
    3c34:	9f 91       	pop	r25
    3c36:	8f 91       	pop	r24
    3c38:	7f 91       	pop	r23
    3c3a:	6f 91       	pop	r22
    3c3c:	5f 91       	pop	r21
    3c3e:	4f 91       	pop	r20
    3c40:	3f 91       	pop	r19
    3c42:	2f 91       	pop	r18
    3c44:	0f 90       	pop	r0
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	0f 90       	pop	r0
    3c4a:	1f 90       	pop	r1
    3c4c:	18 95       	reti

00003c4e <__vector_4>:

/* TIMER 2 compare mode ISR */
ISR(TIMER2_COMP_vect)
{
    3c4e:	1f 92       	push	r1
    3c50:	0f 92       	push	r0
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	0f 92       	push	r0
    3c56:	11 24       	eor	r1, r1
    3c58:	2f 93       	push	r18
    3c5a:	3f 93       	push	r19
    3c5c:	4f 93       	push	r20
    3c5e:	5f 93       	push	r21
    3c60:	6f 93       	push	r22
    3c62:	7f 93       	push	r23
    3c64:	8f 93       	push	r24
    3c66:	9f 93       	push	r25
    3c68:	af 93       	push	r26
    3c6a:	bf 93       	push	r27
    3c6c:	ef 93       	push	r30
    3c6e:	ff 93       	push	r31
    3c70:	df 93       	push	r29
    3c72:	cf 93       	push	r28
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3c78:	80 91 5f 01 	lds	r24, 0x015F
    3c7c:	90 91 60 01 	lds	r25, 0x0160
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	29 f0       	breq	.+10     	; 0x3c8e <__vector_4+0x40>
	{
		(*g_callBackPtr)();
    3c84:	e0 91 5f 01 	lds	r30, 0x015F
    3c88:	f0 91 60 01 	lds	r31, 0x0160
    3c8c:	09 95       	icall
	}
}
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	ff 91       	pop	r31
    3c94:	ef 91       	pop	r30
    3c96:	bf 91       	pop	r27
    3c98:	af 91       	pop	r26
    3c9a:	9f 91       	pop	r25
    3c9c:	8f 91       	pop	r24
    3c9e:	7f 91       	pop	r23
    3ca0:	6f 91       	pop	r22
    3ca2:	5f 91       	pop	r21
    3ca4:	4f 91       	pop	r20
    3ca6:	3f 91       	pop	r19
    3ca8:	2f 91       	pop	r18
    3caa:	0f 90       	pop	r0
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	0f 90       	pop	r0
    3cb0:	1f 90       	pop	r1
    3cb2:	18 95       	reti

00003cb4 <Timer_init>:
 * Description :
 *  Function to initialize the Timer driver.
 *  Setup timer ID,clock type and timer mode.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	00 d0       	rcall	.+0      	; 0x3cba <Timer_init+0x6>
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <Timer_init+0x8>
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	9a 83       	std	Y+2, r25	; 0x02
    3cc2:	89 83       	std	Y+1, r24	; 0x01
	switch( Config_Ptr -> timer_ID )
    3cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc8:	84 81       	ldd	r24, Z+4	; 0x04
    3cca:	28 2f       	mov	r18, r24
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	3c 83       	std	Y+4, r19	; 0x04
    3cd0:	2b 83       	std	Y+3, r18	; 0x03
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd6:	81 30       	cpi	r24, 0x01	; 1
    3cd8:	91 05       	cpc	r25, r1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <Timer_init+0x2a>
    3cdc:	84 c0       	rjmp	.+264    	; 0x3de6 <Timer_init+0x132>
    3cde:	2b 81       	ldd	r18, Y+3	; 0x03
    3ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ce2:	22 30       	cpi	r18, 0x02	; 2
    3ce4:	31 05       	cpc	r19, r1
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <Timer_init+0x36>
    3ce8:	02 c1       	rjmp	.+516    	; 0x3eee <Timer_init+0x23a>
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	9c 81       	ldd	r25, Y+4	; 0x04
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <Timer_init+0x40>
    3cf2:	74 c1       	rjmp	.+744    	; 0x3fdc <Timer_init+0x328>
	 *******************************************************************************/

	case TIMER_0 :

		/* Non-PWM mode FOC0 = 1 */
		TCCR0 |= ( 1 << FOC0 );
    3cf4:	a3 e5       	ldi	r26, 0x53	; 83
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e3 e5       	ldi	r30, 0x53	; 83
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	80 68       	ori	r24, 0x80	; 128
    3d00:	8c 93       	st	X, r24

		/* Prescaler of F_CPU */
		TCCR0 = ( TCCR0 & 0xF8 ) | ( Config_Ptr -> timer_clock );	// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    3d02:	a3 e5       	ldi	r26, 0x53	; 83
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e3 e5       	ldi	r30, 0x53	; 83
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	98 2f       	mov	r25, r24
    3d0e:	98 7f       	andi	r25, 0xF8	; 248
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	85 81       	ldd	r24, Z+5	; 0x05
    3d16:	89 2b       	or	r24, r25
    3d18:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    3d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d1e:	86 81       	ldd	r24, Z+6	; 0x06
    3d20:	88 23       	and	r24, r24
    3d22:	79 f4       	brne	.+30     	; 0x3d42 <Timer_init+0x8e>
		{
			/* To use normal mode (OVF) set these bits WGM01 and WGM00 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 0 */
			TCNT0 = Config_Ptr -> timer_InitialValue;
    3d24:	a2 e5       	ldi	r26, 0x52	; 82
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	8c 93       	st	X, r24

			/* Enable TIMER0 Overflow Interrupt */
			TIMSK |= ( 1 << TOIE0 );
    3d32:	a9 e5       	ldi	r26, 0x59	; 89
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	e9 e5       	ldi	r30, 0x59	; 89
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	80 81       	ld	r24, Z
    3d3c:	81 60       	ori	r24, 0x01	; 1
    3d3e:	8c 93       	st	X, r24
    3d40:	4d c1       	rjmp	.+666    	; 0x3fdc <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    3d42:	e9 81       	ldd	r30, Y+1	; 0x01
    3d44:	fa 81       	ldd	r31, Y+2	; 0x02
    3d46:	86 81       	ldd	r24, Z+6	; 0x06
    3d48:	82 30       	cpi	r24, 0x02	; 2
    3d4a:	e9 f4       	brne	.+58     	; 0x3d86 <Timer_init+0xd2>
		{
			/* Select compare mode (CTC) by set this bit WGM01 by one */
			TCCR0 |= ( 1 << WGM01 );
    3d4c:	a3 e5       	ldi	r26, 0x53	; 83
    3d4e:	b0 e0       	ldi	r27, 0x00	; 0
    3d50:	e3 e5       	ldi	r30, 0x53	; 83
    3d52:	f0 e0       	ldi	r31, 0x00	; 0
    3d54:	80 81       	ld	r24, Z
    3d56:	88 60       	ori	r24, 0x08	; 8
    3d58:	8c 93       	st	X, r24

			/* Set initial value for TIMER 0 and compare value */
			TCNT0 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 0.
    3d5a:	a2 e5       	ldi	r26, 0x52	; 82
    3d5c:	b0 e0       	ldi	r27, 0x00	; 0
    3d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d60:	fa 81       	ldd	r31, Y+2	; 0x02
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 0.
    3d68:	ac e5       	ldi	r26, 0x5C	; 92
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d70:	82 81       	ldd	r24, Z+2	; 0x02
    3d72:	93 81       	ldd	r25, Z+3	; 0x03
    3d74:	8c 93       	st	X, r24

			/* Enable Timer 0 Compare Interrupt */
			TIMSK |= ( 1 << OCIE0 );
    3d76:	a9 e5       	ldi	r26, 0x59	; 89
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e9 e5       	ldi	r30, 0x59	; 89
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	82 60       	ori	r24, 0x02	; 2
    3d82:	8c 93       	st	X, r24
    3d84:	2b c1       	rjmp	.+598    	; 0x3fdc <Timer_init+0x328>
		}


		/* Fast PWM */
		else if( Config_Ptr -> timer_mode == FAST_PWM )
    3d86:	e9 81       	ldd	r30, Y+1	; 0x01
    3d88:	fa 81       	ldd	r31, Y+2	; 0x02
    3d8a:	86 81       	ldd	r24, Z+6	; 0x06
    3d8c:	83 30       	cpi	r24, 0x03	; 3
    3d8e:	09 f0       	breq	.+2      	; 0x3d92 <Timer_init+0xde>
    3d90:	25 c1       	rjmp	.+586    	; 0x3fdc <Timer_init+0x328>
		{
			/* Select fast PWM mode by set these bits WGM00,WGM01 by one */
			TCCR0 |= ( 1 << WGM00 ) | ( 1 << WGM01 );
    3d92:	a3 e5       	ldi	r26, 0x53	; 83
    3d94:	b0 e0       	ldi	r27, 0x00	; 0
    3d96:	e3 e5       	ldi	r30, 0x53	; 83
    3d98:	f0 e0       	ldi	r31, 0x00	; 0
    3d9a:	80 81       	ld	r24, Z
    3d9c:	88 64       	ori	r24, 0x48	; 72
    3d9e:	8c 93       	st	X, r24

			/* Select mode of OC0 */
			TCCR0 = ( TCCR0 & 0xCF ) | ( (Config_Ptr -> output_compare) << 4 );	// (OC0) CF = 1100 1111 (COM01 , COM00)
    3da0:	a3 e5       	ldi	r26, 0x53	; 83
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	e3 e5       	ldi	r30, 0x53	; 83
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	28 2f       	mov	r18, r24
    3dac:	2f 7c       	andi	r18, 0xCF	; 207
    3dae:	e9 81       	ldd	r30, Y+1	; 0x01
    3db0:	fa 81       	ldd	r31, Y+2	; 0x02
    3db2:	87 81       	ldd	r24, Z+7	; 0x07
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	82 95       	swap	r24
    3dba:	92 95       	swap	r25
    3dbc:	90 7f       	andi	r25, 0xF0	; 240
    3dbe:	98 27       	eor	r25, r24
    3dc0:	80 7f       	andi	r24, 0xF0	; 240
    3dc2:	98 27       	eor	r25, r24
    3dc4:	82 2b       	or	r24, r18
    3dc6:	8c 93       	st	X, r24

			/* Set initial value for TIMER 0 and compare value */
			TCNT0 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 0.
    3dc8:	a2 e5       	ldi	r26, 0x52	; 82
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dce:	fa 81       	ldd	r31, Y+2	; 0x02
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 0.
    3dd6:	ac e5       	ldi	r26, 0x5C	; 92
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	e9 81       	ldd	r30, Y+1	; 0x01
    3ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	8c 93       	st	X, r24
    3de4:	fb c0       	rjmp	.+502    	; 0x3fdc <Timer_init+0x328>
		 *******************************************************************************/

	case TIMER_1 :

		/* Non-PWM mode FOC1A and FOC2A = 1 */
		TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    3de6:	ef e4       	ldi	r30, 0x4F	; 79
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	8c e0       	ldi	r24, 0x0C	; 12
    3dec:	80 83       	st	Z, r24

		/* Prescaler of F_CPU */
		TCCR1B = ( TCCR1B & 0xF8 ) | ( Config_Ptr -> timer_clock );		// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    3dee:	ae e4       	ldi	r26, 0x4E	; 78
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	ee e4       	ldi	r30, 0x4E	; 78
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	98 2f       	mov	r25, r24
    3dfa:	98 7f       	andi	r25, 0xF8	; 248
    3dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    3e00:	85 81       	ldd	r24, Z+5	; 0x05
    3e02:	89 2b       	or	r24, r25
    3e04:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    3e06:	e9 81       	ldd	r30, Y+1	; 0x01
    3e08:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0a:	86 81       	ldd	r24, Z+6	; 0x06
    3e0c:	88 23       	and	r24, r24
    3e0e:	71 f4       	brne	.+28     	; 0x3e2c <Timer_init+0x178>
		{
			/* To use normal mode (OVF) set these bits WGM10,WGM11,WGM12 and WGM13 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 1 */
			TCNT1 = Config_Ptr -> timer_InitialValue;
    3e10:	ac e4       	ldi	r26, 0x4C	; 76
    3e12:	b0 e0       	ldi	r27, 0x00	; 0
    3e14:	e9 81       	ldd	r30, Y+1	; 0x01
    3e16:	fa 81       	ldd	r31, Y+2	; 0x02
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	9c 93       	st	X, r25
    3e20:	8e 93       	st	-X, r24

			/* Enable TIMER 1 Overflow Interrupt */
			TIMSK = ( 1 << TOIE1 );
    3e22:	e9 e5       	ldi	r30, 0x59	; 89
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	84 e0       	ldi	r24, 0x04	; 4
    3e28:	80 83       	st	Z, r24
    3e2a:	d8 c0       	rjmp	.+432    	; 0x3fdc <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    3e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e30:	86 81       	ldd	r24, Z+6	; 0x06
    3e32:	82 30       	cpi	r24, 0x02	; 2
    3e34:	f1 f4       	brne	.+60     	; 0x3e72 <Timer_init+0x1be>
		{
			/* Select (mode number 4) compare mode (CTC) by set this bit WGM12 by one */
			TCCR1B |= ( 1 << WGM12 );
    3e36:	ae e4       	ldi	r26, 0x4E	; 78
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	ee e4       	ldi	r30, 0x4E	; 78
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	88 60       	ori	r24, 0x08	; 8
    3e42:	8c 93       	st	X, r24


			/* Set initial value for TIMER 1 and compare value */
			TCNT1 = Config_Ptr -> timer_InitialValue;			// Initial value for TIMER 1.
    3e44:	ac e4       	ldi	r26, 0x4C	; 76
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e4c:	80 81       	ld	r24, Z
    3e4e:	91 81       	ldd	r25, Z+1	; 0x01
    3e50:	11 96       	adiw	r26, 0x01	; 1
    3e52:	9c 93       	st	X, r25
    3e54:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;		// Compare value for TIMER 1.
    3e56:	aa e4       	ldi	r26, 0x4A	; 74
    3e58:	b0 e0       	ldi	r27, 0x00	; 0
    3e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	11 96       	adiw	r26, 0x01	; 1
    3e64:	9c 93       	st	X, r25
    3e66:	8e 93       	st	-X, r24

			/* Enable TIMER 1 Compare Interrupt */
			TIMSK = ( 1 << OCIE1A );
    3e68:	e9 e5       	ldi	r30, 0x59	; 89
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 e1       	ldi	r24, 0x10	; 16
    3e6e:	80 83       	st	Z, r24
    3e70:	b5 c0       	rjmp	.+362    	; 0x3fdc <Timer_init+0x328>
		}


		/* Fast PWM */
		else if ( Config_Ptr -> timer_mode == FAST_PWM )
    3e72:	e9 81       	ldd	r30, Y+1	; 0x01
    3e74:	fa 81       	ldd	r31, Y+2	; 0x02
    3e76:	86 81       	ldd	r24, Z+6	; 0x06
    3e78:	83 30       	cpi	r24, 0x03	; 3
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <Timer_init+0x1ca>
    3e7c:	af c0       	rjmp	.+350    	; 0x3fdc <Timer_init+0x328>
		{
			/* We used (mode number 15) in dataSheet
			 * so we need to set these bits WGM10,WGM11,WGM12 and WGM13 by one. */
			TCCR1A |= ( 1 << WGM10 ) | ( 1 << WGM11 );
    3e7e:	af e4       	ldi	r26, 0x4F	; 79
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	ef e4       	ldi	r30, 0x4F	; 79
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	83 60       	ori	r24, 0x03	; 3
    3e8a:	8c 93       	st	X, r24
			TCCR1B |= ( 1 << WGM12 ) | ( 1 << WGM13 );
    3e8c:	ae e4       	ldi	r26, 0x4E	; 78
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	ee e4       	ldi	r30, 0x4E	; 78
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	80 81       	ld	r24, Z
    3e96:	88 61       	ori	r24, 0x18	; 24
    3e98:	8c 93       	st	X, r24

			/* Select mode of OC1A */
			TCCR1A  = ( TCCR1A & 0x3F ) | ( (Config_Ptr -> output_compare) << 6 );	// 3F = 0011 1111 (COM1A1,COM1A0)
    3e9a:	af e4       	ldi	r26, 0x4F	; 79
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	ef e4       	ldi	r30, 0x4F	; 79
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	2f 73       	andi	r18, 0x3F	; 63
    3ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    3eac:	87 81       	ldd	r24, Z+7	; 0x07
    3eae:	88 2f       	mov	r24, r24
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	00 24       	eor	r0, r0
    3eb4:	96 95       	lsr	r25
    3eb6:	87 95       	ror	r24
    3eb8:	07 94       	ror	r0
    3eba:	96 95       	lsr	r25
    3ebc:	87 95       	ror	r24
    3ebe:	07 94       	ror	r0
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	80 2d       	mov	r24, r0
    3ec4:	82 2b       	or	r24, r18
    3ec6:	8c 93       	st	X, r24


			/* Set initial value for TIMER 1 and compare value */
			TCNT1 = Config_Ptr -> timer_InitialValue;			// Initial value for TIMER 1.
    3ec8:	ac e4       	ldi	r26, 0x4C	; 76
    3eca:	b0 e0       	ldi	r27, 0x00	; 0
    3ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ece:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	11 96       	adiw	r26, 0x01	; 1
    3ed6:	9c 93       	st	X, r25
    3ed8:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;		// Compare value for TIMER 1.
    3eda:	aa e4       	ldi	r26, 0x4A	; 74
    3edc:	b0 e0       	ldi	r27, 0x00	; 0
    3ede:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	11 96       	adiw	r26, 0x01	; 1
    3ee8:	9c 93       	st	X, r25
    3eea:	8e 93       	st	-X, r24
    3eec:	77 c0       	rjmp	.+238    	; 0x3fdc <Timer_init+0x328>
		 *******************************************************************************/

	case TIMER_2 :

		/* Non-PWM mode FOC2 = 1 */
		TCCR2 |= ( 1 << FOC2 );
    3eee:	a5 e4       	ldi	r26, 0x45	; 69
    3ef0:	b0 e0       	ldi	r27, 0x00	; 0
    3ef2:	e5 e4       	ldi	r30, 0x45	; 69
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	80 81       	ld	r24, Z
    3ef8:	80 68       	ori	r24, 0x80	; 128
    3efa:	8c 93       	st	X, r24

		/* Prescaler of F_CPU */
		TCCR2 = ( TCCR2 & 0xF8 ) | ( Config_Ptr -> timer_clock );	// (Prescaler) F8 = 1111 1000 (CS02,CS01,CS00)
    3efc:	a5 e4       	ldi	r26, 0x45	; 69
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	e5 e4       	ldi	r30, 0x45	; 69
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	98 2f       	mov	r25, r24
    3f08:	98 7f       	andi	r25, 0xF8	; 248
    3f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f0e:	85 81       	ldd	r24, Z+5	; 0x05
    3f10:	89 2b       	or	r24, r25
    3f12:	8c 93       	st	X, r24


		/* Normal mode (OVF) */
		if( Config_Ptr -> timer_mode == NORMAL )
    3f14:	e9 81       	ldd	r30, Y+1	; 0x01
    3f16:	fa 81       	ldd	r31, Y+2	; 0x02
    3f18:	86 81       	ldd	r24, Z+6	; 0x06
    3f1a:	88 23       	and	r24, r24
    3f1c:	79 f4       	brne	.+30     	; 0x3f3c <Timer_init+0x288>
		{
			/* To use normal mode (OVF) set these bits WGM21 and WGM20 by zero
			 * so we will leave it because as dataSheet initial value for all these bits zero. */

			/* Set initial value for TIMER 2 */
			TCNT2  = Config_Ptr -> timer_InitialValue;
    3f1e:	a4 e4       	ldi	r26, 0x44	; 68
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	e9 81       	ldd	r30, Y+1	; 0x01
    3f24:	fa 81       	ldd	r31, Y+2	; 0x02
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	8c 93       	st	X, r24

			/* Enable TIMER 2 Overflow Interrupt */
			TIMSK |= ( 1 << TOIE2 );
    3f2c:	a9 e5       	ldi	r26, 0x59	; 89
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	e9 e5       	ldi	r30, 0x59	; 89
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	80 81       	ld	r24, Z
    3f36:	80 64       	ori	r24, 0x40	; 64
    3f38:	8c 93       	st	X, r24
    3f3a:	50 c0       	rjmp	.+160    	; 0x3fdc <Timer_init+0x328>
		}


		/* Compare mode (CTC) */
		else if ( Config_Ptr -> timer_mode == COMPARE )
    3f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f40:	86 81       	ldd	r24, Z+6	; 0x06
    3f42:	82 30       	cpi	r24, 0x02	; 2
    3f44:	e9 f4       	brne	.+58     	; 0x3f80 <Timer_init+0x2cc>
		{
			/* Select compare mode (CTC) by set this bit WGM21 by one */
			TCCR0 |= ( 1 << WGM21 );
    3f46:	a3 e5       	ldi	r26, 0x53	; 83
    3f48:	b0 e0       	ldi	r27, 0x00	; 0
    3f4a:	e3 e5       	ldi	r30, 0x53	; 83
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	80 81       	ld	r24, Z
    3f50:	88 60       	ori	r24, 0x08	; 8
    3f52:	8c 93       	st	X, r24

			/* Set initial value for TIMER 2 and compare value */
			TCNT2 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 2.
    3f54:	a4 e4       	ldi	r26, 0x44	; 68
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	e9 81       	ldd	r30, Y+1	; 0x01
    3f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	8c 93       	st	X, r24
			OCR2  = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 2.
    3f62:	a3 e4       	ldi	r26, 0x43	; 67
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	e9 81       	ldd	r30, Y+1	; 0x01
    3f68:	fa 81       	ldd	r31, Y+2	; 0x02
    3f6a:	82 81       	ldd	r24, Z+2	; 0x02
    3f6c:	93 81       	ldd	r25, Z+3	; 0x03
    3f6e:	8c 93       	st	X, r24

			/* Enable Timer 2 Compare Interrupt */
			TIMSK |= ( 1 << OCIE2 );
    3f70:	a9 e5       	ldi	r26, 0x59	; 89
    3f72:	b0 e0       	ldi	r27, 0x00	; 0
    3f74:	e9 e5       	ldi	r30, 0x59	; 89
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	80 81       	ld	r24, Z
    3f7a:	80 68       	ori	r24, 0x80	; 128
    3f7c:	8c 93       	st	X, r24
    3f7e:	2e c0       	rjmp	.+92     	; 0x3fdc <Timer_init+0x328>
		}


		/* Fast PWM */
		else if( Config_Ptr -> timer_mode == FAST_PWM )
    3f80:	e9 81       	ldd	r30, Y+1	; 0x01
    3f82:	fa 81       	ldd	r31, Y+2	; 0x02
    3f84:	86 81       	ldd	r24, Z+6	; 0x06
    3f86:	83 30       	cpi	r24, 0x03	; 3
    3f88:	49 f5       	brne	.+82     	; 0x3fdc <Timer_init+0x328>
		{
			/* Select fast PWM mode by set these bits WGM20,WGM21 by one */
			TCCR2 |= ( 1 << WGM20 ) | ( 1 << WGM21 );
    3f8a:	a5 e4       	ldi	r26, 0x45	; 69
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	e5 e4       	ldi	r30, 0x45	; 69
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	88 64       	ori	r24, 0x48	; 72
    3f96:	8c 93       	st	X, r24

			/* Select mode of OC2 */
			TCCR2 = ( TCCR2 & 0xCF ) | ( (Config_Ptr -> output_compare) << 4 );	// (OC2) CF = 1100 1111 (COM01 , COM00)
    3f98:	a5 e4       	ldi	r26, 0x45	; 69
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e5 e4       	ldi	r30, 0x45	; 69
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	2f 7c       	andi	r18, 0xCF	; 207
    3fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    3faa:	87 81       	ldd	r24, Z+7	; 0x07
    3fac:	88 2f       	mov	r24, r24
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	82 95       	swap	r24
    3fb2:	92 95       	swap	r25
    3fb4:	90 7f       	andi	r25, 0xF0	; 240
    3fb6:	98 27       	eor	r25, r24
    3fb8:	80 7f       	andi	r24, 0xF0	; 240
    3fba:	98 27       	eor	r25, r24
    3fbc:	82 2b       	or	r24, r18
    3fbe:	8c 93       	st	X, r24

			/* Set initial value for TIMER 2 and compare value */
			TCNT2 = Config_Ptr -> timer_InitialValue;				// Initial value for TIMER 2.
    3fc0:	a4 e4       	ldi	r26, 0x44	; 68
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc8:	80 81       	ld	r24, Z
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	8c 93       	st	X, r24
			OCR2  = Config_Ptr -> timer_compare_MatchValue;			// Compare value for TIMER 2.
    3fce:	a3 e4       	ldi	r26, 0x43	; 67
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd6:	82 81       	ldd	r24, Z+2	; 0x02
    3fd8:	93 81       	ldd	r25, Z+3	; 0x03
    3fda:	8c 93       	st	X, r24
		}

		break;
	}
}
    3fdc:	0f 90       	pop	r0
    3fde:	0f 90       	pop	r0
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	cf 91       	pop	r28
    3fe6:	df 91       	pop	r29
    3fe8:	08 95       	ret

00003fea <Timer_deInit>:
/*
 * Description :
 *  Function to disable the Timer via Timer_ID.
 */
void Timer_deInit(Timer_ID_Type timer_ID)
{
    3fea:	df 93       	push	r29
    3fec:	cf 93       	push	r28
    3fee:	00 d0       	rcall	.+0      	; 0x3ff0 <Timer_deInit+0x6>
    3ff0:	0f 92       	push	r0
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
    3ff6:	89 83       	std	Y+1, r24	; 0x01
	switch( timer_ID )
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	3b 83       	std	Y+3, r19	; 0x03
    4000:	2a 83       	std	Y+2, r18	; 0x02
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	9b 81       	ldd	r25, Y+3	; 0x03
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	91 05       	cpc	r25, r1
    400a:	f1 f0       	breq	.+60     	; 0x4048 <Timer_deInit+0x5e>
    400c:	ea 81       	ldd	r30, Y+2	; 0x02
    400e:	fb 81       	ldd	r31, Y+3	; 0x03
    4010:	e2 30       	cpi	r30, 0x02	; 2
    4012:	f1 05       	cpc	r31, r1
    4014:	c1 f1       	breq	.+112    	; 0x4086 <Timer_deInit+0x9c>
    4016:	2a 81       	ldd	r18, Y+2	; 0x02
    4018:	3b 81       	ldd	r19, Y+3	; 0x03
    401a:	21 15       	cp	r18, r1
    401c:	31 05       	cpc	r19, r1
    401e:	09 f0       	breq	.+2      	; 0x4022 <Timer_deInit+0x38>
    4020:	44 c0       	rjmp	.+136    	; 0x40aa <Timer_deInit+0xc0>
	{
	case TIMER_0 :

		/* Clear all TIMER 0 registers */
		TCCR0 = TCNT0 = OCR0 = TIMSK = 0;
    4022:	43 e5       	ldi	r20, 0x53	; 83
    4024:	50 e0       	ldi	r21, 0x00	; 0
    4026:	22 e5       	ldi	r18, 0x52	; 82
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	ac e5       	ldi	r26, 0x5C	; 92
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	e9 e5       	ldi	r30, 0x59	; 89
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	10 82       	st	Z, r1
    4034:	80 81       	ld	r24, Z
    4036:	8c 93       	st	X, r24
    4038:	8c 91       	ld	r24, X
    403a:	f9 01       	movw	r30, r18
    403c:	80 83       	st	Z, r24
    403e:	f9 01       	movw	r30, r18
    4040:	80 81       	ld	r24, Z
    4042:	fa 01       	movw	r30, r20
    4044:	80 83       	st	Z, r24
    4046:	31 c0       	rjmp	.+98     	; 0x40aa <Timer_deInit+0xc0>
		break;

	case TIMER_1 :

		/* Clear all TIMER 1 registers */
		TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    4048:	6f e4       	ldi	r22, 0x4F	; 79
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	4e e4       	ldi	r20, 0x4E	; 78
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	29 e5       	ldi	r18, 0x59	; 89
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	ac e4       	ldi	r26, 0x4C	; 76
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	ea e4       	ldi	r30, 0x4A	; 74
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	11 82       	std	Z+1, r1	; 0x01
    405e:	10 82       	st	Z, r1
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	11 96       	adiw	r26, 0x01	; 1
    4066:	9c 93       	st	X, r25
    4068:	8e 93       	st	-X, r24
    406a:	8d 91       	ld	r24, X+
    406c:	9c 91       	ld	r25, X
    406e:	11 97       	sbiw	r26, 0x01	; 1
    4070:	f9 01       	movw	r30, r18
    4072:	80 83       	st	Z, r24
    4074:	f9 01       	movw	r30, r18
    4076:	80 81       	ld	r24, Z
    4078:	fa 01       	movw	r30, r20
    407a:	80 83       	st	Z, r24
    407c:	fa 01       	movw	r30, r20
    407e:	80 81       	ld	r24, Z
    4080:	fb 01       	movw	r30, r22
    4082:	80 83       	st	Z, r24
    4084:	12 c0       	rjmp	.+36     	; 0x40aa <Timer_deInit+0xc0>
		break;

	case TIMER_2 :

		/* Clear all TIMER 2 registers */
		TCCR2 = TCNT2 = OCR2 = TIMSK = 0;
    4086:	45 e4       	ldi	r20, 0x45	; 69
    4088:	50 e0       	ldi	r21, 0x00	; 0
    408a:	24 e4       	ldi	r18, 0x44	; 68
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	a3 e4       	ldi	r26, 0x43	; 67
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	e9 e5       	ldi	r30, 0x59	; 89
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	10 82       	st	Z, r1
    4098:	80 81       	ld	r24, Z
    409a:	8c 93       	st	X, r24
    409c:	8c 91       	ld	r24, X
    409e:	f9 01       	movw	r30, r18
    40a0:	80 83       	st	Z, r24
    40a2:	f9 01       	movw	r30, r18
    40a4:	80 81       	ld	r24, Z
    40a6:	fa 01       	movw	r30, r20
    40a8:	80 83       	st	Z, r24
		break;
	}
}
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	08 95       	ret

000040b6 <Timer_setCallBack>:
/*
 * Description :
 *  Function to set the Call Back function address to the required Timer.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_ID )
{
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <Timer_setCallBack+0x6>
    40bc:	00 d0       	rcall	.+0      	; 0x40be <Timer_setCallBack+0x8>
    40be:	0f 92       	push	r0
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01
    40c8:	6b 83       	std	Y+3, r22	; 0x03
	switch( timer_ID )
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	3d 83       	std	Y+5, r19	; 0x05
    40d2:	2c 83       	std	Y+4, r18	; 0x04
    40d4:	8c 81       	ldd	r24, Y+4	; 0x04
    40d6:	9d 81       	ldd	r25, Y+5	; 0x05
    40d8:	81 30       	cpi	r24, 0x01	; 1
    40da:	91 05       	cpc	r25, r1
    40dc:	81 f0       	breq	.+32     	; 0x40fe <Timer_setCallBack+0x48>
    40de:	2c 81       	ldd	r18, Y+4	; 0x04
    40e0:	3d 81       	ldd	r19, Y+5	; 0x05
    40e2:	22 30       	cpi	r18, 0x02	; 2
    40e4:	31 05       	cpc	r19, r1
    40e6:	91 f0       	breq	.+36     	; 0x410c <Timer_setCallBack+0x56>
    40e8:	8c 81       	ldd	r24, Y+4	; 0x04
    40ea:	9d 81       	ldd	r25, Y+5	; 0x05
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	a1 f4       	brne	.+40     	; 0x4118 <Timer_setCallBack+0x62>
	{
	case TIMER_0 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	9a 81       	ldd	r25, Y+2	; 0x02
    40f4:	90 93 60 01 	sts	0x0160, r25
    40f8:	80 93 5f 01 	sts	0x015F, r24
    40fc:	0d c0       	rjmp	.+26     	; 0x4118 <Timer_setCallBack+0x62>
		break;

	case TIMER_1 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	9a 81       	ldd	r25, Y+2	; 0x02
    4102:	90 93 60 01 	sts	0x0160, r25
    4106:	80 93 5f 01 	sts	0x015F, r24
    410a:	06 c0       	rjmp	.+12     	; 0x4118 <Timer_setCallBack+0x62>
		break;

	case TIMER_2 :

		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = (volatile void (*)(void))a_ptr;
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	90 93 60 01 	sts	0x0160, r25
    4114:	80 93 5f 01 	sts	0x015F, r24
		break;
	}

}
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	00 d0       	rcall	.+0      	; 0x412e <UART_init+0x6>
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	9a 83       	std	Y+2, r25	; 0x02
    4134:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    4136:	eb e2       	ldi	r30, 0x2B	; 43
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	82 e0       	ldi	r24, 0x02	; 2
    413c:	80 83       	st	Z, r24

	/* Enable Transmitter and Receiver */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    413e:	ea e2       	ldi	r30, 0x2A	; 42
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	88 e1       	ldi	r24, 0x18	; 24
    4144:	80 83       	st	Z, r24
	
	/* The URSEL must be one when writing the UCSRC */
	UCSRC = (1 << URSEL);
    4146:	e0 e4       	ldi	r30, 0x40	; 64
    4148:	f0 e0       	ldi	r31, 0x00	; 0
    414a:	80 e8       	ldi	r24, 0x80	; 128
    414c:	80 83       	st	Z, r24
	
	/* Select parity check */
	UCSRC = ( UCSRC & 0XCF ) | ( (Config_Ptr -> parity) << 4 );	// CF = 1100 1111 (UPM0 UPM1)
    414e:	a0 e4       	ldi	r26, 0x40	; 64
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	e0 e4       	ldi	r30, 0x40	; 64
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	80 81       	ld	r24, Z
    4158:	28 2f       	mov	r18, r24
    415a:	2f 7c       	andi	r18, 0xCF	; 207
    415c:	e9 81       	ldd	r30, Y+1	; 0x01
    415e:	fa 81       	ldd	r31, Y+2	; 0x02
    4160:	81 81       	ldd	r24, Z+1	; 0x01
    4162:	88 2f       	mov	r24, r24
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	82 95       	swap	r24
    4168:	92 95       	swap	r25
    416a:	90 7f       	andi	r25, 0xF0	; 240
    416c:	98 27       	eor	r25, r24
    416e:	80 7f       	andi	r24, 0xF0	; 240
    4170:	98 27       	eor	r25, r24
    4172:	82 2b       	or	r24, r18
    4174:	8c 93       	st	X, r24

	/* Select number of bit stop mode */
	UCSRC = ( UCSRC & 0XF7 ) | ( (Config_Ptr -> stop_bit) << 3 );	// F7 = 1111 0111 (USBS)
    4176:	a0 e4       	ldi	r26, 0x40	; 64
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	e0 e4       	ldi	r30, 0x40	; 64
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	28 2f       	mov	r18, r24
    4182:	27 7f       	andi	r18, 0xF7	; 247
    4184:	e9 81       	ldd	r30, Y+1	; 0x01
    4186:	fa 81       	ldd	r31, Y+2	; 0x02
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	88 2f       	mov	r24, r24
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	88 0f       	add	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	82 2b       	or	r24, r18
    419c:	8c 93       	st	X, r24

	/* Select number of bit data mode */
	UCSRC = ( UCSRC & 0XF1 ) | ( (Config_Ptr -> bit_data) << 1 );	// F1 = 1111 0001 (UCSZ0 UCSZ1 UCSZ2)
    419e:	a0 e4       	ldi	r26, 0x40	; 64
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	e0 e4       	ldi	r30, 0x40	; 64
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	28 2f       	mov	r18, r24
    41aa:	21 7f       	andi	r18, 0xF1	; 241
    41ac:	e9 81       	ldd	r30, Y+1	; 0x01
    41ae:	fa 81       	ldd	r31, Y+2	; 0x02
    41b0:	80 81       	ld	r24, Z
    41b2:	88 2f       	mov	r24, r24
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	82 2b       	or	r24, r18
    41bc:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Config_Ptr -> baud_rate) >> 8;
    41be:	a0 e4       	ldi	r26, 0x40	; 64
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e9 81       	ldd	r30, Y+1	; 0x01
    41c4:	fa 81       	ldd	r31, Y+2	; 0x02
    41c6:	83 81       	ldd	r24, Z+3	; 0x03
    41c8:	94 81       	ldd	r25, Z+4	; 0x04
    41ca:	89 2f       	mov	r24, r25
    41cc:	99 27       	eor	r25, r25
    41ce:	8c 93       	st	X, r24
	UBRRL = (Config_Ptr -> baud_rate);
    41d0:	a9 e2       	ldi	r26, 0x29	; 41
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	e9 81       	ldd	r30, Y+1	; 0x01
    41d6:	fa 81       	ldd	r31, Y+2	; 0x02
    41d8:	83 81       	ldd	r24, Z+3	; 0x03
    41da:	94 81       	ldd	r25, Z+4	; 0x04
    41dc:	8c 93       	st	X, r24
}
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	08 95       	ret

000041e8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    41e8:	df 93       	push	r29
    41ea:	cf 93       	push	r28
    41ec:	0f 92       	push	r0
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    41f4:	eb e2       	ldi	r30, 0x2B	; 43
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	80 72       	andi	r24, 0x20	; 32
    4200:	90 70       	andi	r25, 0x00	; 0
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	b9 f3       	breq	.-18     	; 0x41f4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4206:	ec e2       	ldi	r30, 0x2C	; 44
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    420e:	0f 90       	pop	r0
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4216:	df 93       	push	r29
    4218:	cf 93       	push	r28
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    421e:	eb e2       	ldi	r30, 0x2B	; 43
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	88 23       	and	r24, r24
    4226:	dc f7       	brge	.-10     	; 0x421e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4228:	ec e2       	ldi	r30, 0x2C	; 44
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	80 81       	ld	r24, Z
}
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	00 d0       	rcall	.+0      	; 0x423a <UART_sendString+0x6>
    423a:	0f 92       	push	r0
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	9b 83       	std	Y+3, r25	; 0x03
    4242:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4244:	19 82       	std	Y+1, r1	; 0x01
    4246:	0e c0       	rjmp	.+28     	; 0x4264 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	9b 81       	ldd	r25, Y+3	; 0x03
    4252:	fc 01       	movw	r30, r24
    4254:	e2 0f       	add	r30, r18
    4256:	f3 1f       	adc	r31, r19
    4258:	80 81       	ld	r24, Z
    425a:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <UART_sendByte>
		i++;
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	8f 5f       	subi	r24, 0xFF	; 255
    4262:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	28 2f       	mov	r18, r24
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	8a 81       	ldd	r24, Y+2	; 0x02
    426c:	9b 81       	ldd	r25, Y+3	; 0x03
    426e:	fc 01       	movw	r30, r24
    4270:	e2 0f       	add	r30, r18
    4272:	f3 1f       	adc	r31, r19
    4274:	80 81       	ld	r24, Z
    4276:	88 23       	and	r24, r24
    4278:	39 f7       	brne	.-50     	; 0x4248 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	df 93       	push	r29
    428c:	cf 93       	push	r28
    428e:	00 d0       	rcall	.+0      	; 0x4290 <UART_receiveString+0xa>
    4290:	0f 92       	push	r0
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	9b 83       	std	Y+3, r25	; 0x03
    4298:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    429a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	28 2f       	mov	r18, r24
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	9b 81       	ldd	r25, Y+3	; 0x03
    42a6:	8c 01       	movw	r16, r24
    42a8:	02 0f       	add	r16, r18
    42aa:	13 1f       	adc	r17, r19
    42ac:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    42b0:	f8 01       	movw	r30, r16
    42b2:	80 83       	st	Z, r24
    42b4:	0f c0       	rjmp	.+30     	; 0x42d4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	8f 5f       	subi	r24, 0xFF	; 255
    42ba:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	9b 81       	ldd	r25, Y+3	; 0x03
    42c6:	8c 01       	movw	r16, r24
    42c8:	02 0f       	add	r16, r18
    42ca:	13 1f       	adc	r17, r19
    42cc:	0e 94 0b 21 	call	0x4216	; 0x4216 <UART_recieveByte>
    42d0:	f8 01       	movw	r30, r16
    42d2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	28 2f       	mov	r18, r24
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	8a 81       	ldd	r24, Y+2	; 0x02
    42dc:	9b 81       	ldd	r25, Y+3	; 0x03
    42de:	fc 01       	movw	r30, r24
    42e0:	e2 0f       	add	r30, r18
    42e2:	f3 1f       	adc	r31, r19
    42e4:	80 81       	ld	r24, Z
    42e6:	83 32       	cpi	r24, 0x23	; 35
    42e8:	31 f7       	brne	.-52     	; 0x42b6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	28 2f       	mov	r18, r24
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	9b 81       	ldd	r25, Y+3	; 0x03
    42f4:	fc 01       	movw	r30, r24
    42f6:	e2 0f       	add	r30, r18
    42f8:	f3 1f       	adc	r31, r19
    42fa:	10 82       	st	Z, r1
}
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	cf 91       	pop	r28
    4304:	df 91       	pop	r29
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	08 95       	ret

0000430c <__mulsi3>:
    430c:	62 9f       	mul	r22, r18
    430e:	d0 01       	movw	r26, r0
    4310:	73 9f       	mul	r23, r19
    4312:	f0 01       	movw	r30, r0
    4314:	82 9f       	mul	r24, r18
    4316:	e0 0d       	add	r30, r0
    4318:	f1 1d       	adc	r31, r1
    431a:	64 9f       	mul	r22, r20
    431c:	e0 0d       	add	r30, r0
    431e:	f1 1d       	adc	r31, r1
    4320:	92 9f       	mul	r25, r18
    4322:	f0 0d       	add	r31, r0
    4324:	83 9f       	mul	r24, r19
    4326:	f0 0d       	add	r31, r0
    4328:	74 9f       	mul	r23, r20
    432a:	f0 0d       	add	r31, r0
    432c:	65 9f       	mul	r22, r21
    432e:	f0 0d       	add	r31, r0
    4330:	99 27       	eor	r25, r25
    4332:	72 9f       	mul	r23, r18
    4334:	b0 0d       	add	r27, r0
    4336:	e1 1d       	adc	r30, r1
    4338:	f9 1f       	adc	r31, r25
    433a:	63 9f       	mul	r22, r19
    433c:	b0 0d       	add	r27, r0
    433e:	e1 1d       	adc	r30, r1
    4340:	f9 1f       	adc	r31, r25
    4342:	bd 01       	movw	r22, r26
    4344:	cf 01       	movw	r24, r30
    4346:	11 24       	eor	r1, r1
    4348:	08 95       	ret

0000434a <__divmodsi4>:
    434a:	97 fb       	bst	r25, 7
    434c:	09 2e       	mov	r0, r25
    434e:	05 26       	eor	r0, r21
    4350:	0e d0       	rcall	.+28     	; 0x436e <__divmodsi4_neg1>
    4352:	57 fd       	sbrc	r21, 7
    4354:	04 d0       	rcall	.+8      	; 0x435e <__divmodsi4_neg2>
    4356:	14 d0       	rcall	.+40     	; 0x4380 <__udivmodsi4>
    4358:	0a d0       	rcall	.+20     	; 0x436e <__divmodsi4_neg1>
    435a:	00 1c       	adc	r0, r0
    435c:	38 f4       	brcc	.+14     	; 0x436c <__divmodsi4_exit>

0000435e <__divmodsi4_neg2>:
    435e:	50 95       	com	r21
    4360:	40 95       	com	r20
    4362:	30 95       	com	r19
    4364:	21 95       	neg	r18
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	4f 4f       	sbci	r20, 0xFF	; 255
    436a:	5f 4f       	sbci	r21, 0xFF	; 255

0000436c <__divmodsi4_exit>:
    436c:	08 95       	ret

0000436e <__divmodsi4_neg1>:
    436e:	f6 f7       	brtc	.-4      	; 0x436c <__divmodsi4_exit>
    4370:	90 95       	com	r25
    4372:	80 95       	com	r24
    4374:	70 95       	com	r23
    4376:	61 95       	neg	r22
    4378:	7f 4f       	sbci	r23, 0xFF	; 255
    437a:	8f 4f       	sbci	r24, 0xFF	; 255
    437c:	9f 4f       	sbci	r25, 0xFF	; 255
    437e:	08 95       	ret

00004380 <__udivmodsi4>:
    4380:	a1 e2       	ldi	r26, 0x21	; 33
    4382:	1a 2e       	mov	r1, r26
    4384:	aa 1b       	sub	r26, r26
    4386:	bb 1b       	sub	r27, r27
    4388:	fd 01       	movw	r30, r26
    438a:	0d c0       	rjmp	.+26     	; 0x43a6 <__udivmodsi4_ep>

0000438c <__udivmodsi4_loop>:
    438c:	aa 1f       	adc	r26, r26
    438e:	bb 1f       	adc	r27, r27
    4390:	ee 1f       	adc	r30, r30
    4392:	ff 1f       	adc	r31, r31
    4394:	a2 17       	cp	r26, r18
    4396:	b3 07       	cpc	r27, r19
    4398:	e4 07       	cpc	r30, r20
    439a:	f5 07       	cpc	r31, r21
    439c:	20 f0       	brcs	.+8      	; 0x43a6 <__udivmodsi4_ep>
    439e:	a2 1b       	sub	r26, r18
    43a0:	b3 0b       	sbc	r27, r19
    43a2:	e4 0b       	sbc	r30, r20
    43a4:	f5 0b       	sbc	r31, r21

000043a6 <__udivmodsi4_ep>:
    43a6:	66 1f       	adc	r22, r22
    43a8:	77 1f       	adc	r23, r23
    43aa:	88 1f       	adc	r24, r24
    43ac:	99 1f       	adc	r25, r25
    43ae:	1a 94       	dec	r1
    43b0:	69 f7       	brne	.-38     	; 0x438c <__udivmodsi4_loop>
    43b2:	60 95       	com	r22
    43b4:	70 95       	com	r23
    43b6:	80 95       	com	r24
    43b8:	90 95       	com	r25
    43ba:	9b 01       	movw	r18, r22
    43bc:	ac 01       	movw	r20, r24
    43be:	bd 01       	movw	r22, r26
    43c0:	cf 01       	movw	r24, r30
    43c2:	08 95       	ret

000043c4 <__prologue_saves__>:
    43c4:	2f 92       	push	r2
    43c6:	3f 92       	push	r3
    43c8:	4f 92       	push	r4
    43ca:	5f 92       	push	r5
    43cc:	6f 92       	push	r6
    43ce:	7f 92       	push	r7
    43d0:	8f 92       	push	r8
    43d2:	9f 92       	push	r9
    43d4:	af 92       	push	r10
    43d6:	bf 92       	push	r11
    43d8:	cf 92       	push	r12
    43da:	df 92       	push	r13
    43dc:	ef 92       	push	r14
    43de:	ff 92       	push	r15
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	ca 1b       	sub	r28, r26
    43ee:	db 0b       	sbc	r29, r27
    43f0:	0f b6       	in	r0, 0x3f	; 63
    43f2:	f8 94       	cli
    43f4:	de bf       	out	0x3e, r29	; 62
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	cd bf       	out	0x3d, r28	; 61
    43fa:	09 94       	ijmp

000043fc <__epilogue_restores__>:
    43fc:	2a 88       	ldd	r2, Y+18	; 0x12
    43fe:	39 88       	ldd	r3, Y+17	; 0x11
    4400:	48 88       	ldd	r4, Y+16	; 0x10
    4402:	5f 84       	ldd	r5, Y+15	; 0x0f
    4404:	6e 84       	ldd	r6, Y+14	; 0x0e
    4406:	7d 84       	ldd	r7, Y+13	; 0x0d
    4408:	8c 84       	ldd	r8, Y+12	; 0x0c
    440a:	9b 84       	ldd	r9, Y+11	; 0x0b
    440c:	aa 84       	ldd	r10, Y+10	; 0x0a
    440e:	b9 84       	ldd	r11, Y+9	; 0x09
    4410:	c8 84       	ldd	r12, Y+8	; 0x08
    4412:	df 80       	ldd	r13, Y+7	; 0x07
    4414:	ee 80       	ldd	r14, Y+6	; 0x06
    4416:	fd 80       	ldd	r15, Y+5	; 0x05
    4418:	0c 81       	ldd	r16, Y+4	; 0x04
    441a:	1b 81       	ldd	r17, Y+3	; 0x03
    441c:	aa 81       	ldd	r26, Y+2	; 0x02
    441e:	b9 81       	ldd	r27, Y+1	; 0x01
    4420:	ce 0f       	add	r28, r30
    4422:	d1 1d       	adc	r29, r1
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	ed 01       	movw	r28, r26
    4430:	08 95       	ret

00004432 <itoa>:
    4432:	fb 01       	movw	r30, r22
    4434:	9f 01       	movw	r18, r30
    4436:	e8 94       	clt
    4438:	42 30       	cpi	r20, 0x02	; 2
    443a:	c4 f0       	brlt	.+48     	; 0x446c <itoa+0x3a>
    443c:	45 32       	cpi	r20, 0x25	; 37
    443e:	b4 f4       	brge	.+44     	; 0x446c <itoa+0x3a>
    4440:	4a 30       	cpi	r20, 0x0A	; 10
    4442:	29 f4       	brne	.+10     	; 0x444e <itoa+0x1c>
    4444:	97 fb       	bst	r25, 7
    4446:	1e f4       	brtc	.+6      	; 0x444e <itoa+0x1c>
    4448:	90 95       	com	r25
    444a:	81 95       	neg	r24
    444c:	9f 4f       	sbci	r25, 0xFF	; 255
    444e:	64 2f       	mov	r22, r20
    4450:	77 27       	eor	r23, r23
    4452:	0e 94 4a 22 	call	0x4494	; 0x4494 <__udivmodhi4>
    4456:	80 5d       	subi	r24, 0xD0	; 208
    4458:	8a 33       	cpi	r24, 0x3A	; 58
    445a:	0c f0       	brlt	.+2      	; 0x445e <itoa+0x2c>
    445c:	89 5d       	subi	r24, 0xD9	; 217
    445e:	81 93       	st	Z+, r24
    4460:	cb 01       	movw	r24, r22
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	a1 f7       	brne	.-24     	; 0x444e <itoa+0x1c>
    4466:	16 f4       	brtc	.+4      	; 0x446c <itoa+0x3a>
    4468:	5d e2       	ldi	r21, 0x2D	; 45
    446a:	51 93       	st	Z+, r21
    446c:	10 82       	st	Z, r1
    446e:	c9 01       	movw	r24, r18
    4470:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <strrev>

00004474 <strrev>:
    4474:	dc 01       	movw	r26, r24
    4476:	fc 01       	movw	r30, r24
    4478:	67 2f       	mov	r22, r23
    447a:	71 91       	ld	r23, Z+
    447c:	77 23       	and	r23, r23
    447e:	e1 f7       	brne	.-8      	; 0x4478 <strrev+0x4>
    4480:	32 97       	sbiw	r30, 0x02	; 2
    4482:	04 c0       	rjmp	.+8      	; 0x448c <strrev+0x18>
    4484:	7c 91       	ld	r23, X
    4486:	6d 93       	st	X+, r22
    4488:	70 83       	st	Z, r23
    448a:	62 91       	ld	r22, -Z
    448c:	ae 17       	cp	r26, r30
    448e:	bf 07       	cpc	r27, r31
    4490:	c8 f3       	brcs	.-14     	; 0x4484 <strrev+0x10>
    4492:	08 95       	ret

00004494 <__udivmodhi4>:
    4494:	aa 1b       	sub	r26, r26
    4496:	bb 1b       	sub	r27, r27
    4498:	51 e1       	ldi	r21, 0x11	; 17
    449a:	07 c0       	rjmp	.+14     	; 0x44aa <__udivmodhi4_ep>

0000449c <__udivmodhi4_loop>:
    449c:	aa 1f       	adc	r26, r26
    449e:	bb 1f       	adc	r27, r27
    44a0:	a6 17       	cp	r26, r22
    44a2:	b7 07       	cpc	r27, r23
    44a4:	10 f0       	brcs	.+4      	; 0x44aa <__udivmodhi4_ep>
    44a6:	a6 1b       	sub	r26, r22
    44a8:	b7 0b       	sbc	r27, r23

000044aa <__udivmodhi4_ep>:
    44aa:	88 1f       	adc	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	5a 95       	dec	r21
    44b0:	a9 f7       	brne	.-22     	; 0x449c <__udivmodhi4_loop>
    44b2:	80 95       	com	r24
    44b4:	90 95       	com	r25
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	08 95       	ret

000044bc <_exit>:
    44bc:	f8 94       	cli

000044be <__stop_program>:
    44be:	ff cf       	rjmp	.-2      	; 0x44be <__stop_program>
